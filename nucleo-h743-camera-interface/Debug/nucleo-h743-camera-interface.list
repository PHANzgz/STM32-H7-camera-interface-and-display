
nucleo-h743-camera-interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a990  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800ac28  0800ac28  0001ac28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acc4  0800acc4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800accc  0800accc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800accc  0800accc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acd0  0800acd0  0001acd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  0800acd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025ac4  24000018  0800acec  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24025adc  0800acec  00025adc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002896f  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d3e  00000000  00000000  000489b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001760  00000000  00000000  0004c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015e8  00000000  00000000  0004de58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038452  00000000  00000000  0004f440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001658c  00000000  00000000  00087892  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00167db2  00000000  00000000  0009de1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00205bd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000641c  00000000  00000000  00205c4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ac10 	.word	0x0800ac10

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800ac10 	.word	0x0800ac10

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f001 faf0 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f84a 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fa8a 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f000 fa68 	bl	8000abc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 fa1a 	bl	8000a24 <MX_USART3_UART_Init>
  MX_DCMI_Init();
 80005f0:	f000 f902 	bl	80007f8 <MX_DCMI_Init>
  MX_TIM2_Init();
 80005f4:	f000 f9ca 	bl	800098c <MX_TIM2_Init>
  MX_I2C1_Init();
 80005f8:	f000 f932 	bl	8000860 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005fc:	f000 f970 	bl	80008e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(CAMERA_PWR_DWN_GPIO_Port, CAMERA_PWR_DWN_Pin, GPIO_PIN_RESET); // Turn on camera
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000606:	4814      	ldr	r0, [pc, #80]	; (8000658 <main+0x80>)
 8000608:	f005 fc3e 	bl	8005e88 <HAL_GPIO_WritePin>
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c1);
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <main+0x84>)
 800060e:	4914      	ldr	r1, [pc, #80]	; (8000660 <main+0x88>)
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <main+0x8c>)
 8000612:	f001 f985 	bl	8001920 <ov7670_init>

#if USE_GRAYSCALE
  ov7670_config(OV7670_MODE_QVGA_YUV);
#else
  ov7670_config(OV7670_MODE_QVGA_RGB565);
 8000616:	2002      	movs	r0, #2
 8000618:	f001 f9bc 	bl	8001994 <ov7670_config>
#endif
  //ov7670_config(OV7670_MODE_QVGA_RGB565);
  ov7670_registerCallback(NULL, NULL, &onFrameCallback);
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <main+0x90>)
 800061e:	2100      	movs	r1, #0
 8000620:	2000      	movs	r0, #0
 8000622:	f001 fa41 	bl	8001aa8 <ov7670_registerCallback>
  ILI9341_Init(&hspi1);
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <main+0x94>)
 8000628:	f000 ffdc 	bl	80015e4 <ILI9341_Init>
#if USE_GRAYSCALE
	  // DCMI setting "Byte select" must be "capture every other byte to ignore Cb or Cr data"
	  // DCMI setting "Byte select start" must be "Interface captures second data"
	  if (new_capture) ILI9341_Draw_Image_From_OV7670_GRAY((unsigned char*) frame_buffer);
#else
	  if (new_capture) ILI9341_Draw_Image_From_OV7670((unsigned char*) frame_buffer);
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <main+0x98>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <main+0x62>
 8000634:	480f      	ldr	r0, [pc, #60]	; (8000674 <main+0x9c>)
 8000636:	f001 f8e7 	bl	8001808 <ILI9341_Draw_Image_From_OV7670>
#endif

	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 800063a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x80>)
 8000640:	f005 fc0a 	bl	8005e58 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1f0      	bne.n	800062c <main+0x54>
		  //ov7670_startCap(OV7670_CAP_SINGLE_FRAME, (uint32_t)frame_buffer);
		  ov7670_startCap(OV7670_CAP_SINGLE_FRAME, (uint32_t)frame_buffer);
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <main+0x9c>)
 800064c:	4619      	mov	r1, r3
 800064e:	2001      	movs	r0, #1
 8000650:	f001 f9e0 	bl	8001a14 <ov7670_startCap>
	  if (new_capture) ILI9341_Draw_Image_From_OV7670((unsigned char*) frame_buffer);
 8000654:	e7ea      	b.n	800062c <main+0x54>
 8000656:	bf00      	nop
 8000658:	58020800 	.word	0x58020800
 800065c:	240000ec 	.word	0x240000ec
 8000660:	24000138 	.word	0x24000138
 8000664:	240001b0 	.word	0x240001b0
 8000668:	08000cdd 	.word	0x08000cdd
 800066c:	24000200 	.word	0x24000200
 8000670:	24000034 	.word	0x24000034
 8000674:	24000288 	.word	0x24000288

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0cc      	sub	sp, #304	; 0x130
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000682:	224c      	movs	r2, #76	; 0x4c
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f00a faba 	bl	800ac00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000690:	2220      	movs	r2, #32
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f00a fab3 	bl	800ac00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4618      	mov	r0, r3
 80006a0:	23bc      	movs	r3, #188	; 0xbc
 80006a2:	461a      	mov	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f00a faab 	bl	800ac00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006aa:	2002      	movs	r0, #2
 80006ac:	f006 f80a 	bl	80066c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	4b4e      	ldr	r3, [pc, #312]	; (80007f0 <SystemClock_Config+0x178>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	4a4d      	ldr	r2, [pc, #308]	; (80007f0 <SystemClock_Config+0x178>)
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006c2:	4b4b      	ldr	r3, [pc, #300]	; (80007f0 <SystemClock_Config+0x178>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	f003 0201 	and.w	r2, r3, #1
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	4b49      	ldr	r3, [pc, #292]	; (80007f4 <SystemClock_Config+0x17c>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d6:	4a47      	ldr	r2, [pc, #284]	; (80007f4 <SystemClock_Config+0x17c>)
 80006d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b45      	ldr	r3, [pc, #276]	; (80007f4 <SystemClock_Config+0x17c>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ee:	bf00      	nop
 80006f0:	4b40      	ldr	r3, [pc, #256]	; (80007f4 <SystemClock_Config+0x17c>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006fc:	d1f8      	bne.n	80006f0 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fe:	2301      	movs	r3, #1
 8000700:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000704:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000708:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	2302      	movs	r3, #2
 8000714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 800071e:	233c      	movs	r3, #60	; 0x3c
 8000720:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072a:	2304      	movs	r3, #4
 800072c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000736:	230c      	movs	r3, #12
 8000738:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800074c:	4618      	mov	r0, r3
 800074e:	f005 fff3 	bl	8006738 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000758:	f000 facc 	bl	8000cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	233f      	movs	r3, #63	; 0x3f
 800075e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2303      	movs	r3, #3
 8000764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800076e:	2308      	movs	r3, #8
 8000770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800078c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000790:	2101      	movs	r1, #1
 8000792:	4618      	mov	r0, r3
 8000794:	f006 fbe0 	bl	8006f58 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 800079e:	f000 faa9 	bl	8000cf4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI1
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	f241 020a 	movw	r2, #4106	; 0x100a
 80007aa:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2200      	movs	r2, #0
 80007b2:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4618      	mov	r0, r3
 80007cc:	f006 ffb2 	bl	8007734 <HAL_RCCEx_PeriphCLKConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x162>
  {
    Error_Handler();
 80007d6:	f000 fa8d 	bl	8000cf4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_8);
 80007da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007de:	2100      	movs	r1, #0
 80007e0:	2001      	movs	r0, #1
 80007e2:	f006 fd6f 	bl	80072c4 <HAL_RCC_MCOConfig>
}
 80007e6:	bf00      	nop
 80007e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	58000400 	.word	0x58000400
 80007f4:	58024800 	.word	0x58024800

080007f8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_DCMI_Init+0x60>)
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <MX_DCMI_Init+0x64>)
 8000800:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_DCMI_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_DCMI_Init+0x60>)
 800080a:	2220      	movs	r2, #32
 800080c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_DCMI_Init+0x60>)
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_DCMI_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_DCMI_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_DCMI_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_DCMI_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_DCMI_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_DCMI_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_DCMI_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_DCMI_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_DCMI_Init+0x60>)
 8000846:	f001 fb8b 	bl	8001f60 <HAL_DCMI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 fa50 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	240001b0 	.word	0x240001b0
 800085c:	48020000 	.word	0x48020000

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_I2C1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_I2C1_Init+0x74>)
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <MX_I2C1_Init+0x7c>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000878:	2201      	movs	r2, #1
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089a:	480e      	ldr	r0, [pc, #56]	; (80008d4 <MX_I2C1_Init+0x74>)
 800089c:	f005 fb0e 	bl	8005ebc <HAL_I2C_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008a6:	f000 fa25 	bl	8000cf4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_I2C1_Init+0x74>)
 80008ae:	f005 fe71 	bl	8006594 <HAL_I2CEx_ConfigAnalogFilter>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 fa1c 	bl	8000cf4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_I2C1_Init+0x74>)
 80008c0:	f005 feb3 	bl	800662a <HAL_I2CEx_ConfigDigitalFilter>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 fa13 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	240000ec 	.word	0x240000ec
 80008d8:	40005400 	.word	0x40005400
 80008dc:	307075b1 	.word	0x307075b1

080008e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <MX_SPI1_Init+0xa4>)
 80008e6:	4a28      	ldr	r2, [pc, #160]	; (8000988 <MX_SPI1_Init+0xa8>)
 80008e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <MX_SPI1_Init+0xa4>)
 80008ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_SPI1_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_SPI1_Init+0xa4>)
 80008fa:	2207      	movs	r2, #7
 80008fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_SPI1_Init+0xa4>)
 800090c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000910:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000914:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000918:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_SPI1_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_SPI1_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_SPI1_Init+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_SPI1_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_SPI1_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000960:	2200      	movs	r2, #0
 8000962:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000966:	2200      	movs	r2, #0
 8000968:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_SPI1_Init+0xa4>)
 800096c:	2200      	movs	r2, #0
 800096e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_SPI1_Init+0xa4>)
 8000972:	f008 f9df 	bl	8008d34 <HAL_SPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800097c:	f000 f9ba 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000200 	.word	0x24000200
 8000988:	40013000 	.word	0x40013000

0800098c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009b4:	2214      	movs	r2, #20
 80009b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009d2:	f008 fd82 	bl	80094da <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009dc:	f000 f98a 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009ee:	f008 fdcb 	bl	8009588 <HAL_TIM_ConfigClockSource>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009f8:	f000 f97c 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_TIM2_Init+0x94>)
 8000a0a:	f008 ffc5 	bl	8009998 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 f96e 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	24025a88 	.word	0x24025a88

08000a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <MX_USART3_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	f009 f81b 	bl	8009aa8 <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 f93c 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a80:	f009 ffb5 	bl	800a9ee <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 f933 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a92:	f009 ffea 	bl	800aa6a <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 f92a 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000aa2:	f009 ff6b 	bl	800a97c <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 f922 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000060 	.word	0x24000060
 8000ab8:	40004800 	.word	0x40004800

08000abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_DMA_Init+0x3c>)
 8000ac4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <MX_DMA_Init+0x3c>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_DMA_Init+0x3c>)
 8000ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f001 fa06 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aea:	200c      	movs	r0, #12
 8000aec:	f001 fa1d 	bl	8001f2a <HAL_NVIC_EnableIRQ>

}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024400 	.word	0x58024400

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b12:	4b6e      	ldr	r3, [pc, #440]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	4a6c      	ldr	r2, [pc, #432]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b22:	4b6a      	ldr	r3, [pc, #424]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b30:	4b66      	ldr	r3, [pc, #408]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	4a65      	ldr	r2, [pc, #404]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b40:	4b62      	ldr	r3, [pc, #392]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	4a5d      	ldr	r2, [pc, #372]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b57      	ldr	r3, [pc, #348]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	4a56      	ldr	r2, [pc, #344]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7c:	4b53      	ldr	r3, [pc, #332]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b50      	ldr	r3, [pc, #320]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	4a4e      	ldr	r2, [pc, #312]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	4a47      	ldr	r2, [pc, #284]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb8:	4b44      	ldr	r3, [pc, #272]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc6:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	4a3f      	ldr	r2, [pc, #252]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin|myLCD_DC_Pin|myLCD_CS_Pin
 8000be4:	2200      	movs	r2, #0
 8000be6:	f24c 3101 	movw	r1, #49921	; 0xc301
 8000bea:	4839      	ldr	r0, [pc, #228]	; (8000cd0 <MX_GPIO_Init+0x1d4>)
 8000bec:	f005 f94c 	bl	8005e88 <HAL_GPIO_WritePin>
                          |myLCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWR_DWN_GPIO_Port, CAMERA_PWR_DWN_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf6:	4837      	ldr	r0, [pc, #220]	; (8000cd4 <MX_GPIO_Init+0x1d8>)
 8000bf8:	f005 f946 	bl	8005e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c02:	4834      	ldr	r0, [pc, #208]	; (8000cd4 <MX_GPIO_Init+0x1d8>)
 8000c04:	f005 f940 	bl	8005e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4832      	ldr	r0, [pc, #200]	; (8000cd8 <MX_GPIO_Init+0x1dc>)
 8000c0e:	f005 f93b 	bl	8005e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	482b      	ldr	r0, [pc, #172]	; (8000cd4 <MX_GPIO_Init+0x1d8>)
 8000c28:	f004 ff66 	bl	8005af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin myLCD_DC_Pin myLCD_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|myLCD_DC_Pin|myLCD_RST_Pin;
 8000c2c:	f24c 2301 	movw	r3, #49665	; 0xc201
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4822      	ldr	r0, [pc, #136]	; (8000cd0 <MX_GPIO_Init+0x1d4>)
 8000c46:	f004 ff57 	bl	8005af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <MX_GPIO_Init+0x1d8>)
 8000c68:	f004 ff46 	bl	8005af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_PWR_DWN_Pin CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_PWR_DWN_Pin|CAMERA_RESET_Pin;
 8000c6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <MX_GPIO_Init+0x1d8>)
 8000c86:	f004 ff37 	bl	8005af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLCD_CS_Pin */
  GPIO_InitStruct.Pin = myLCD_CS_Pin;
 8000c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(myLCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <MX_GPIO_Init+0x1d4>)
 8000ca4:	f004 ff28 	bl	8005af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Yellow_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_LED_Pin;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Yellow_LED_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_GPIO_Init+0x1dc>)
 8000cc0:	f004 ff1a 	bl	8005af8 <HAL_GPIO_Init>

}
 8000cc4:	bf00      	nop
 8000cc6:	3730      	adds	r7, #48	; 0x30
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	58020400 	.word	0x58020400
 8000cd4:	58020800 	.word	0x58020800
 8000cd8:	58021000 	.word	0x58021000

08000cdc <onFrameCallback>:

/* USER CODE BEGIN 4 */
static void onFrameCallback(){
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	new_capture = 1;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <onFrameCallback+0x14>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	24000034 	.word	0x24000034

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_MspInit+0x30>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d10:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_MspInit+0x30>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_MspInit+0x30>)
 8000d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	58024400 	.word	0x58024400

08000d38 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08e      	sub	sp, #56	; 0x38
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a75      	ldr	r2, [pc, #468]	; (8000f2c <HAL_DCMI_MspInit+0x1f4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	f040 80e4 	bne.w	8000f24 <HAL_DCMI_MspInit+0x1ec>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000d5c:	4b74      	ldr	r3, [pc, #464]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000d5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d62:	4a73      	ldr	r2, [pc, #460]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000d6c:	4b70      	ldr	r3, [pc, #448]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000d6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
 8000d78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7a:	4b6d      	ldr	r3, [pc, #436]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	4a6b      	ldr	r2, [pc, #428]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8a:	4b69      	ldr	r3, [pc, #420]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	4a64      	ldr	r2, [pc, #400]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da8:	4b61      	ldr	r3, [pc, #388]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	4a5c      	ldr	r2, [pc, #368]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc6:	4b5a      	ldr	r3, [pc, #360]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd4:	4b56      	ldr	r3, [pc, #344]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	4a55      	ldr	r2, [pc, #340]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de4:	4b52      	ldr	r3, [pc, #328]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df2:	4b4f      	ldr	r3, [pc, #316]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	4a4d      	ldr	r2, [pc, #308]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e02:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <HAL_DCMI_MspInit+0x1f8>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    PG11     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e10:	2370      	movs	r3, #112	; 0x70
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e20:	230d      	movs	r3, #13
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4842      	ldr	r0, [pc, #264]	; (8000f34 <HAL_DCMI_MspInit+0x1fc>)
 8000e2c:	f004 fe64 	bl	8005af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000e30:	2350      	movs	r3, #80	; 0x50
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e40:	230d      	movs	r3, #13
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	483b      	ldr	r0, [pc, #236]	; (8000f38 <HAL_DCMI_MspInit+0x200>)
 8000e4c:	f004 fe54 	bl	8005af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e50:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e62:	230d      	movs	r3, #13
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4833      	ldr	r0, [pc, #204]	; (8000f3c <HAL_DCMI_MspInit+0x204>)
 8000e6e:	f004 fe43 	bl	8005af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e72:	2308      	movs	r3, #8
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e82:	230d      	movs	r3, #13
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482c      	ldr	r0, [pc, #176]	; (8000f40 <HAL_DCMI_MspInit+0x208>)
 8000e8e:	f004 fe33 	bl	8005af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000e92:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ea4:	230d      	movs	r3, #13
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	4825      	ldr	r0, [pc, #148]	; (8000f44 <HAL_DCMI_MspInit+0x20c>)
 8000eb0:	f004 fe22 	bl	8005af8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream1;
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000eb6:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <HAL_DCMI_MspInit+0x214>)
 8000eb8:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000ebc:	224b      	movs	r2, #75	; 0x4b
 8000ebe:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec0:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed2:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000ed6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eda:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee2:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000eec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ef0:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000efa:	f001 fb13 	bl	8002524 <HAL_DMA_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_DCMI_MspInit+0x1d0>
    {
      Error_Handler();
 8000f04:	f7ff fef6 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000f0c:	649a      	str	r2, [r3, #72]	; 0x48
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <HAL_DCMI_MspInit+0x210>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	204e      	movs	r0, #78	; 0x4e
 8000f1a:	f000 ffec 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000f1e:	204e      	movs	r0, #78	; 0x4e
 8000f20:	f001 f803 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3738      	adds	r7, #56	; 0x38
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	48020000 	.word	0x48020000
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58021000 	.word	0x58021000
 8000f38:	58020000 	.word	0x58020000
 8000f3c:	58020800 	.word	0x58020800
 8000f40:	58020c00 	.word	0x58020c00
 8000f44:	58021800 	.word	0x58021800
 8000f48:	24000138 	.word	0x24000138
 8000f4c:	40020028 	.word	0x40020028

08000f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12d      	bne.n	8000fce <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f90:	23c0      	movs	r3, #192	; 0xc0
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f94:	2312      	movs	r3, #18
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <HAL_I2C_MspInit+0x90>)
 8000fac:	f004 fda4 	bl	8005af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	58020400 	.word	0x58020400

08000fe4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <HAL_SPI_MspInit+0xc4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d14c      	bne.n	80010a0 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <HAL_SPI_MspInit+0xc8>)
 8001008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_SPI_MspInit+0xc8>)
 800100e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001012:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <HAL_SPI_MspInit+0xc8>)
 8001018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800101c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_SPI_MspInit+0xc8>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102a:	4a20      	ldr	r2, [pc, #128]	; (80010ac <HAL_SPI_MspInit+0xc8>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_SPI_MspInit+0xc8>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_SPI_MspInit+0xc8>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	4a18      	ldr	r2, [pc, #96]	; (80010ac <HAL_SPI_MspInit+0xc8>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_SPI_MspInit+0xc8>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001060:	23a0      	movs	r3, #160	; 0xa0
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001070:	2305      	movs	r3, #5
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <HAL_SPI_MspInit+0xcc>)
 800107c:	f004 fd3c 	bl	8005af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001080:	2310      	movs	r3, #16
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001090:	2305      	movs	r3, #5
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <HAL_SPI_MspInit+0xd0>)
 800109c:	f004 fd2c 	bl	8005af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40013000 	.word	0x40013000
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58020000 	.word	0x58020000
 80010b4:	58020400 	.word	0x58020400

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c8:	d10e      	bne.n	80010e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_TIM_Base_MspInit+0x3c>)
 80010cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d0:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_TIM_Base_MspInit+0x3c>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_TIM_Base_MspInit+0x3c>)
 80010dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	58024400 	.word	0x58024400

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <HAL_UART_MspInit+0x88>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12e      	bne.n	8001178 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_UART_MspInit+0x8c>)
 800111c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001120:	4a18      	ldr	r2, [pc, #96]	; (8001184 <HAL_UART_MspInit+0x8c>)
 8001122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001126:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_UART_MspInit+0x8c>)
 800112c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_UART_MspInit+0x8c>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <HAL_UART_MspInit+0x8c>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_UART_MspInit+0x8c>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001156:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001168:	2307      	movs	r3, #7
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_UART_MspInit+0x90>)
 8001174:	f004 fcc0 	bl	8005af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40004800 	.word	0x40004800
 8001184:	58024400 	.word	0x58024400
 8001188:	58020c00 	.word	0x58020c00

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 fd60 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <DMA1_Stream1_IRQHandler+0x10>)
 80011ee:	f002 fcc1 	bl	8003b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	24000138 	.word	0x24000138

080011fc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <DCMI_IRQHandler+0x10>)
 8001202:	f001 f849 	bl	8002298 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	240001b0 	.word	0x240001b0

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001214:	4b39      	ldr	r3, [pc, #228]	; (80012fc <SystemInit+0xec>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a38      	ldr	r2, [pc, #224]	; (80012fc <SystemInit+0xec>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <SystemInit+0xf0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	2b06      	cmp	r3, #6
 800122e:	d807      	bhi.n	8001240 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <SystemInit+0xf0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 030f 	bic.w	r3, r3, #15
 8001238:	4a31      	ldr	r2, [pc, #196]	; (8001300 <SystemInit+0xf0>)
 800123a:	f043 0307 	orr.w	r3, r3, #7
 800123e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <SystemInit+0xf4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a2f      	ldr	r2, [pc, #188]	; (8001304 <SystemInit+0xf4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <SystemInit+0xf4>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <SystemInit+0xf4>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	492b      	ldr	r1, [pc, #172]	; (8001304 <SystemInit+0xf4>)
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <SystemInit+0xf8>)
 800125a:	4013      	ands	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <SystemInit+0xf0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	2b07      	cmp	r3, #7
 8001268:	d907      	bls.n	800127a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <SystemInit+0xf0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 030f 	bic.w	r3, r3, #15
 8001272:	4a23      	ldr	r2, [pc, #140]	; (8001300 <SystemInit+0xf0>)
 8001274:	f043 0307 	orr.w	r3, r3, #7
 8001278:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <SystemInit+0xf4>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <SystemInit+0xf4>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <SystemInit+0xf4>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <SystemInit+0xf4>)
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <SystemInit+0xfc>)
 8001290:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <SystemInit+0xf4>)
 8001294:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <SystemInit+0x100>)
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <SystemInit+0xf4>)
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <SystemInit+0x104>)
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <SystemInit+0xf4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <SystemInit+0xf4>)
 80012a6:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <SystemInit+0x104>)
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <SystemInit+0xf4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <SystemInit+0xf4>)
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <SystemInit+0x104>)
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <SystemInit+0xf4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <SystemInit+0xf4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a10      	ldr	r2, [pc, #64]	; (8001304 <SystemInit+0xf4>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <SystemInit+0xf4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <SystemInit+0x108>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <SystemInit+0x10c>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012da:	d202      	bcs.n	80012e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <SystemInit+0x110>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <SystemInit+0x114>)
 80012e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SystemInit+0xec>)
 80012ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	52002000 	.word	0x52002000
 8001304:	58024400 	.word	0x58024400
 8001308:	eaf6ed7f 	.word	0xeaf6ed7f
 800130c:	02020200 	.word	0x02020200
 8001310:	01ff0000 	.word	0x01ff0000
 8001314:	01010280 	.word	0x01010280
 8001318:	5c001000 	.word	0x5c001000
 800131c:	ffff0000 	.word	0xffff0000
 8001320:	51008108 	.word	0x51008108
 8001324:	52004000 	.word	0x52004000

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800132c:	f7ff ff70 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001332:	e003      	b.n	800133c <LoopCopyDataInit>

08001334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800133a:	3104      	adds	r1, #4

0800133c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001344:	d3f6      	bcc.n	8001334 <CopyDataInit>
  ldr  r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001348:	e002      	b.n	8001350 <LoopFillZerobss>

0800134a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800134a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800134c:	f842 3b04 	str.w	r3, [r2], #4

08001350 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001354:	d3f9      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001356:	f009 fc2f 	bl	800abb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff f93d 	bl	80005d8 <main>
  bx  lr    
 800135e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001364:	0800acd4 	.word	0x0800acd4
  ldr  r0, =_sdata
 8001368:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800136c:	24000018 	.word	0x24000018
  ldr  r2, =_sbss
 8001370:	24000018 	.word	0x24000018
  ldr  r3, = _ebss
 8001374:	24025adc 	.word	0x24025adc

08001378 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC3_IRQHandler>
	...

0800137c <ILI9341_SPI_Init>:
/* Global Variables ------------------------------------------------------------------*/
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;
SPI_HandleTypeDef *sp_hspi;
/* Initialize SPI */
void ILI9341_SPI_Init(SPI_HandleTypeDef *hspi){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	sp_hspi = hspi;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <ILI9341_SPI_Init+0x24>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <ILI9341_SPI_Init+0x28>)
 8001392:	f004 fd79 	bl	8005e88 <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	24025ad4 	.word	0x24025ad4
 80013a4:	58020400 	.word	0x58020400

080013a8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(sp_hspi, &SPI_Data, 1, 1);
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <ILI9341_SPI_Send+0x20>)
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	1df9      	adds	r1, r7, #7
 80013b8:	2301      	movs	r3, #1
 80013ba:	2201      	movs	r2, #1
 80013bc:	f007 fdb2 	bl	8008f24 <HAL_SPI_Transmit>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	24025ad4 	.word	0x24025ad4

080013cc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <ILI9341_Write_Command+0x40>)
 80013de:	f004 fd53 	bl	8005e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e8:	4808      	ldr	r0, [pc, #32]	; (800140c <ILI9341_Write_Command+0x40>)
 80013ea:	f004 fd4d 	bl	8005e88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ffd9 	bl	80013a8 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <ILI9341_Write_Command+0x40>)
 80013fe:	f004 fd43 	bl	8005e88 <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	58020400 	.word	0x58020400

08001410 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <ILI9341_Write_Data+0x40>)
 8001422:	f004 fd31 	bl	8005e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142c:	4808      	ldr	r0, [pc, #32]	; (8001450 <ILI9341_Write_Data+0x40>)
 800142e:	f004 fd2b 	bl	8005e88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ffb7 	bl	80013a8 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <ILI9341_Write_Data+0x40>)
 8001442:	f004 fd21 	bl	8005e88 <HAL_GPIO_WritePin>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	58020400 	.word	0x58020400

08001454 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2){
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	80fb      	strh	r3, [r7, #6]
 8001466:	4603      	mov	r3, r0
 8001468:	80bb      	strh	r3, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8001472:	202a      	movs	r0, #42	; 0x2a
 8001474:	f7ff ffaa 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	b29b      	uxth	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ffc5 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ffc0 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b29b      	uxth	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ffb9 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffb4 	bl	8001410 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 80014a8:	202b      	movs	r0, #43	; 0x2b
 80014aa:	f7ff ff8f 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 80014ae:	88bb      	ldrh	r3, [r7, #4]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ffaa 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 80014bc:	88bb      	ldrh	r3, [r7, #4]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffa5 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 80014c6:	883b      	ldrh	r3, [r7, #0]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff9e 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 80014d4:	883b      	ldrh	r3, [r7, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff99 	bl	8001410 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 80014de:	202c      	movs	r0, #44	; 0x2c
 80014e0:	f7ff ff74 	bl	80013cc <ILI9341_Write_Command>
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd90      	pop	{r4, r7, pc}

080014ec <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f6:	480b      	ldr	r0, [pc, #44]	; (8001524 <ILI9341_Reset+0x38>)
 80014f8:	f004 fcc6 	bl	8005e88 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80014fc:	20c8      	movs	r0, #200	; 0xc8
 80014fe:	f000 fbf1 	bl	8001ce4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001508:	4806      	ldr	r0, [pc, #24]	; (8001524 <ILI9341_Reset+0x38>)
 800150a:	f004 fcbd 	bl	8005e88 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800150e:	20c8      	movs	r0, #200	; 0xc8
 8001510:	f000 fbe8 	bl	8001ce4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151a:	4802      	ldr	r0, [pc, #8]	; (8001524 <ILI9341_Reset+0x38>)
 800151c:	f004 fcb4 	bl	8005e88 <HAL_GPIO_WritePin>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	58020400 	.word	0x58020400

08001528 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation){
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	uint8_t screen_rotation = Rotation;
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8001536:	2036      	movs	r0, #54	; 0x36
 8001538:	f7ff ff48 	bl	80013cc <ILI9341_Write_Command>
	HAL_Delay(1);
 800153c:	2001      	movs	r0, #1
 800153e:	f000 fbd1 	bl	8001ce4 <HAL_Delay>

	switch(screen_rotation)
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d837      	bhi.n	80015b8 <ILI9341_Set_Rotation+0x90>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <ILI9341_Set_Rotation+0x28>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001561 	.word	0x08001561
 8001554:	08001577 	.word	0x08001577
 8001558:	0800158d 	.word	0x0800158d
 800155c:	080015a3 	.word	0x080015a3
		{
			case SCREEN_VERTICAL_1:
				ILI9341_Write_Data(0x40|0x08);
 8001560:	2048      	movs	r0, #72	; 0x48
 8001562:	f7ff ff55 	bl	8001410 <ILI9341_Write_Data>
				LCD_WIDTH = 240;
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <ILI9341_Set_Rotation+0x9c>)
 8001568:	22f0      	movs	r2, #240	; 0xf0
 800156a:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 320;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <ILI9341_Set_Rotation+0xa0>)
 800156e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001572:	801a      	strh	r2, [r3, #0]
				break;
 8001574:	e021      	b.n	80015ba <ILI9341_Set_Rotation+0x92>
			case SCREEN_HORIZONTAL_1:
				ILI9341_Write_Data(0x20|0x08);
 8001576:	2028      	movs	r0, #40	; 0x28
 8001578:	f7ff ff4a 	bl	8001410 <ILI9341_Write_Data>
				LCD_WIDTH  = 320;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <ILI9341_Set_Rotation+0x9c>)
 800157e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001582:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 240;
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <ILI9341_Set_Rotation+0xa0>)
 8001586:	22f0      	movs	r2, #240	; 0xf0
 8001588:	801a      	strh	r2, [r3, #0]
				break;
 800158a:	e016      	b.n	80015ba <ILI9341_Set_Rotation+0x92>
			case SCREEN_VERTICAL_2:
				ILI9341_Write_Data(0x80|0x08);
 800158c:	2088      	movs	r0, #136	; 0x88
 800158e:	f7ff ff3f 	bl	8001410 <ILI9341_Write_Data>
				LCD_WIDTH  = 240;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <ILI9341_Set_Rotation+0x9c>)
 8001594:	22f0      	movs	r2, #240	; 0xf0
 8001596:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 320;
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <ILI9341_Set_Rotation+0xa0>)
 800159a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800159e:	801a      	strh	r2, [r3, #0]
				break;
 80015a0:	e00b      	b.n	80015ba <ILI9341_Set_Rotation+0x92>
			case SCREEN_HORIZONTAL_2:
				ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80015a2:	20e8      	movs	r0, #232	; 0xe8
 80015a4:	f7ff ff34 	bl	8001410 <ILI9341_Write_Data>
				LCD_WIDTH  = 320;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <ILI9341_Set_Rotation+0x9c>)
 80015aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015ae:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 240;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <ILI9341_Set_Rotation+0xa0>)
 80015b2:	22f0      	movs	r2, #240	; 0xf0
 80015b4:	801a      	strh	r2, [r3, #0]
				break;
 80015b6:	e000      	b.n	80015ba <ILI9341_Set_Rotation+0x92>
			default:
				//EXIT IF SCREEN ROTATION NOT VALID!
				break;
 80015b8:	bf00      	nop
		}
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2400000a 	.word	0x2400000a
 80015c8:	24000008 	.word	0x24000008

080015cc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d6:	4802      	ldr	r0, [pc, #8]	; (80015e0 <ILI9341_Enable+0x14>)
 80015d8:	f004 fc56 	bl	8005e88 <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	58020400 	.word	0x58020400

080015e4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(SPI_HandleTypeDef *hspi){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	ILI9341_Enable();
 80015ec:	f7ff ffee 	bl	80015cc <ILI9341_Enable>
	ILI9341_SPI_Init(hspi);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fec3 	bl	800137c <ILI9341_SPI_Init>
	ILI9341_Reset();
 80015f6:	f7ff ff79 	bl	80014ec <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff fee6 	bl	80013cc <ILI9341_Write_Command>
	HAL_Delay(1000);
 8001600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001604:	f000 fb6e 	bl	8001ce4 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8001608:	20cb      	movs	r0, #203	; 0xcb
 800160a:	f7ff fedf 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 800160e:	2039      	movs	r0, #57	; 0x39
 8001610:	f7ff fefe 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8001614:	202c      	movs	r0, #44	; 0x2c
 8001616:	f7ff fefb 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fef8 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8001620:	2034      	movs	r0, #52	; 0x34
 8001622:	f7ff fef5 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8001626:	2002      	movs	r0, #2
 8001628:	f7ff fef2 	bl	8001410 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 800162c:	20cf      	movs	r0, #207	; 0xcf
 800162e:	f7ff fecd 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff feec 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8001638:	20c1      	movs	r0, #193	; 0xc1
 800163a:	f7ff fee9 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 800163e:	2030      	movs	r0, #48	; 0x30
 8001640:	f7ff fee6 	bl	8001410 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8001644:	20e8      	movs	r0, #232	; 0xe8
 8001646:	f7ff fec1 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 800164a:	2085      	movs	r0, #133	; 0x85
 800164c:	f7ff fee0 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fedd 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8001656:	2078      	movs	r0, #120	; 0x78
 8001658:	f7ff feda 	bl	8001410 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800165c:	20ea      	movs	r0, #234	; 0xea
 800165e:	f7ff feb5 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fed4 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fed1 	bl	8001410 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 800166e:	20ed      	movs	r0, #237	; 0xed
 8001670:	f7ff feac 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8001674:	2064      	movs	r0, #100	; 0x64
 8001676:	f7ff fecb 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800167a:	2003      	movs	r0, #3
 800167c:	f7ff fec8 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8001680:	2012      	movs	r0, #18
 8001682:	f7ff fec5 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8001686:	2081      	movs	r0, #129	; 0x81
 8001688:	f7ff fec2 	bl	8001410 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 800168c:	20f7      	movs	r0, #247	; 0xf7
 800168e:	f7ff fe9d 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8001692:	2020      	movs	r0, #32
 8001694:	f7ff febc 	bl	8001410 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8001698:	20c0      	movs	r0, #192	; 0xc0
 800169a:	f7ff fe97 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 800169e:	2023      	movs	r0, #35	; 0x23
 80016a0:	f7ff feb6 	bl	8001410 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80016a4:	20c1      	movs	r0, #193	; 0xc1
 80016a6:	f7ff fe91 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80016aa:	2010      	movs	r0, #16
 80016ac:	f7ff feb0 	bl	8001410 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80016b0:	20c5      	movs	r0, #197	; 0xc5
 80016b2:	f7ff fe8b 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80016b6:	203e      	movs	r0, #62	; 0x3e
 80016b8:	f7ff feaa 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80016bc:	2028      	movs	r0, #40	; 0x28
 80016be:	f7ff fea7 	bl	8001410 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80016c2:	20c7      	movs	r0, #199	; 0xc7
 80016c4:	f7ff fe82 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 80016c8:	2086      	movs	r0, #134	; 0x86
 80016ca:	f7ff fea1 	bl	8001410 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 80016ce:	2036      	movs	r0, #54	; 0x36
 80016d0:	f7ff fe7c 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 80016d4:	2048      	movs	r0, #72	; 0x48
 80016d6:	f7ff fe9b 	bl	8001410 <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 80016da:	203a      	movs	r0, #58	; 0x3a
 80016dc:	f7ff fe76 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 80016e0:	2055      	movs	r0, #85	; 0x55
 80016e2:	f7ff fe95 	bl	8001410 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 80016e6:	20b1      	movs	r0, #177	; 0xb1
 80016e8:	f7ff fe70 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fe8f 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 80016f2:	2018      	movs	r0, #24
 80016f4:	f7ff fe8c 	bl	8001410 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 80016f8:	20b6      	movs	r0, #182	; 0xb6
 80016fa:	f7ff fe67 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 80016fe:	2008      	movs	r0, #8
 8001700:	f7ff fe86 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8001704:	2082      	movs	r0, #130	; 0x82
 8001706:	f7ff fe83 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 800170a:	2027      	movs	r0, #39	; 0x27
 800170c:	f7ff fe80 	bl	8001410 <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8001710:	20f2      	movs	r0, #242	; 0xf2
 8001712:	f7ff fe5b 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff fe7a 	bl	8001410 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 800171c:	2026      	movs	r0, #38	; 0x26
 800171e:	f7ff fe55 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff fe74 	bl	8001410 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8001728:	20e0      	movs	r0, #224	; 0xe0
 800172a:	f7ff fe4f 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 800172e:	200f      	movs	r0, #15
 8001730:	f7ff fe6e 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8001734:	2031      	movs	r0, #49	; 0x31
 8001736:	f7ff fe6b 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 800173a:	202b      	movs	r0, #43	; 0x2b
 800173c:	f7ff fe68 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8001740:	200c      	movs	r0, #12
 8001742:	f7ff fe65 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8001746:	200e      	movs	r0, #14
 8001748:	f7ff fe62 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800174c:	2008      	movs	r0, #8
 800174e:	f7ff fe5f 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8001752:	204e      	movs	r0, #78	; 0x4e
 8001754:	f7ff fe5c 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8001758:	20f1      	movs	r0, #241	; 0xf1
 800175a:	f7ff fe59 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 800175e:	2037      	movs	r0, #55	; 0x37
 8001760:	f7ff fe56 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8001764:	2007      	movs	r0, #7
 8001766:	f7ff fe53 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 800176a:	2010      	movs	r0, #16
 800176c:	f7ff fe50 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8001770:	2003      	movs	r0, #3
 8001772:	f7ff fe4d 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8001776:	200e      	movs	r0, #14
 8001778:	f7ff fe4a 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 800177c:	2009      	movs	r0, #9
 800177e:	f7ff fe47 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff fe44 	bl	8001410 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8001788:	20e1      	movs	r0, #225	; 0xe1
 800178a:	f7ff fe1f 	bl	80013cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff fe3e 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8001794:	200e      	movs	r0, #14
 8001796:	f7ff fe3b 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 800179a:	2014      	movs	r0, #20
 800179c:	f7ff fe38 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f7ff fe35 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80017a6:	2011      	movs	r0, #17
 80017a8:	f7ff fe32 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80017ac:	2007      	movs	r0, #7
 80017ae:	f7ff fe2f 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80017b2:	2031      	movs	r0, #49	; 0x31
 80017b4:	f7ff fe2c 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80017b8:	20c1      	movs	r0, #193	; 0xc1
 80017ba:	f7ff fe29 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80017be:	2048      	movs	r0, #72	; 0x48
 80017c0:	f7ff fe26 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80017c4:	2008      	movs	r0, #8
 80017c6:	f7ff fe23 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f7ff fe20 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80017d0:	200c      	movs	r0, #12
 80017d2:	f7ff fe1d 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80017d6:	2031      	movs	r0, #49	; 0x31
 80017d8:	f7ff fe1a 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 80017dc:	2036      	movs	r0, #54	; 0x36
 80017de:	f7ff fe17 	bl	8001410 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80017e2:	200f      	movs	r0, #15
 80017e4:	f7ff fe14 	bl	8001410 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 80017e8:	2011      	movs	r0, #17
 80017ea:	f7ff fdef 	bl	80013cc <ILI9341_Write_Command>
	HAL_Delay(120);
 80017ee:	2078      	movs	r0, #120	; 0x78
 80017f0:	f000 fa78 	bl	8001ce4 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 80017f4:	2029      	movs	r0, #41	; 0x29
 80017f6:	f7ff fde9 	bl	80013cc <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff fe94 	bl	8001528 <ILI9341_Set_Rotation>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <ILI9341_Draw_Image_From_OV7670>:
	}
}

// Draw image captured from OV7670 camera in RGB565 mode
// img must be a buffer of size at least PIXEL_HEIGHT*PIXEL_WIDTH/2
void ILI9341_Draw_Image_From_OV7670(const unsigned char* img){
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	466b      	mov	r3, sp
 8001812:	461d      	mov	r5, r3
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff fe87 	bl	8001528 <ILI9341_Set_Rotation>
	ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 800181a:	23f0      	movs	r3, #240	; 0xf0
 800181c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001820:	2100      	movs	r1, #0
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff fe16 	bl	8001454 <ILI9341_Set_Address>

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800182e:	483a      	ldr	r0, [pc, #232]	; (8001918 <ILI9341_Draw_Image_From_OV7670+0x110>)
 8001830:	f004 fb2a 	bl	8005e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183a:	4837      	ldr	r0, [pc, #220]	; (8001918 <ILI9341_Draw_Image_From_OV7670+0x110>)
 800183c:	f004 fb24 	bl	8005e88 <HAL_GPIO_WritePin>

	const uint16_t buf_size = BURST_MAX_SIZE;
 8001840:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001844:	827b      	strh	r3, [r7, #18]
	unsigned char tx_buf[buf_size];
 8001846:	8a7b      	ldrh	r3, [r7, #18]
 8001848:	3b01      	subs	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	8a79      	ldrh	r1, [r7, #18]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	f04f 0400 	mov.w	r4, #0
 800185a:	00d4      	lsls	r4, r2, #3
 800185c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001860:	00cb      	lsls	r3, r1, #3
 8001862:	8a79      	ldrh	r1, [r7, #18]
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f04f 0400 	mov.w	r4, #0
 8001870:	00d4      	lsls	r4, r2, #3
 8001872:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001876:	00cb      	lsls	r3, r1, #3
 8001878:	8a7b      	ldrh	r3, [r7, #18]
 800187a:	3307      	adds	r3, #7
 800187c:	08db      	lsrs	r3, r3, #3
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	ebad 0d03 	sub.w	sp, sp, r3
 8001884:	466b      	mov	r3, sp
 8001886:	3300      	adds	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
	uint32_t counter = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/buf_size; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	e02d      	b.n	80018f0 <ILI9341_Draw_Image_From_OV7670+0xe8>
	{
		for(uint32_t k = 0; k< buf_size; k+=2)
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	e018      	b.n	80018cc <ILI9341_Draw_Image_From_OV7670+0xc4>
		{
			tx_buf[k]	= img[counter+k+1];	//Little endian
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	3301      	adds	r3, #1
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	7819      	ldrb	r1, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	460a      	mov	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
			tx_buf[k+1]	= img[counter+k];
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	4413      	add	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	441a      	add	r2, r3
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	3301      	adds	r3, #1
 80018c0:	7811      	ldrb	r1, [r2, #0]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	54d1      	strb	r1, [r2, r3]
		for(uint32_t k = 0; k< buf_size; k+=2)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3302      	adds	r3, #2
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	8a7b      	ldrh	r3, [r7, #18]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d3e2      	bcc.n	800189a <ILI9341_Draw_Image_From_OV7670+0x92>
		}
		HAL_SPI_Transmit(sp_hspi, (unsigned char*)tx_buf, buf_size, 10);
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <ILI9341_Draw_Image_From_OV7670+0x114>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	8a7a      	ldrh	r2, [r7, #18]
 80018dc:	230a      	movs	r3, #10
 80018de:	f007 fb21 	bl	8008f24 <HAL_SPI_Transmit>
		counter += buf_size;
 80018e2:	8a7b      	ldrh	r3, [r7, #18]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	4413      	add	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/buf_size; i++)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	8a7b      	ldrh	r3, [r7, #18]
 80018f2:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 80018f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	4293      	cmp	r3, r2
 8001900:	d3c8      	bcc.n	8001894 <ILI9341_Draw_Image_From_OV7670+0x8c>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <ILI9341_Draw_Image_From_OV7670+0x110>)
 800190a:	f004 fabd 	bl	8005e88 <HAL_GPIO_WritePin>
 800190e:	46ad      	mov	sp, r5
}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bdb0      	pop	{r4, r5, r7, pc}
 8001918:	58020400 	.word	0x58020400
 800191c:	24025ad4 	.word	0x24025ad4

08001920 <ov7670_init>:
/*** Internal Function Declarations ***/
//static HAL_StatusTypeDef ov7670_write(uint8_t regAddr, uint8_t data);
//static HAL_StatusTypeDef ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
HAL_StatusTypeDef ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c){
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <ov7670_init+0x60>)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8001932:	4a14      	ldr	r2, [pc, #80]	; (8001984 <ov7670_init+0x64>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8001938:	4a13      	ldr	r2, [pc, #76]	; (8001988 <ov7670_init+0x68>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <ov7670_init+0x6c>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194a:	4811      	ldr	r0, [pc, #68]	; (8001990 <ov7670_init+0x70>)
 800194c:	f004 fa9c 	bl	8005e88 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001950:	2064      	movs	r0, #100	; 0x64
 8001952:	f000 f9c7 	bl	8001ce4 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <ov7670_init+0x70>)
 800195e:	f004 fa93 	bl	8005e88 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001962:	2064      	movs	r0, #100	; 0x64
 8001964:	f000 f9be 	bl	8001ce4 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	2012      	movs	r0, #18
 800196c:	f000 f908 	bl	8001b80 <ov7670_write>
  HAL_Delay(30);
 8001970:	201e      	movs	r0, #30
 8001972:	f000 f9b7 	bl	8001ce4 <HAL_Delay>

  //uint8_t buffer[4];
  //ov7670_read(0x0b, buffer);

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	24000038 	.word	0x24000038
 8001984:	2400003c 	.word	0x2400003c
 8001988:	24000040 	.word	0x24000040
 800198c:	24000044 	.word	0x24000044
 8001990:	58020800 	.word	0x58020800

08001994 <ov7670_config>:

HAL_StatusTypeDef ov7670_config(uint8_t mode){
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  ov7670_stopCap();
 800199e:	f000 f877 	bl	8001a90 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	2012      	movs	r0, #18
 80019a6:	f000 f8eb 	bl	8001b80 <ov7670_write>
  HAL_Delay(30);
 80019aa:	201e      	movs	r0, #30
 80019ac:	f000 f99a 	bl	8001ce4 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_EOT; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e011      	b.n	80019da <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 80019b6:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <ov7670_config+0x78>)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <ov7670_config+0x78>)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f000 f8d9 	bl	8001b80 <ov7670_write>
    HAL_Delay(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 f988 	bl	8001ce4 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_EOT; i++) {
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <ov7670_config+0x78>)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80019e2:	2bff      	cmp	r3, #255	; 0xff
 80019e4:	d1e7      	bne.n	80019b6 <ov7670_config+0x22>
  }
  if(mode == OV7670_MODE_QVGA_YUV){
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d10a      	bne.n	8001a02 <ov7670_config+0x6e>
	  ov7670_write(0x12, 0x10); // QVGA, YUV
 80019ec:	2110      	movs	r1, #16
 80019ee:	2012      	movs	r0, #18
 80019f0:	f000 f8c6 	bl	8001b80 <ov7670_write>
	  ov7670_write(0x40, 0xc0); // 00-FF, No RGB
 80019f4:	21c0      	movs	r1, #192	; 0xc0
 80019f6:	2040      	movs	r0, #64	; 0x40
 80019f8:	f000 f8c2 	bl	8001b80 <ov7670_write>

	  imgMode = OV7670_MODE_QVGA_YUV;
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <ov7670_config+0x7c>)
 80019fe:	2204      	movs	r2, #4
 8001a00:	701a      	strb	r2, [r3, #0]
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	0800ac48 	.word	0x0800ac48
 8001a10:	2400000c 	.word	0x2400000c

08001a14 <ov7670_startCap>:

// Capture modes are OV7670_CAP_SINGLE_FRAME or OV7670_CAP_CONTINUOUS
// Image modes are OV7670_MODE_QVGA_RGB565 or OV7670_MODE_QVGA_YUV
HAL_StatusTypeDef ov7670_startCap(uint32_t capMode, uint32_t destAddress){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]

	ov7670_stopCap();
 8001a1e:	f000 f837 	bl	8001a90 <ov7670_stopCap>
	if (capMode == OV7670_CAP_CONTINUOUS) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d110      	bne.n	8001a4a <ov7670_startCap+0x36>
		/* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
		s_destAddressForContiuousMode = destAddress;
 8001a28:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <ov7670_startCap+0x6c>)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6013      	str	r3, [r2, #0]
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/imgMode);
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <ov7670_startCap+0x70>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <ov7670_startCap+0x74>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	2100      	movs	r1, #0
 8001a44:	f000 fb06 	bl	8002054 <HAL_DCMI_Start_DMA>
 8001a48:	e015      	b.n	8001a76 <ov7670_startCap+0x62>
	} else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d112      	bne.n	8001a76 <ov7670_startCap+0x62>
		s_destAddressForContiuousMode = 0;
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <ov7670_startCap+0x6c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
		capture = 1;
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <ov7670_startCap+0x78>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/imgMode);
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <ov7670_startCap+0x70>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <ov7670_startCap+0x74>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001a6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	2102      	movs	r1, #2
 8001a72:	f000 faef 	bl	8002054 <HAL_DCMI_Start_DMA>
	}

	return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	24000044 	.word	0x24000044
 8001a84:	24000038 	.word	0x24000038
 8001a88:	2400000c 	.word	0x2400000c
 8001a8c:	2400005c 	.word	0x2400005c

08001a90 <ov7670_stopCap>:

HAL_StatusTypeDef ov7670_stopCap(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <ov7670_stopCap+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fb9d 	bl	80021d8 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	24000038 	.word	0x24000038

08001aa8 <ov7670_registerCallback>:

void ov7670_registerCallback(void (*cbHsync)(uint32_t h), void (*cbVsync)(uint32_t v), void (*cbFrame)()){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  s_cbHsync = cbHsync;
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <ov7670_registerCallback+0x2c>)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6013      	str	r3, [r2, #0]
  s_cbVsync = cbVsync;
 8001aba:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <ov7670_registerCallback+0x30>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	6013      	str	r3, [r2, #0]
  s_cbFrame = cbFrame;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <ov7670_registerCallback+0x34>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	24000048 	.word	0x24000048
 8001ad8:	2400004c 	.word	0x2400004c
 8001adc:	24000050 	.word	0x24000050

08001ae0 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbFrame)s_cbFrame();
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_DCMI_FrameEventCallback+0x50>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <HAL_DCMI_FrameEventCallback+0x16>
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_DCMI_FrameEventCallback+0x50>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_DCMI_FrameEventCallback+0x54>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_DCMI_FrameEventCallback+0x36>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3328      	adds	r3, #40	; 0x28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_DCMI_FrameEventCallback+0x54>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001b12:	f001 f863 	bl	8002bdc <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_DCMI_FrameEventCallback+0x58>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_DCMI_FrameEventCallback+0x58>)
 8001b1e:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_DCMI_FrameEventCallback+0x5c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	24000050 	.word	0x24000050
 8001b34:	24000044 	.word	0x24000044
 8001b38:	24000058 	.word	0x24000058
 8001b3c:	24000054 	.word	0x24000054

08001b40 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	if(capture) if(s_cbVsync)s_cbVsync(s_currentV);
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_DCMI_VsyncEventCallback+0x34>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d009      	beq.n	8001b64 <HAL_DCMI_VsyncEventCallback+0x24>
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_DCMI_VsyncEventCallback+0x38>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_DCMI_VsyncEventCallback+0x24>
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_DCMI_VsyncEventCallback+0x38>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_DCMI_VsyncEventCallback+0x3c>)
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	4610      	mov	r0, r2
 8001b62:	4798      	blx	r3
	capture = 0;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_DCMI_VsyncEventCallback+0x34>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2400005c 	.word	0x2400005c
 8001b78:	2400004c 	.word	0x2400004c
 8001b7c:	24000058 	.word	0x24000058

08001b80 <ov7670_write>:
//  if(s_cbHsync)s_cbHsync(s_currentH);
//  s_currentH++;
//}

/*** Internal Function Defines ***/
HAL_StatusTypeDef ov7670_write(uint8_t regAddr, uint8_t data){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	4603      	mov	r3, r0
 8001b88:	460a      	mov	r2, r1
 8001b8a:	71fb      	strb	r3, [r7, #7]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <ov7670_write+0x3c>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	2364      	movs	r3, #100	; 0x64
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	1dbb      	adds	r3, r7, #6
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	2142      	movs	r1, #66	; 0x42
 8001ba8:	f004 fa18 	bl	8005fdc <HAL_I2C_Mem_Write>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73fb      	strb	r3, [r7, #15]
	//ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, data, 1, 100);
  } while (ret != HAL_OK && 0);
  return ret;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	24000040 	.word	0x24000040

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	f000 f98a 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bcc:	f005 fbe4 	bl	8007398 <HAL_RCC_GetSysClockFreq>
 8001bd0:	4601      	mov	r1, r0
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_Init+0x68>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <HAL_Init+0x6c>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa21 f303 	lsr.w	r3, r1, r3
 8001be8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_Init+0x68>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <HAL_Init+0x6c>)
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <HAL_Init+0x70>)
 8001c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_Init+0x74>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f814 	bl	8001c38 <HAL_InitTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e002      	b.n	8001c20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1a:	f7ff f873 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	0800ac38 	.word	0x0800ac38
 8001c30:	24000004 	.word	0x24000004
 8001c34:	24000000 	.word	0x24000000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_InitTick+0x60>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e021      	b.n	8001c90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HAL_InitTick+0x64>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_InitTick+0x60>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f96f 	bl	8001f46 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f939 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x68>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	24000014 	.word	0x24000014
 8001c9c:	24000000 	.word	0x24000000
 8001ca0:	24000010 	.word	0x24000010

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	24000014 	.word	0x24000014
 8001cc8:	24025ad8 	.word	0x24025ad8

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	24025ad8 	.word	0x24025ad8

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_Delay+0x40>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	24000014 	.word	0x24000014

08001d28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_GetREVID+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0c1b      	lsrs	r3, r3, #16
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	5c001000 	.word	0x5c001000

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <__NVIC_SetPriorityGrouping+0x40>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x40>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00
 8001d84:	05fa0000 	.word	0x05fa0000

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	; (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff29 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff40 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff90 	bl	8001e34 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5f 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff33 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa4 	bl	8001e9c <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e069      	b.n	8002046 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe feda 	bl	8000d38 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <HAL_DCMI_Init+0xf0>)
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001fbe:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001fca:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001fd6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001fe2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001fee:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d112      	bne.n	8002026 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7f1b      	ldrb	r3, [r3, #28]
 8002004:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7f5b      	ldrb	r3, [r3, #29]
 800200a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800200c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7f9b      	ldrb	r3, [r3, #30]
 8002012:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002014:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7fdb      	ldrb	r3, [r3, #31]
 800201c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002022:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002024:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 021e 	orr.w	r2, r2, #30
 8002034:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	ffe0f007 	.word	0xffe0f007

08002054 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_DCMI_Start_DMA+0x1c>
 800206c:	2302      	movs	r3, #2
 800206e:	e0ab      	b.n	80021c8 <HAL_DCMI_Start_DMA+0x174>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800208e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0202 	bic.w	r2, r2, #2
 800209e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6819      	ldr	r1, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	4a46      	ldr	r2, [pc, #280]	; (80021d0 <HAL_DCMI_Start_DMA+0x17c>)
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020bc:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <HAL_DCMI_Start_DMA+0x180>)
 80020be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	2200      	movs	r2, #0
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e6:	d219      	bcs.n	800211c <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3328      	adds	r3, #40	; 0x28
 80020f2:	4619      	mov	r1, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	f000 fd70 	bl	8002bdc <HAL_DMA_Start_IT>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d055      	beq.n	80021ae <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2240      	movs	r2, #64	; 0x40
 8002106:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e055      	b.n	80021c8 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_DCMI_Start_DMA+0x17c>)
 8002122:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002136:	e009      	b.n	800214c <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	085a      	lsrs	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	005a      	lsls	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002154:	d2f0      	bcs.n	8002138 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	1e9a      	subs	r2, r3, #2
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3328      	adds	r3, #40	; 0x28
 800217e:	4619      	mov	r1, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	f003 f805 	bl	8005198 <HAL_DMAEx_MultiBufferStart_IT>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00c      	beq.n	80021ae <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00c      	b.n	80021c8 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	080023c5 	.word	0x080023c5
 80021d4:	080024eb 	.word	0x080024eb

080021d8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_DCMI_Stop+0xb8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <HAL_DCMI_Stop+0xbc>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0a5b      	lsrs	r3, r3, #9
 80021ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_DCMI_Stop+0x30>
 8002204:	2302      	movs	r3, #2
 8002206:	e03f      	b.n	8002288 <HAL_DCMI_Stop+0xb0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d108      	bne.n	8002246 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	f043 0220 	orr.w	r2, r3, #32
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	72fb      	strb	r3, [r7, #11]
      break;
 8002244:	e006      	b.n	8002254 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e9      	bne.n	8002228 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002262:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	4618      	mov	r0, r3
 800226a:	f000 ff21 	bl	80030b0 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8002286:	7afb      	ldrb	r3, [r7, #11]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	24000000 	.word	0x24000000
 8002294:	10624dd3 	.word	0x10624dd3

08002298 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2204      	movs	r2, #4
 80022b8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	f043 0202 	orr.w	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2204      	movs	r2, #4
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	4a31      	ldr	r2, [pc, #196]	; (8002398 <HAL_DCMI_IRQHandler+0x100>)
 80022d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022da:	4618      	mov	r0, r3
 80022dc:	f001 fa06 	bl	80036ec <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2202      	movs	r2, #2
 80022f0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2204      	movs	r2, #4
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230a:	4a23      	ldr	r2, [pc, #140]	; (8002398 <HAL_DCMI_IRQHandler+0x100>)
 800230c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002312:	4618      	mov	r0, r3
 8002314:	f001 f9ea 	bl	80036ec <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2210      	movs	r2, #16
 8002328:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f840 	bl	80023b0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d006      	beq.n	8002348 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2208      	movs	r2, #8
 8002340:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fbfc 	bl	8001b40 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01d      	beq.n	800238e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b02      	cmp	r3, #2
 800235e:	d107      	bne.n	8002370 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 021e 	bic.w	r2, r2, #30
 800236e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fba9 	bl	8001ae0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	080024eb 	.word	0x080024eb

0800239c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d043      	beq.n	8002462 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e6:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d118      	bne.n	8002426 <DCMI_DMAXferCplt+0x62>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d015      	beq.n	8002426 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	00da      	lsls	r2, r3, #3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	4413      	add	r3, r2
 8002412:	2200      	movs	r2, #0
 8002414:	4619      	mov	r1, r3
 8002416:	f003 fa1d 	bl	8005854 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	1e5a      	subs	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
 8002424:	e044      	b.n	80024b0 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d13c      	bne.n	80024b0 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	00da      	lsls	r2, r3, #3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	2201      	movs	r2, #1
 8002450:	4619      	mov	r1, r3
 8002452:	f003 f9ff 	bl	8005854 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	1e5a      	subs	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
 8002460:	e026      	b.n	80024b0 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	e017      	b.n	80024b0 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	0099      	lsls	r1, r3, #2
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	440a      	add	r2, r1
 80024a6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d112      	bne.n	80024e2 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d103      	bne.n	80024e2 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d009      	beq.n	8002516 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff ff40 	bl	800239c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff fbce 	bl	8001ccc <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e316      	b.n	8002b6a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a66      	ldr	r2, [pc, #408]	; (80026dc <HAL_DMA_Init+0x1b8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d04a      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_DMA_Init+0x1bc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d045      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a63      	ldr	r2, [pc, #396]	; (80026e4 <HAL_DMA_Init+0x1c0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d040      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a62      	ldr	r2, [pc, #392]	; (80026e8 <HAL_DMA_Init+0x1c4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d03b      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a60      	ldr	r2, [pc, #384]	; (80026ec <HAL_DMA_Init+0x1c8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d036      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5f      	ldr	r2, [pc, #380]	; (80026f0 <HAL_DMA_Init+0x1cc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d031      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a5d      	ldr	r2, [pc, #372]	; (80026f4 <HAL_DMA_Init+0x1d0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02c      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a5c      	ldr	r2, [pc, #368]	; (80026f8 <HAL_DMA_Init+0x1d4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d027      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a5a      	ldr	r2, [pc, #360]	; (80026fc <HAL_DMA_Init+0x1d8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d022      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a59      	ldr	r2, [pc, #356]	; (8002700 <HAL_DMA_Init+0x1dc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d01d      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a57      	ldr	r2, [pc, #348]	; (8002704 <HAL_DMA_Init+0x1e0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d018      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a56      	ldr	r2, [pc, #344]	; (8002708 <HAL_DMA_Init+0x1e4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a54      	ldr	r2, [pc, #336]	; (800270c <HAL_DMA_Init+0x1e8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00e      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a53      	ldr	r2, [pc, #332]	; (8002710 <HAL_DMA_Init+0x1ec>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a51      	ldr	r2, [pc, #324]	; (8002714 <HAL_DMA_Init+0x1f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Init+0xb8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a50      	ldr	r2, [pc, #320]	; (8002718 <HAL_DMA_Init+0x1f4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_DMA_Init+0xbc>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_DMA_Init+0xbe>
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 813b 	beq.w	800285e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a37      	ldr	r2, [pc, #220]	; (80026dc <HAL_DMA_Init+0x1b8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d04a      	beq.n	8002698 <HAL_DMA_Init+0x174>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a36      	ldr	r2, [pc, #216]	; (80026e0 <HAL_DMA_Init+0x1bc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d045      	beq.n	8002698 <HAL_DMA_Init+0x174>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <HAL_DMA_Init+0x1c0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d040      	beq.n	8002698 <HAL_DMA_Init+0x174>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a33      	ldr	r2, [pc, #204]	; (80026e8 <HAL_DMA_Init+0x1c4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03b      	beq.n	8002698 <HAL_DMA_Init+0x174>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a31      	ldr	r2, [pc, #196]	; (80026ec <HAL_DMA_Init+0x1c8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d036      	beq.n	8002698 <HAL_DMA_Init+0x174>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a30      	ldr	r2, [pc, #192]	; (80026f0 <HAL_DMA_Init+0x1cc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d031      	beq.n	8002698 <HAL_DMA_Init+0x174>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2e      	ldr	r2, [pc, #184]	; (80026f4 <HAL_DMA_Init+0x1d0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02c      	beq.n	8002698 <HAL_DMA_Init+0x174>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <HAL_DMA_Init+0x1d4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d027      	beq.n	8002698 <HAL_DMA_Init+0x174>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_DMA_Init+0x1d8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_Init+0x174>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2a      	ldr	r2, [pc, #168]	; (8002700 <HAL_DMA_Init+0x1dc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01d      	beq.n	8002698 <HAL_DMA_Init+0x174>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a28      	ldr	r2, [pc, #160]	; (8002704 <HAL_DMA_Init+0x1e0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_DMA_Init+0x174>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a27      	ldr	r2, [pc, #156]	; (8002708 <HAL_DMA_Init+0x1e4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_DMA_Init+0x174>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a25      	ldr	r2, [pc, #148]	; (800270c <HAL_DMA_Init+0x1e8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_DMA_Init+0x174>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a24      	ldr	r2, [pc, #144]	; (8002710 <HAL_DMA_Init+0x1ec>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_DMA_Init+0x174>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_DMA_Init+0x1f0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_DMA_Init+0x174>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a21      	ldr	r2, [pc, #132]	; (8002718 <HAL_DMA_Init+0x1f4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d108      	bne.n	80026aa <HAL_DMA_Init+0x186>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e007      	b.n	80026ba <HAL_DMA_Init+0x196>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026ba:	e02f      	b.n	800271c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026bc:	f7ff fb06 	bl	8001ccc <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d928      	bls.n	800271c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2203      	movs	r2, #3
 80026d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e246      	b.n	8002b6a <HAL_DMA_Init+0x646>
 80026dc:	40020010 	.word	0x40020010
 80026e0:	40020028 	.word	0x40020028
 80026e4:	40020040 	.word	0x40020040
 80026e8:	40020058 	.word	0x40020058
 80026ec:	40020070 	.word	0x40020070
 80026f0:	40020088 	.word	0x40020088
 80026f4:	400200a0 	.word	0x400200a0
 80026f8:	400200b8 	.word	0x400200b8
 80026fc:	40020410 	.word	0x40020410
 8002700:	40020428 	.word	0x40020428
 8002704:	40020440 	.word	0x40020440
 8002708:	40020458 	.word	0x40020458
 800270c:	40020470 	.word	0x40020470
 8002710:	40020488 	.word	0x40020488
 8002714:	400204a0 	.word	0x400204a0
 8002718:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1c8      	bne.n	80026bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4b83      	ldr	r3, [pc, #524]	; (8002944 <HAL_DMA_Init+0x420>)
 8002736:	4013      	ands	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002742:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b04      	cmp	r3, #4
 800276e:	d107      	bne.n	8002780 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4313      	orrs	r3, r2
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002780:	4b71      	ldr	r3, [pc, #452]	; (8002948 <HAL_DMA_Init+0x424>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b71      	ldr	r3, [pc, #452]	; (800294c <HAL_DMA_Init+0x428>)
 8002786:	4013      	ands	r3, r2
 8002788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278c:	d328      	bcc.n	80027e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b28      	cmp	r3, #40	; 0x28
 8002794:	d903      	bls.n	800279e <HAL_DMA_Init+0x27a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b2e      	cmp	r3, #46	; 0x2e
 800279c:	d917      	bls.n	80027ce <HAL_DMA_Init+0x2aa>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b3e      	cmp	r3, #62	; 0x3e
 80027a4:	d903      	bls.n	80027ae <HAL_DMA_Init+0x28a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b42      	cmp	r3, #66	; 0x42
 80027ac:	d90f      	bls.n	80027ce <HAL_DMA_Init+0x2aa>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b46      	cmp	r3, #70	; 0x46
 80027b4:	d903      	bls.n	80027be <HAL_DMA_Init+0x29a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b48      	cmp	r3, #72	; 0x48
 80027bc:	d907      	bls.n	80027ce <HAL_DMA_Init+0x2aa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b4e      	cmp	r3, #78	; 0x4e
 80027c4:	d905      	bls.n	80027d2 <HAL_DMA_Init+0x2ae>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b52      	cmp	r3, #82	; 0x52
 80027cc:	d801      	bhi.n	80027d2 <HAL_DMA_Init+0x2ae>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_DMA_Init+0x2b0>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0307 	bic.w	r3, r3, #7
 80027f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	2b04      	cmp	r3, #4
 8002808:	d117      	bne.n	800283a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00e      	beq.n	800283a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f002 fb31 	bl	8004e84 <DMA_CheckFifoParam>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e197      	b.n	8002b6a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f002 fa6c 	bl	8004d20 <DMA_CalcBaseAndBitshift>
 8002848:	4603      	mov	r3, r0
 800284a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	223f      	movs	r2, #63	; 0x3f
 8002856:	409a      	lsls	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	e0cd      	b.n	80029fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3b      	ldr	r2, [pc, #236]	; (8002950 <HAL_DMA_Init+0x42c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <HAL_DMA_Init+0x38a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a39      	ldr	r2, [pc, #228]	; (8002954 <HAL_DMA_Init+0x430>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01d      	beq.n	80028ae <HAL_DMA_Init+0x38a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a38      	ldr	r2, [pc, #224]	; (8002958 <HAL_DMA_Init+0x434>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d018      	beq.n	80028ae <HAL_DMA_Init+0x38a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a36      	ldr	r2, [pc, #216]	; (800295c <HAL_DMA_Init+0x438>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_DMA_Init+0x38a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a35      	ldr	r2, [pc, #212]	; (8002960 <HAL_DMA_Init+0x43c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00e      	beq.n	80028ae <HAL_DMA_Init+0x38a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a33      	ldr	r2, [pc, #204]	; (8002964 <HAL_DMA_Init+0x440>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_DMA_Init+0x38a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a32      	ldr	r2, [pc, #200]	; (8002968 <HAL_DMA_Init+0x444>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_Init+0x38a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a30      	ldr	r2, [pc, #192]	; (800296c <HAL_DMA_Init+0x448>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_DMA_Init+0x38e>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_DMA_Init+0x390>
 80028b2:	2300      	movs	r3, #0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8097 	beq.w	80029e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a24      	ldr	r2, [pc, #144]	; (8002950 <HAL_DMA_Init+0x42c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d021      	beq.n	8002908 <HAL_DMA_Init+0x3e4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a22      	ldr	r2, [pc, #136]	; (8002954 <HAL_DMA_Init+0x430>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01c      	beq.n	8002908 <HAL_DMA_Init+0x3e4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a21      	ldr	r2, [pc, #132]	; (8002958 <HAL_DMA_Init+0x434>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d017      	beq.n	8002908 <HAL_DMA_Init+0x3e4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1f      	ldr	r2, [pc, #124]	; (800295c <HAL_DMA_Init+0x438>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d012      	beq.n	8002908 <HAL_DMA_Init+0x3e4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_DMA_Init+0x43c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00d      	beq.n	8002908 <HAL_DMA_Init+0x3e4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_DMA_Init+0x440>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d008      	beq.n	8002908 <HAL_DMA_Init+0x3e4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_DMA_Init+0x444>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <HAL_DMA_Init+0x3e4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_DMA_Init+0x448>)
 8002906:	4293      	cmp	r3, r2
 8002908:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_DMA_Init+0x44c>)
 8002926:	4013      	ands	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d020      	beq.n	8002974 <HAL_DMA_Init+0x450>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b80      	cmp	r3, #128	; 0x80
 8002938:	d102      	bne.n	8002940 <HAL_DMA_Init+0x41c>
 800293a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800293e:	e01a      	b.n	8002976 <HAL_DMA_Init+0x452>
 8002940:	2300      	movs	r3, #0
 8002942:	e018      	b.n	8002976 <HAL_DMA_Init+0x452>
 8002944:	fe10803f 	.word	0xfe10803f
 8002948:	5c001000 	.word	0x5c001000
 800294c:	ffff0000 	.word	0xffff0000
 8002950:	58025408 	.word	0x58025408
 8002954:	5802541c 	.word	0x5802541c
 8002958:	58025430 	.word	0x58025430
 800295c:	58025444 	.word	0x58025444
 8002960:	58025458 	.word	0x58025458
 8002964:	5802546c 	.word	0x5802546c
 8002968:	58025480 	.word	0x58025480
 800296c:	58025494 	.word	0x58025494
 8002970:	fffe000f 	.word	0xfffe000f
 8002974:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800297c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800298c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800299c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80029a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b6e      	ldr	r3, [pc, #440]	; (8002b74 <HAL_DMA_Init+0x650>)
 80029bc:	4413      	add	r3, r2
 80029be:	4a6e      	ldr	r2, [pc, #440]	; (8002b78 <HAL_DMA_Init+0x654>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	009a      	lsls	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f002 f9a7 	bl	8004d20 <DMA_CalcBaseAndBitshift>
 80029d2:	4603      	mov	r3, r0
 80029d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2201      	movs	r2, #1
 80029e0:	409a      	lsls	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e008      	b.n	80029fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2203      	movs	r2, #3
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0b7      	b.n	8002b6a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5f      	ldr	r2, [pc, #380]	; (8002b7c <HAL_DMA_Init+0x658>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d072      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5d      	ldr	r2, [pc, #372]	; (8002b80 <HAL_DMA_Init+0x65c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d06d      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5c      	ldr	r2, [pc, #368]	; (8002b84 <HAL_DMA_Init+0x660>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d068      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5a      	ldr	r2, [pc, #360]	; (8002b88 <HAL_DMA_Init+0x664>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d063      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a59      	ldr	r2, [pc, #356]	; (8002b8c <HAL_DMA_Init+0x668>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d05e      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a57      	ldr	r2, [pc, #348]	; (8002b90 <HAL_DMA_Init+0x66c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d059      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a56      	ldr	r2, [pc, #344]	; (8002b94 <HAL_DMA_Init+0x670>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d054      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a54      	ldr	r2, [pc, #336]	; (8002b98 <HAL_DMA_Init+0x674>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04f      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a53      	ldr	r2, [pc, #332]	; (8002b9c <HAL_DMA_Init+0x678>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a51      	ldr	r2, [pc, #324]	; (8002ba0 <HAL_DMA_Init+0x67c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a50      	ldr	r2, [pc, #320]	; (8002ba4 <HAL_DMA_Init+0x680>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ba8 <HAL_DMA_Init+0x684>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a4d      	ldr	r2, [pc, #308]	; (8002bac <HAL_DMA_Init+0x688>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_DMA_Init+0x68c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a4a      	ldr	r2, [pc, #296]	; (8002bb4 <HAL_DMA_Init+0x690>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a48      	ldr	r2, [pc, #288]	; (8002bb8 <HAL_DMA_Init+0x694>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a47      	ldr	r2, [pc, #284]	; (8002bbc <HAL_DMA_Init+0x698>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a45      	ldr	r2, [pc, #276]	; (8002bc0 <HAL_DMA_Init+0x69c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a44      	ldr	r2, [pc, #272]	; (8002bc4 <HAL_DMA_Init+0x6a0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a42      	ldr	r2, [pc, #264]	; (8002bc8 <HAL_DMA_Init+0x6a4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a41      	ldr	r2, [pc, #260]	; (8002bcc <HAL_DMA_Init+0x6a8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a3f      	ldr	r2, [pc, #252]	; (8002bd0 <HAL_DMA_Init+0x6ac>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3e      	ldr	r2, [pc, #248]	; (8002bd4 <HAL_DMA_Init+0x6b0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_Init+0x5c6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a3c      	ldr	r2, [pc, #240]	; (8002bd8 <HAL_DMA_Init+0x6b4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_DMA_Init+0x5ca>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_DMA_Init+0x5cc>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d032      	beq.n	8002b5a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f002 fa41 	bl	8004f7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b80      	cmp	r3, #128	; 0x80
 8002b00:	d102      	bne.n	8002b08 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b1c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_DMA_Init+0x624>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d80c      	bhi.n	8002b48 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f002 fabe 	bl	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e008      	b.n	8002b5a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	a7fdabf8 	.word	0xa7fdabf8
 8002b78:	cccccccd 	.word	0xcccccccd
 8002b7c:	40020010 	.word	0x40020010
 8002b80:	40020028 	.word	0x40020028
 8002b84:	40020040 	.word	0x40020040
 8002b88:	40020058 	.word	0x40020058
 8002b8c:	40020070 	.word	0x40020070
 8002b90:	40020088 	.word	0x40020088
 8002b94:	400200a0 	.word	0x400200a0
 8002b98:	400200b8 	.word	0x400200b8
 8002b9c:	40020410 	.word	0x40020410
 8002ba0:	40020428 	.word	0x40020428
 8002ba4:	40020440 	.word	0x40020440
 8002ba8:	40020458 	.word	0x40020458
 8002bac:	40020470 	.word	0x40020470
 8002bb0:	40020488 	.word	0x40020488
 8002bb4:	400204a0 	.word	0x400204a0
 8002bb8:	400204b8 	.word	0x400204b8
 8002bbc:	58025408 	.word	0x58025408
 8002bc0:	5802541c 	.word	0x5802541c
 8002bc4:	58025430 	.word	0x58025430
 8002bc8:	58025444 	.word	0x58025444
 8002bcc:	58025458 	.word	0x58025458
 8002bd0:	5802546c 	.word	0x5802546c
 8002bd4:	58025480 	.word	0x58025480
 8002bd8:	58025494 	.word	0x58025494

08002bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e226      	b.n	8003046 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_DMA_Start_IT+0x2a>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e21f      	b.n	8003046 <HAL_DMA_Start_IT+0x46a>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 820a 	bne.w	8003030 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a68      	ldr	r2, [pc, #416]	; (8002dd0 <HAL_DMA_Start_IT+0x1f4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d04a      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a66      	ldr	r2, [pc, #408]	; (8002dd4 <HAL_DMA_Start_IT+0x1f8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d045      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a65      	ldr	r2, [pc, #404]	; (8002dd8 <HAL_DMA_Start_IT+0x1fc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d040      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a63      	ldr	r2, [pc, #396]	; (8002ddc <HAL_DMA_Start_IT+0x200>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d03b      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a62      	ldr	r2, [pc, #392]	; (8002de0 <HAL_DMA_Start_IT+0x204>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d036      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a60      	ldr	r2, [pc, #384]	; (8002de4 <HAL_DMA_Start_IT+0x208>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5f      	ldr	r2, [pc, #380]	; (8002de8 <HAL_DMA_Start_IT+0x20c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d02c      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_DMA_Start_IT+0x210>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d027      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5c      	ldr	r2, [pc, #368]	; (8002df0 <HAL_DMA_Start_IT+0x214>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5a      	ldr	r2, [pc, #360]	; (8002df4 <HAL_DMA_Start_IT+0x218>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a59      	ldr	r2, [pc, #356]	; (8002df8 <HAL_DMA_Start_IT+0x21c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <HAL_DMA_Start_IT+0x220>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a56      	ldr	r2, [pc, #344]	; (8002e00 <HAL_DMA_Start_IT+0x224>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a54      	ldr	r2, [pc, #336]	; (8002e04 <HAL_DMA_Start_IT+0x228>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a53      	ldr	r2, [pc, #332]	; (8002e08 <HAL_DMA_Start_IT+0x22c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_Start_IT+0xee>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a51      	ldr	r2, [pc, #324]	; (8002e0c <HAL_DMA_Start_IT+0x230>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <HAL_DMA_Start_IT+0x100>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e007      	b.n	8002cec <HAL_DMA_Start_IT+0x110>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f001 fe68 	bl	80049c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <HAL_DMA_Start_IT+0x1f4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d04a      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <HAL_DMA_Start_IT+0x1f8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d045      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a31      	ldr	r2, [pc, #196]	; (8002dd8 <HAL_DMA_Start_IT+0x1fc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d040      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <HAL_DMA_Start_IT+0x200>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d03b      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2e      	ldr	r2, [pc, #184]	; (8002de0 <HAL_DMA_Start_IT+0x204>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d036      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <HAL_DMA_Start_IT+0x208>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d031      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2b      	ldr	r2, [pc, #172]	; (8002de8 <HAL_DMA_Start_IT+0x20c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2a      	ldr	r2, [pc, #168]	; (8002dec <HAL_DMA_Start_IT+0x210>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d027      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a28      	ldr	r2, [pc, #160]	; (8002df0 <HAL_DMA_Start_IT+0x214>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d022      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_DMA_Start_IT+0x218>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01d      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_DMA_Start_IT+0x21c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d018      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <HAL_DMA_Start_IT+0x220>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <HAL_DMA_Start_IT+0x224>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00e      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <HAL_DMA_Start_IT+0x228>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_DMA_Start_IT+0x22c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_Start_IT+0x1bc>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_DMA_Start_IT+0x230>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_DMA_Start_IT+0x1c0>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_DMA_Start_IT+0x1c2>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d036      	beq.n	8002e10 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 021e 	bic.w	r2, r3, #30
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0216 	orr.w	r2, r2, #22
 8002db4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d03e      	beq.n	8002e3c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0208 	orr.w	r2, r2, #8
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e035      	b.n	8002e3c <HAL_DMA_Start_IT+0x260>
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 020e 	bic.w	r2, r3, #14
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 020a 	orr.w	r2, r2, #10
 8002e22:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0204 	orr.w	r2, r2, #4
 8002e3a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a83      	ldr	r2, [pc, #524]	; (8003050 <HAL_DMA_Start_IT+0x474>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d072      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a82      	ldr	r2, [pc, #520]	; (8003054 <HAL_DMA_Start_IT+0x478>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d06d      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a80      	ldr	r2, [pc, #512]	; (8003058 <HAL_DMA_Start_IT+0x47c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d068      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7f      	ldr	r2, [pc, #508]	; (800305c <HAL_DMA_Start_IT+0x480>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d063      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a7d      	ldr	r2, [pc, #500]	; (8003060 <HAL_DMA_Start_IT+0x484>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d05e      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7c      	ldr	r2, [pc, #496]	; (8003064 <HAL_DMA_Start_IT+0x488>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d059      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a7a      	ldr	r2, [pc, #488]	; (8003068 <HAL_DMA_Start_IT+0x48c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d054      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a79      	ldr	r2, [pc, #484]	; (800306c <HAL_DMA_Start_IT+0x490>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d04f      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a77      	ldr	r2, [pc, #476]	; (8003070 <HAL_DMA_Start_IT+0x494>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d04a      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a76      	ldr	r2, [pc, #472]	; (8003074 <HAL_DMA_Start_IT+0x498>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d045      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a74      	ldr	r2, [pc, #464]	; (8003078 <HAL_DMA_Start_IT+0x49c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d040      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a73      	ldr	r2, [pc, #460]	; (800307c <HAL_DMA_Start_IT+0x4a0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d03b      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a71      	ldr	r2, [pc, #452]	; (8003080 <HAL_DMA_Start_IT+0x4a4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d036      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a70      	ldr	r2, [pc, #448]	; (8003084 <HAL_DMA_Start_IT+0x4a8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d031      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a6e      	ldr	r2, [pc, #440]	; (8003088 <HAL_DMA_Start_IT+0x4ac>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d02c      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6d      	ldr	r2, [pc, #436]	; (800308c <HAL_DMA_Start_IT+0x4b0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d027      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6b      	ldr	r2, [pc, #428]	; (8003090 <HAL_DMA_Start_IT+0x4b4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d022      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6a      	ldr	r2, [pc, #424]	; (8003094 <HAL_DMA_Start_IT+0x4b8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d01d      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a68      	ldr	r2, [pc, #416]	; (8003098 <HAL_DMA_Start_IT+0x4bc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d018      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a67      	ldr	r2, [pc, #412]	; (800309c <HAL_DMA_Start_IT+0x4c0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a65      	ldr	r2, [pc, #404]	; (80030a0 <HAL_DMA_Start_IT+0x4c4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00e      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a64      	ldr	r2, [pc, #400]	; (80030a4 <HAL_DMA_Start_IT+0x4c8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a62      	ldr	r2, [pc, #392]	; (80030a8 <HAL_DMA_Start_IT+0x4cc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_DMA_Start_IT+0x350>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a61      	ldr	r2, [pc, #388]	; (80030ac <HAL_DMA_Start_IT+0x4d0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_DMA_Start_IT+0x354>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_DMA_Start_IT+0x356>
 8002f30:	2300      	movs	r3, #0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01a      	beq.n	8002f6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a37      	ldr	r2, [pc, #220]	; (8003050 <HAL_DMA_Start_IT+0x474>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d04a      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a36      	ldr	r2, [pc, #216]	; (8003054 <HAL_DMA_Start_IT+0x478>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d045      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a34      	ldr	r2, [pc, #208]	; (8003058 <HAL_DMA_Start_IT+0x47c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d040      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a33      	ldr	r2, [pc, #204]	; (800305c <HAL_DMA_Start_IT+0x480>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d03b      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a31      	ldr	r2, [pc, #196]	; (8003060 <HAL_DMA_Start_IT+0x484>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d036      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a30      	ldr	r2, [pc, #192]	; (8003064 <HAL_DMA_Start_IT+0x488>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d031      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2e      	ldr	r2, [pc, #184]	; (8003068 <HAL_DMA_Start_IT+0x48c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02c      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2d      	ldr	r2, [pc, #180]	; (800306c <HAL_DMA_Start_IT+0x490>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d027      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <HAL_DMA_Start_IT+0x494>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d022      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <HAL_DMA_Start_IT+0x498>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d01d      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <HAL_DMA_Start_IT+0x49c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d018      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a27      	ldr	r2, [pc, #156]	; (800307c <HAL_DMA_Start_IT+0x4a0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d013      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a25      	ldr	r2, [pc, #148]	; (8003080 <HAL_DMA_Start_IT+0x4a4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00e      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a24      	ldr	r2, [pc, #144]	; (8003084 <HAL_DMA_Start_IT+0x4a8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <HAL_DMA_Start_IT+0x4ac>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_DMA_Start_IT+0x430>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a21      	ldr	r2, [pc, #132]	; (800308c <HAL_DMA_Start_IT+0x4b0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d108      	bne.n	800301e <HAL_DMA_Start_IT+0x442>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e012      	b.n	8003044 <HAL_DMA_Start_IT+0x468>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e009      	b.n	8003044 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800303e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40020010 	.word	0x40020010
 8003054:	40020028 	.word	0x40020028
 8003058:	40020040 	.word	0x40020040
 800305c:	40020058 	.word	0x40020058
 8003060:	40020070 	.word	0x40020070
 8003064:	40020088 	.word	0x40020088
 8003068:	400200a0 	.word	0x400200a0
 800306c:	400200b8 	.word	0x400200b8
 8003070:	40020410 	.word	0x40020410
 8003074:	40020428 	.word	0x40020428
 8003078:	40020440 	.word	0x40020440
 800307c:	40020458 	.word	0x40020458
 8003080:	40020470 	.word	0x40020470
 8003084:	40020488 	.word	0x40020488
 8003088:	400204a0 	.word	0x400204a0
 800308c:	400204b8 	.word	0x400204b8
 8003090:	58025408 	.word	0x58025408
 8003094:	5802541c 	.word	0x5802541c
 8003098:	58025430 	.word	0x58025430
 800309c:	58025444 	.word	0x58025444
 80030a0:	58025458 	.word	0x58025458
 80030a4:	5802546c 	.word	0x5802546c
 80030a8:	58025480 	.word	0x58025480
 80030ac:	58025494 	.word	0x58025494

080030b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80030b8:	f7fe fe08 	bl	8001ccc <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e2dc      	b.n	8003682 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d008      	beq.n	80030e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e2cd      	b.n	8003682 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a76      	ldr	r2, [pc, #472]	; (80032c4 <HAL_DMA_Abort+0x214>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04a      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a74      	ldr	r2, [pc, #464]	; (80032c8 <HAL_DMA_Abort+0x218>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d045      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a73      	ldr	r2, [pc, #460]	; (80032cc <HAL_DMA_Abort+0x21c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d040      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a71      	ldr	r2, [pc, #452]	; (80032d0 <HAL_DMA_Abort+0x220>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d03b      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a70      	ldr	r2, [pc, #448]	; (80032d4 <HAL_DMA_Abort+0x224>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d036      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6e      	ldr	r2, [pc, #440]	; (80032d8 <HAL_DMA_Abort+0x228>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6d      	ldr	r2, [pc, #436]	; (80032dc <HAL_DMA_Abort+0x22c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d02c      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a6b      	ldr	r2, [pc, #428]	; (80032e0 <HAL_DMA_Abort+0x230>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d027      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6a      	ldr	r2, [pc, #424]	; (80032e4 <HAL_DMA_Abort+0x234>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a68      	ldr	r2, [pc, #416]	; (80032e8 <HAL_DMA_Abort+0x238>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01d      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a67      	ldr	r2, [pc, #412]	; (80032ec <HAL_DMA_Abort+0x23c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d018      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a65      	ldr	r2, [pc, #404]	; (80032f0 <HAL_DMA_Abort+0x240>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a64      	ldr	r2, [pc, #400]	; (80032f4 <HAL_DMA_Abort+0x244>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a62      	ldr	r2, [pc, #392]	; (80032f8 <HAL_DMA_Abort+0x248>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a61      	ldr	r2, [pc, #388]	; (80032fc <HAL_DMA_Abort+0x24c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_DMA_Abort+0xd6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5f      	ldr	r2, [pc, #380]	; (8003300 <HAL_DMA_Abort+0x250>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_DMA_Abort+0xda>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_DMA_Abort+0xdc>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 021e 	bic.w	r2, r2, #30
 800319e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e00a      	b.n	80031ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 020e 	bic.w	r2, r2, #14
 80031c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a3c      	ldr	r2, [pc, #240]	; (80032c4 <HAL_DMA_Abort+0x214>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d072      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a3a      	ldr	r2, [pc, #232]	; (80032c8 <HAL_DMA_Abort+0x218>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d06d      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a39      	ldr	r2, [pc, #228]	; (80032cc <HAL_DMA_Abort+0x21c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d068      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <HAL_DMA_Abort+0x220>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d063      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a36      	ldr	r2, [pc, #216]	; (80032d4 <HAL_DMA_Abort+0x224>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d05e      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a34      	ldr	r2, [pc, #208]	; (80032d8 <HAL_DMA_Abort+0x228>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d059      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a33      	ldr	r2, [pc, #204]	; (80032dc <HAL_DMA_Abort+0x22c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d054      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <HAL_DMA_Abort+0x230>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d04f      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <HAL_DMA_Abort+0x234>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d04a      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <HAL_DMA_Abort+0x238>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d045      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a2d      	ldr	r2, [pc, #180]	; (80032ec <HAL_DMA_Abort+0x23c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d040      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <HAL_DMA_Abort+0x240>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d03b      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <HAL_DMA_Abort+0x244>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d036      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <HAL_DMA_Abort+0x248>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d031      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a27      	ldr	r2, [pc, #156]	; (80032fc <HAL_DMA_Abort+0x24c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d02c      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a25      	ldr	r2, [pc, #148]	; (8003300 <HAL_DMA_Abort+0x250>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d027      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a24      	ldr	r2, [pc, #144]	; (8003304 <HAL_DMA_Abort+0x254>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a22      	ldr	r2, [pc, #136]	; (8003308 <HAL_DMA_Abort+0x258>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01d      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_DMA_Abort+0x25c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d018      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_DMA_Abort+0x260>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_DMA_Abort+0x264>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00e      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <HAL_DMA_Abort+0x268>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_DMA_Abort+0x26c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d004      	beq.n	80032be <HAL_DMA_Abort+0x20e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a19      	ldr	r2, [pc, #100]	; (8003320 <HAL_DMA_Abort+0x270>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d132      	bne.n	8003324 <HAL_DMA_Abort+0x274>
 80032be:	2301      	movs	r3, #1
 80032c0:	e031      	b.n	8003326 <HAL_DMA_Abort+0x276>
 80032c2:	bf00      	nop
 80032c4:	40020010 	.word	0x40020010
 80032c8:	40020028 	.word	0x40020028
 80032cc:	40020040 	.word	0x40020040
 80032d0:	40020058 	.word	0x40020058
 80032d4:	40020070 	.word	0x40020070
 80032d8:	40020088 	.word	0x40020088
 80032dc:	400200a0 	.word	0x400200a0
 80032e0:	400200b8 	.word	0x400200b8
 80032e4:	40020410 	.word	0x40020410
 80032e8:	40020428 	.word	0x40020428
 80032ec:	40020440 	.word	0x40020440
 80032f0:	40020458 	.word	0x40020458
 80032f4:	40020470 	.word	0x40020470
 80032f8:	40020488 	.word	0x40020488
 80032fc:	400204a0 	.word	0x400204a0
 8003300:	400204b8 	.word	0x400204b8
 8003304:	58025408 	.word	0x58025408
 8003308:	5802541c 	.word	0x5802541c
 800330c:	58025430 	.word	0x58025430
 8003310:	58025444 	.word	0x58025444
 8003314:	58025458 	.word	0x58025458
 8003318:	5802546c 	.word	0x5802546c
 800331c:	58025480 	.word	0x58025480
 8003320:	58025494 	.word	0x58025494
 8003324:	2300      	movs	r3, #0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003338:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6d      	ldr	r2, [pc, #436]	; (80034f4 <HAL_DMA_Abort+0x444>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d04a      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6b      	ldr	r2, [pc, #428]	; (80034f8 <HAL_DMA_Abort+0x448>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d045      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6a      	ldr	r2, [pc, #424]	; (80034fc <HAL_DMA_Abort+0x44c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d040      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a68      	ldr	r2, [pc, #416]	; (8003500 <HAL_DMA_Abort+0x450>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d03b      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a67      	ldr	r2, [pc, #412]	; (8003504 <HAL_DMA_Abort+0x454>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d036      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a65      	ldr	r2, [pc, #404]	; (8003508 <HAL_DMA_Abort+0x458>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d031      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a64      	ldr	r2, [pc, #400]	; (800350c <HAL_DMA_Abort+0x45c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d02c      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a62      	ldr	r2, [pc, #392]	; (8003510 <HAL_DMA_Abort+0x460>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d027      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a61      	ldr	r2, [pc, #388]	; (8003514 <HAL_DMA_Abort+0x464>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d022      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5f      	ldr	r2, [pc, #380]	; (8003518 <HAL_DMA_Abort+0x468>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01d      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a5e      	ldr	r2, [pc, #376]	; (800351c <HAL_DMA_Abort+0x46c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d018      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a5c      	ldr	r2, [pc, #368]	; (8003520 <HAL_DMA_Abort+0x470>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <HAL_DMA_Abort+0x474>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a59      	ldr	r2, [pc, #356]	; (8003528 <HAL_DMA_Abort+0x478>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a58      	ldr	r2, [pc, #352]	; (800352c <HAL_DMA_Abort+0x47c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_DMA_Abort+0x32a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a56      	ldr	r2, [pc, #344]	; (8003530 <HAL_DMA_Abort+0x480>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d108      	bne.n	80033ec <HAL_DMA_Abort+0x33c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e007      	b.n	80033fc <HAL_DMA_Abort+0x34c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033fc:	e013      	b.n	8003426 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033fe:	f7fe fc65 	bl	8001ccc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b05      	cmp	r3, #5
 800340a:	d90c      	bls.n	8003426 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2203      	movs	r2, #3
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e12d      	b.n	8003682 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e5      	bne.n	80033fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2f      	ldr	r2, [pc, #188]	; (80034f4 <HAL_DMA_Abort+0x444>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d04a      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <HAL_DMA_Abort+0x448>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d045      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <HAL_DMA_Abort+0x44c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d040      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <HAL_DMA_Abort+0x450>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d03b      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a29      	ldr	r2, [pc, #164]	; (8003504 <HAL_DMA_Abort+0x454>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d036      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a27      	ldr	r2, [pc, #156]	; (8003508 <HAL_DMA_Abort+0x458>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d031      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a26      	ldr	r2, [pc, #152]	; (800350c <HAL_DMA_Abort+0x45c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d02c      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a24      	ldr	r2, [pc, #144]	; (8003510 <HAL_DMA_Abort+0x460>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d027      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a23      	ldr	r2, [pc, #140]	; (8003514 <HAL_DMA_Abort+0x464>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d022      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a21      	ldr	r2, [pc, #132]	; (8003518 <HAL_DMA_Abort+0x468>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01d      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a20      	ldr	r2, [pc, #128]	; (800351c <HAL_DMA_Abort+0x46c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d018      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_DMA_Abort+0x470>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_DMA_Abort+0x474>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_DMA_Abort+0x478>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_DMA_Abort+0x47c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_DMA_Abort+0x422>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_DMA_Abort+0x480>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_DMA_Abort+0x426>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_DMA_Abort+0x428>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d02b      	beq.n	8003534 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	223f      	movs	r2, #63	; 0x3f
 80034ec:	409a      	lsls	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	609a      	str	r2, [r3, #8]
 80034f2:	e02a      	b.n	800354a <HAL_DMA_Abort+0x49a>
 80034f4:	40020010 	.word	0x40020010
 80034f8:	40020028 	.word	0x40020028
 80034fc:	40020040 	.word	0x40020040
 8003500:	40020058 	.word	0x40020058
 8003504:	40020070 	.word	0x40020070
 8003508:	40020088 	.word	0x40020088
 800350c:	400200a0 	.word	0x400200a0
 8003510:	400200b8 	.word	0x400200b8
 8003514:	40020410 	.word	0x40020410
 8003518:	40020428 	.word	0x40020428
 800351c:	40020440 	.word	0x40020440
 8003520:	40020458 	.word	0x40020458
 8003524:	40020470 	.word	0x40020470
 8003528:	40020488 	.word	0x40020488
 800352c:	400204a0 	.word	0x400204a0
 8003530:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2201      	movs	r2, #1
 8003544:	409a      	lsls	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a4f      	ldr	r2, [pc, #316]	; (800368c <HAL_DMA_Abort+0x5dc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d072      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a4d      	ldr	r2, [pc, #308]	; (8003690 <HAL_DMA_Abort+0x5e0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d06d      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a4c      	ldr	r2, [pc, #304]	; (8003694 <HAL_DMA_Abort+0x5e4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d068      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a4a      	ldr	r2, [pc, #296]	; (8003698 <HAL_DMA_Abort+0x5e8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d063      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a49      	ldr	r2, [pc, #292]	; (800369c <HAL_DMA_Abort+0x5ec>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d05e      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a47      	ldr	r2, [pc, #284]	; (80036a0 <HAL_DMA_Abort+0x5f0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d059      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a46      	ldr	r2, [pc, #280]	; (80036a4 <HAL_DMA_Abort+0x5f4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d054      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a44      	ldr	r2, [pc, #272]	; (80036a8 <HAL_DMA_Abort+0x5f8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d04f      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a43      	ldr	r2, [pc, #268]	; (80036ac <HAL_DMA_Abort+0x5fc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04a      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a41      	ldr	r2, [pc, #260]	; (80036b0 <HAL_DMA_Abort+0x600>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d045      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a40      	ldr	r2, [pc, #256]	; (80036b4 <HAL_DMA_Abort+0x604>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d040      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a3e      	ldr	r2, [pc, #248]	; (80036b8 <HAL_DMA_Abort+0x608>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d03b      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3d      	ldr	r2, [pc, #244]	; (80036bc <HAL_DMA_Abort+0x60c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d036      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a3b      	ldr	r2, [pc, #236]	; (80036c0 <HAL_DMA_Abort+0x610>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d031      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a3a      	ldr	r2, [pc, #232]	; (80036c4 <HAL_DMA_Abort+0x614>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d02c      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_DMA_Abort+0x618>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d027      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a37      	ldr	r2, [pc, #220]	; (80036cc <HAL_DMA_Abort+0x61c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d022      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a35      	ldr	r2, [pc, #212]	; (80036d0 <HAL_DMA_Abort+0x620>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01d      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a34      	ldr	r2, [pc, #208]	; (80036d4 <HAL_DMA_Abort+0x624>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d018      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a32      	ldr	r2, [pc, #200]	; (80036d8 <HAL_DMA_Abort+0x628>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a31      	ldr	r2, [pc, #196]	; (80036dc <HAL_DMA_Abort+0x62c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2f      	ldr	r2, [pc, #188]	; (80036e0 <HAL_DMA_Abort+0x630>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <HAL_DMA_Abort+0x634>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_DMA_Abort+0x58a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2c      	ldr	r2, [pc, #176]	; (80036e8 <HAL_DMA_Abort+0x638>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_DMA_Abort+0x58e>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_DMA_Abort+0x590>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d015      	beq.n	8003670 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800364c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003664:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800366e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40020010 	.word	0x40020010
 8003690:	40020028 	.word	0x40020028
 8003694:	40020040 	.word	0x40020040
 8003698:	40020058 	.word	0x40020058
 800369c:	40020070 	.word	0x40020070
 80036a0:	40020088 	.word	0x40020088
 80036a4:	400200a0 	.word	0x400200a0
 80036a8:	400200b8 	.word	0x400200b8
 80036ac:	40020410 	.word	0x40020410
 80036b0:	40020428 	.word	0x40020428
 80036b4:	40020440 	.word	0x40020440
 80036b8:	40020458 	.word	0x40020458
 80036bc:	40020470 	.word	0x40020470
 80036c0:	40020488 	.word	0x40020488
 80036c4:	400204a0 	.word	0x400204a0
 80036c8:	400204b8 	.word	0x400204b8
 80036cc:	58025408 	.word	0x58025408
 80036d0:	5802541c 	.word	0x5802541c
 80036d4:	58025430 	.word	0x58025430
 80036d8:	58025444 	.word	0x58025444
 80036dc:	58025458 	.word	0x58025458
 80036e0:	5802546c 	.word	0x5802546c
 80036e4:	58025480 	.word	0x58025480
 80036e8:	58025494 	.word	0x58025494

080036ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e205      	b.n	8003b0a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d004      	beq.n	8003714 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2280      	movs	r2, #128	; 0x80
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e1fa      	b.n	8003b0a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a8c      	ldr	r2, [pc, #560]	; (800394c <HAL_DMA_Abort_IT+0x260>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d04a      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a8b      	ldr	r2, [pc, #556]	; (8003950 <HAL_DMA_Abort_IT+0x264>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d045      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a89      	ldr	r2, [pc, #548]	; (8003954 <HAL_DMA_Abort_IT+0x268>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d040      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a88      	ldr	r2, [pc, #544]	; (8003958 <HAL_DMA_Abort_IT+0x26c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d03b      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a86      	ldr	r2, [pc, #536]	; (800395c <HAL_DMA_Abort_IT+0x270>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d036      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a85      	ldr	r2, [pc, #532]	; (8003960 <HAL_DMA_Abort_IT+0x274>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d031      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a83      	ldr	r2, [pc, #524]	; (8003964 <HAL_DMA_Abort_IT+0x278>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02c      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a82      	ldr	r2, [pc, #520]	; (8003968 <HAL_DMA_Abort_IT+0x27c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d027      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a80      	ldr	r2, [pc, #512]	; (800396c <HAL_DMA_Abort_IT+0x280>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d022      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a7f      	ldr	r2, [pc, #508]	; (8003970 <HAL_DMA_Abort_IT+0x284>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d01d      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7d      	ldr	r2, [pc, #500]	; (8003974 <HAL_DMA_Abort_IT+0x288>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7c      	ldr	r2, [pc, #496]	; (8003978 <HAL_DMA_Abort_IT+0x28c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a7a      	ldr	r2, [pc, #488]	; (800397c <HAL_DMA_Abort_IT+0x290>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a79      	ldr	r2, [pc, #484]	; (8003980 <HAL_DMA_Abort_IT+0x294>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a77      	ldr	r2, [pc, #476]	; (8003984 <HAL_DMA_Abort_IT+0x298>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_DMA_Abort_IT+0xc8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a76      	ldr	r2, [pc, #472]	; (8003988 <HAL_DMA_Abort_IT+0x29c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_DMA_Abort_IT+0xcc>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_DMA_Abort_IT+0xce>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d065      	beq.n	800388a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2204      	movs	r2, #4
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a60      	ldr	r2, [pc, #384]	; (800394c <HAL_DMA_Abort_IT+0x260>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d04a      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a5e      	ldr	r2, [pc, #376]	; (8003950 <HAL_DMA_Abort_IT+0x264>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d045      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5d      	ldr	r2, [pc, #372]	; (8003954 <HAL_DMA_Abort_IT+0x268>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d040      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5b      	ldr	r2, [pc, #364]	; (8003958 <HAL_DMA_Abort_IT+0x26c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d03b      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5a      	ldr	r2, [pc, #360]	; (800395c <HAL_DMA_Abort_IT+0x270>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d036      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a58      	ldr	r2, [pc, #352]	; (8003960 <HAL_DMA_Abort_IT+0x274>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_DMA_Abort_IT+0x278>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d02c      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a55      	ldr	r2, [pc, #340]	; (8003968 <HAL_DMA_Abort_IT+0x27c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d027      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a54      	ldr	r2, [pc, #336]	; (800396c <HAL_DMA_Abort_IT+0x280>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d022      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_DMA_Abort_IT+0x284>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01d      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a51      	ldr	r2, [pc, #324]	; (8003974 <HAL_DMA_Abort_IT+0x288>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a4f      	ldr	r2, [pc, #316]	; (8003978 <HAL_DMA_Abort_IT+0x28c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4e      	ldr	r2, [pc, #312]	; (800397c <HAL_DMA_Abort_IT+0x290>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a4c      	ldr	r2, [pc, #304]	; (8003980 <HAL_DMA_Abort_IT+0x294>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a4b      	ldr	r2, [pc, #300]	; (8003984 <HAL_DMA_Abort_IT+0x298>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_DMA_Abort_IT+0x17a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a49      	ldr	r2, [pc, #292]	; (8003988 <HAL_DMA_Abort_IT+0x29c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <HAL_DMA_Abort_IT+0x18c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e147      	b.n	8003b08 <HAL_DMA_Abort_IT+0x41c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e13e      	b.n	8003b08 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 020e 	bic.w	r2, r2, #14
 8003898:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2b      	ldr	r2, [pc, #172]	; (800394c <HAL_DMA_Abort_IT+0x260>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d04a      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a29      	ldr	r2, [pc, #164]	; (8003950 <HAL_DMA_Abort_IT+0x264>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d045      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a28      	ldr	r2, [pc, #160]	; (8003954 <HAL_DMA_Abort_IT+0x268>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d040      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a26      	ldr	r2, [pc, #152]	; (8003958 <HAL_DMA_Abort_IT+0x26c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d03b      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a25      	ldr	r2, [pc, #148]	; (800395c <HAL_DMA_Abort_IT+0x270>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d036      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a23      	ldr	r2, [pc, #140]	; (8003960 <HAL_DMA_Abort_IT+0x274>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a22      	ldr	r2, [pc, #136]	; (8003964 <HAL_DMA_Abort_IT+0x278>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02c      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a20      	ldr	r2, [pc, #128]	; (8003968 <HAL_DMA_Abort_IT+0x27c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d027      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_DMA_Abort_IT+0x280>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_DMA_Abort_IT+0x284>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01d      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <HAL_DMA_Abort_IT+0x288>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <HAL_DMA_Abort_IT+0x28c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a19      	ldr	r2, [pc, #100]	; (800397c <HAL_DMA_Abort_IT+0x290>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a17      	ldr	r2, [pc, #92]	; (8003980 <HAL_DMA_Abort_IT+0x294>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_DMA_Abort_IT+0x298>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_DMA_Abort_IT+0x24e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <HAL_DMA_Abort_IT+0x29c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d128      	bne.n	800398c <HAL_DMA_Abort_IT+0x2a0>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e027      	b.n	800399c <HAL_DMA_Abort_IT+0x2b0>
 800394c:	40020010 	.word	0x40020010
 8003950:	40020028 	.word	0x40020028
 8003954:	40020040 	.word	0x40020040
 8003958:	40020058 	.word	0x40020058
 800395c:	40020070 	.word	0x40020070
 8003960:	40020088 	.word	0x40020088
 8003964:	400200a0 	.word	0x400200a0
 8003968:	400200b8 	.word	0x400200b8
 800396c:	40020410 	.word	0x40020410
 8003970:	40020428 	.word	0x40020428
 8003974:	40020440 	.word	0x40020440
 8003978:	40020458 	.word	0x40020458
 800397c:	40020470 	.word	0x40020470
 8003980:	40020488 	.word	0x40020488
 8003984:	400204a0 	.word	0x400204a0
 8003988:	400204b8 	.word	0x400204b8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5c      	ldr	r2, [pc, #368]	; (8003b14 <HAL_DMA_Abort_IT+0x428>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d072      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a5b      	ldr	r2, [pc, #364]	; (8003b18 <HAL_DMA_Abort_IT+0x42c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d06d      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a59      	ldr	r2, [pc, #356]	; (8003b1c <HAL_DMA_Abort_IT+0x430>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d068      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <HAL_DMA_Abort_IT+0x434>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d063      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a56      	ldr	r2, [pc, #344]	; (8003b24 <HAL_DMA_Abort_IT+0x438>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d05e      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a55      	ldr	r2, [pc, #340]	; (8003b28 <HAL_DMA_Abort_IT+0x43c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d059      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a53      	ldr	r2, [pc, #332]	; (8003b2c <HAL_DMA_Abort_IT+0x440>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d054      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a52      	ldr	r2, [pc, #328]	; (8003b30 <HAL_DMA_Abort_IT+0x444>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d04f      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a50      	ldr	r2, [pc, #320]	; (8003b34 <HAL_DMA_Abort_IT+0x448>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d04a      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4f      	ldr	r2, [pc, #316]	; (8003b38 <HAL_DMA_Abort_IT+0x44c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d045      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a4d      	ldr	r2, [pc, #308]	; (8003b3c <HAL_DMA_Abort_IT+0x450>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d040      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a4c      	ldr	r2, [pc, #304]	; (8003b40 <HAL_DMA_Abort_IT+0x454>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d03b      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a4a      	ldr	r2, [pc, #296]	; (8003b44 <HAL_DMA_Abort_IT+0x458>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d036      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a49      	ldr	r2, [pc, #292]	; (8003b48 <HAL_DMA_Abort_IT+0x45c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d031      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a47      	ldr	r2, [pc, #284]	; (8003b4c <HAL_DMA_Abort_IT+0x460>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d02c      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a46      	ldr	r2, [pc, #280]	; (8003b50 <HAL_DMA_Abort_IT+0x464>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d027      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a44      	ldr	r2, [pc, #272]	; (8003b54 <HAL_DMA_Abort_IT+0x468>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d022      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a43      	ldr	r2, [pc, #268]	; (8003b58 <HAL_DMA_Abort_IT+0x46c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d01d      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a41      	ldr	r2, [pc, #260]	; (8003b5c <HAL_DMA_Abort_IT+0x470>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d018      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <HAL_DMA_Abort_IT+0x474>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3e      	ldr	r2, [pc, #248]	; (8003b64 <HAL_DMA_Abort_IT+0x478>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00e      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3d      	ldr	r2, [pc, #244]	; (8003b68 <HAL_DMA_Abort_IT+0x47c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d009      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <HAL_DMA_Abort_IT+0x480>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x3a0>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a3a      	ldr	r2, [pc, #232]	; (8003b70 <HAL_DMA_Abort_IT+0x484>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_DMA_Abort_IT+0x3a4>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_DMA_Abort_IT+0x3a6>
 8003a90:	2300      	movs	r3, #0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d028      	beq.n	8003ae8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ac4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00c      	beq.n	8003ae8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003adc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ae6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40020010 	.word	0x40020010
 8003b18:	40020028 	.word	0x40020028
 8003b1c:	40020040 	.word	0x40020040
 8003b20:	40020058 	.word	0x40020058
 8003b24:	40020070 	.word	0x40020070
 8003b28:	40020088 	.word	0x40020088
 8003b2c:	400200a0 	.word	0x400200a0
 8003b30:	400200b8 	.word	0x400200b8
 8003b34:	40020410 	.word	0x40020410
 8003b38:	40020428 	.word	0x40020428
 8003b3c:	40020440 	.word	0x40020440
 8003b40:	40020458 	.word	0x40020458
 8003b44:	40020470 	.word	0x40020470
 8003b48:	40020488 	.word	0x40020488
 8003b4c:	400204a0 	.word	0x400204a0
 8003b50:	400204b8 	.word	0x400204b8
 8003b54:	58025408 	.word	0x58025408
 8003b58:	5802541c 	.word	0x5802541c
 8003b5c:	58025430 	.word	0x58025430
 8003b60:	58025444 	.word	0x58025444
 8003b64:	58025458 	.word	0x58025458
 8003b68:	5802546c 	.word	0x5802546c
 8003b6c:	58025480 	.word	0x58025480
 8003b70:	58025494 	.word	0x58025494

08003b74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	; 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b80:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <HAL_DMA_IRQHandler+0x1ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a67      	ldr	r2, [pc, #412]	; (8003d24 <HAL_DMA_IRQHandler+0x1b0>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0a9b      	lsrs	r3, r3, #10
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5f      	ldr	r2, [pc, #380]	; (8003d28 <HAL_DMA_IRQHandler+0x1b4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d04a      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5d      	ldr	r2, [pc, #372]	; (8003d2c <HAL_DMA_IRQHandler+0x1b8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d045      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5c      	ldr	r2, [pc, #368]	; (8003d30 <HAL_DMA_IRQHandler+0x1bc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d040      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5a      	ldr	r2, [pc, #360]	; (8003d34 <HAL_DMA_IRQHandler+0x1c0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d03b      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a59      	ldr	r2, [pc, #356]	; (8003d38 <HAL_DMA_IRQHandler+0x1c4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d036      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a57      	ldr	r2, [pc, #348]	; (8003d3c <HAL_DMA_IRQHandler+0x1c8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a56      	ldr	r2, [pc, #344]	; (8003d40 <HAL_DMA_IRQHandler+0x1cc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d02c      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a54      	ldr	r2, [pc, #336]	; (8003d44 <HAL_DMA_IRQHandler+0x1d0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d027      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a53      	ldr	r2, [pc, #332]	; (8003d48 <HAL_DMA_IRQHandler+0x1d4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d022      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <HAL_DMA_IRQHandler+0x1d8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01d      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a50      	ldr	r2, [pc, #320]	; (8003d50 <HAL_DMA_IRQHandler+0x1dc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d018      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a4e      	ldr	r2, [pc, #312]	; (8003d54 <HAL_DMA_IRQHandler+0x1e0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a4d      	ldr	r2, [pc, #308]	; (8003d58 <HAL_DMA_IRQHandler+0x1e4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <HAL_DMA_IRQHandler+0x1e8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a4a      	ldr	r2, [pc, #296]	; (8003d60 <HAL_DMA_IRQHandler+0x1ec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a48      	ldr	r2, [pc, #288]	; (8003d64 <HAL_DMA_IRQHandler+0x1f0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_DMA_IRQHandler+0xd6>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_DMA_IRQHandler+0xd8>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 842b 	beq.w	80044a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80a2 	beq.w	8003dac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2e      	ldr	r2, [pc, #184]	; (8003d28 <HAL_DMA_IRQHandler+0x1b4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d04a      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2d      	ldr	r2, [pc, #180]	; (8003d2c <HAL_DMA_IRQHandler+0x1b8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d045      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <HAL_DMA_IRQHandler+0x1bc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d040      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2a      	ldr	r2, [pc, #168]	; (8003d34 <HAL_DMA_IRQHandler+0x1c0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d03b      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a28      	ldr	r2, [pc, #160]	; (8003d38 <HAL_DMA_IRQHandler+0x1c4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d036      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <HAL_DMA_IRQHandler+0x1c8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d031      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a25      	ldr	r2, [pc, #148]	; (8003d40 <HAL_DMA_IRQHandler+0x1cc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d02c      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a24      	ldr	r2, [pc, #144]	; (8003d44 <HAL_DMA_IRQHandler+0x1d0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d027      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_DMA_IRQHandler+0x1d4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d022      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a21      	ldr	r2, [pc, #132]	; (8003d4c <HAL_DMA_IRQHandler+0x1d8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d01d      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <HAL_DMA_IRQHandler+0x1dc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d018      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_DMA_IRQHandler+0x1e0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1c      	ldr	r2, [pc, #112]	; (8003d58 <HAL_DMA_IRQHandler+0x1e4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00e      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_DMA_IRQHandler+0x1e8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a19      	ldr	r2, [pc, #100]	; (8003d60 <HAL_DMA_IRQHandler+0x1ec>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_DMA_IRQHandler+0x1f0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d12f      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x1f4>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e02e      	b.n	8003d7c <HAL_DMA_IRQHandler+0x208>
 8003d1e:	bf00      	nop
 8003d20:	24000000 	.word	0x24000000
 8003d24:	1b4e81b5 	.word	0x1b4e81b5
 8003d28:	40020010 	.word	0x40020010
 8003d2c:	40020028 	.word	0x40020028
 8003d30:	40020040 	.word	0x40020040
 8003d34:	40020058 	.word	0x40020058
 8003d38:	40020070 	.word	0x40020070
 8003d3c:	40020088 	.word	0x40020088
 8003d40:	400200a0 	.word	0x400200a0
 8003d44:	400200b8 	.word	0x400200b8
 8003d48:	40020410 	.word	0x40020410
 8003d4c:	40020428 	.word	0x40020428
 8003d50:	40020440 	.word	0x40020440
 8003d54:	40020458 	.word	0x40020458
 8003d58:	40020470 	.word	0x40020470
 8003d5c:	40020488 	.word	0x40020488
 8003d60:	400204a0 	.word	0x400204a0
 8003d64:	400204b8 	.word	0x400204b8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d015      	beq.n	8003dac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0204 	bic.w	r2, r2, #4
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2208      	movs	r2, #8
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d06e      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a69      	ldr	r2, [pc, #420]	; (8003f6c <HAL_DMA_IRQHandler+0x3f8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04a      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a67      	ldr	r2, [pc, #412]	; (8003f70 <HAL_DMA_IRQHandler+0x3fc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d045      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a66      	ldr	r2, [pc, #408]	; (8003f74 <HAL_DMA_IRQHandler+0x400>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d040      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a64      	ldr	r2, [pc, #400]	; (8003f78 <HAL_DMA_IRQHandler+0x404>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d03b      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a63      	ldr	r2, [pc, #396]	; (8003f7c <HAL_DMA_IRQHandler+0x408>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a61      	ldr	r2, [pc, #388]	; (8003f80 <HAL_DMA_IRQHandler+0x40c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d031      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a60      	ldr	r2, [pc, #384]	; (8003f84 <HAL_DMA_IRQHandler+0x410>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d02c      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a5e      	ldr	r2, [pc, #376]	; (8003f88 <HAL_DMA_IRQHandler+0x414>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d027      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a5d      	ldr	r2, [pc, #372]	; (8003f8c <HAL_DMA_IRQHandler+0x418>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a5b      	ldr	r2, [pc, #364]	; (8003f90 <HAL_DMA_IRQHandler+0x41c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a5a      	ldr	r2, [pc, #360]	; (8003f94 <HAL_DMA_IRQHandler+0x420>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a58      	ldr	r2, [pc, #352]	; (8003f98 <HAL_DMA_IRQHandler+0x424>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a57      	ldr	r2, [pc, #348]	; (8003f9c <HAL_DMA_IRQHandler+0x428>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a55      	ldr	r2, [pc, #340]	; (8003fa0 <HAL_DMA_IRQHandler+0x42c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a54      	ldr	r2, [pc, #336]	; (8003fa4 <HAL_DMA_IRQHandler+0x430>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a52      	ldr	r2, [pc, #328]	; (8003fa8 <HAL_DMA_IRQHandler+0x434>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10a      	bne.n	8003e78 <HAL_DMA_IRQHandler+0x304>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e003      	b.n	8003e80 <HAL_DMA_IRQHandler+0x30c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00d      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	f043 0202 	orr.w	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 808f 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <HAL_DMA_IRQHandler+0x3f8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d04a      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a2a      	ldr	r2, [pc, #168]	; (8003f70 <HAL_DMA_IRQHandler+0x3fc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d045      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_DMA_IRQHandler+0x400>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d040      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <HAL_DMA_IRQHandler+0x404>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d03b      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <HAL_DMA_IRQHandler+0x408>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d036      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a24      	ldr	r2, [pc, #144]	; (8003f80 <HAL_DMA_IRQHandler+0x40c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d031      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <HAL_DMA_IRQHandler+0x410>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d02c      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_DMA_IRQHandler+0x414>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d027      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <HAL_DMA_IRQHandler+0x418>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d022      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <HAL_DMA_IRQHandler+0x41c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01d      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <HAL_DMA_IRQHandler+0x420>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d018      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_DMA_IRQHandler+0x424>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_DMA_IRQHandler+0x428>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_DMA_IRQHandler+0x42c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_DMA_IRQHandler+0x430>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <HAL_DMA_IRQHandler+0x434>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d12a      	bne.n	8003fac <HAL_DMA_IRQHandler+0x438>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e023      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x440>
 8003f6c:	40020010 	.word	0x40020010
 8003f70:	40020028 	.word	0x40020028
 8003f74:	40020040 	.word	0x40020040
 8003f78:	40020058 	.word	0x40020058
 8003f7c:	40020070 	.word	0x40020070
 8003f80:	40020088 	.word	0x40020088
 8003f84:	400200a0 	.word	0x400200a0
 8003f88:	400200b8 	.word	0x400200b8
 8003f8c:	40020410 	.word	0x40020410
 8003f90:	40020428 	.word	0x40020428
 8003f94:	40020440 	.word	0x40020440
 8003f98:	40020458 	.word	0x40020458
 8003f9c:	40020470 	.word	0x40020470
 8003fa0:	40020488 	.word	0x40020488
 8003fa4:	400204a0 	.word	0x400204a0
 8003fa8:	400204b8 	.word	0x400204b8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fcc:	f043 0204 	orr.w	r2, r3, #4
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2210      	movs	r2, #16
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a6 	beq.w	8004136 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a85      	ldr	r2, [pc, #532]	; (8004204 <HAL_DMA_IRQHandler+0x690>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d04a      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a83      	ldr	r2, [pc, #524]	; (8004208 <HAL_DMA_IRQHandler+0x694>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d045      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a82      	ldr	r2, [pc, #520]	; (800420c <HAL_DMA_IRQHandler+0x698>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d040      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a80      	ldr	r2, [pc, #512]	; (8004210 <HAL_DMA_IRQHandler+0x69c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d03b      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a7f      	ldr	r2, [pc, #508]	; (8004214 <HAL_DMA_IRQHandler+0x6a0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d036      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a7d      	ldr	r2, [pc, #500]	; (8004218 <HAL_DMA_IRQHandler+0x6a4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d031      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a7c      	ldr	r2, [pc, #496]	; (800421c <HAL_DMA_IRQHandler+0x6a8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d02c      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a7a      	ldr	r2, [pc, #488]	; (8004220 <HAL_DMA_IRQHandler+0x6ac>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d027      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a79      	ldr	r2, [pc, #484]	; (8004224 <HAL_DMA_IRQHandler+0x6b0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d022      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a77      	ldr	r2, [pc, #476]	; (8004228 <HAL_DMA_IRQHandler+0x6b4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01d      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a76      	ldr	r2, [pc, #472]	; (800422c <HAL_DMA_IRQHandler+0x6b8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d018      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a74      	ldr	r2, [pc, #464]	; (8004230 <HAL_DMA_IRQHandler+0x6bc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a73      	ldr	r2, [pc, #460]	; (8004234 <HAL_DMA_IRQHandler+0x6c0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a71      	ldr	r2, [pc, #452]	; (8004238 <HAL_DMA_IRQHandler+0x6c4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a70      	ldr	r2, [pc, #448]	; (800423c <HAL_DMA_IRQHandler+0x6c8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6e      	ldr	r2, [pc, #440]	; (8004240 <HAL_DMA_IRQHandler+0x6cc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10a      	bne.n	80040a0 <HAL_DMA_IRQHandler+0x52c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e009      	b.n	80040b4 <HAL_DMA_IRQHandler+0x540>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bf14      	ite	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	2300      	moveq	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d03e      	beq.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2210      	movs	r2, #16
 80040c2:	409a      	lsls	r2, r3
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d018      	beq.n	8004108 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d108      	bne.n	80040f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d024      	beq.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
 80040f4:	e01f      	b.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01b      	beq.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
 8004106:	e016      	b.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d107      	bne.n	8004126 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2220      	movs	r2, #32
 8004140:	409a      	lsls	r2, r3
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8110 	beq.w	800436c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <HAL_DMA_IRQHandler+0x690>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d04a      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <HAL_DMA_IRQHandler+0x694>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d045      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a29      	ldr	r2, [pc, #164]	; (800420c <HAL_DMA_IRQHandler+0x698>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d040      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a28      	ldr	r2, [pc, #160]	; (8004210 <HAL_DMA_IRQHandler+0x69c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d03b      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <HAL_DMA_IRQHandler+0x6a0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d036      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a25      	ldr	r2, [pc, #148]	; (8004218 <HAL_DMA_IRQHandler+0x6a4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d031      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a23      	ldr	r2, [pc, #140]	; (800421c <HAL_DMA_IRQHandler+0x6a8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d02c      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a22      	ldr	r2, [pc, #136]	; (8004220 <HAL_DMA_IRQHandler+0x6ac>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d027      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <HAL_DMA_IRQHandler+0x6b0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d022      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_DMA_IRQHandler+0x6b4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d01d      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1d      	ldr	r2, [pc, #116]	; (800422c <HAL_DMA_IRQHandler+0x6b8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d018      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <HAL_DMA_IRQHandler+0x6bc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <HAL_DMA_IRQHandler+0x6c0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a19      	ldr	r2, [pc, #100]	; (8004238 <HAL_DMA_IRQHandler+0x6c4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <HAL_DMA_IRQHandler+0x6c8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a16      	ldr	r2, [pc, #88]	; (8004240 <HAL_DMA_IRQHandler+0x6cc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d12b      	bne.n	8004244 <HAL_DMA_IRQHandler+0x6d0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e02a      	b.n	8004258 <HAL_DMA_IRQHandler+0x6e4>
 8004202:	bf00      	nop
 8004204:	40020010 	.word	0x40020010
 8004208:	40020028 	.word	0x40020028
 800420c:	40020040 	.word	0x40020040
 8004210:	40020058 	.word	0x40020058
 8004214:	40020070 	.word	0x40020070
 8004218:	40020088 	.word	0x40020088
 800421c:	400200a0 	.word	0x400200a0
 8004220:	400200b8 	.word	0x400200b8
 8004224:	40020410 	.word	0x40020410
 8004228:	40020428 	.word	0x40020428
 800422c:	40020440 	.word	0x40020440
 8004230:	40020458 	.word	0x40020458
 8004234:	40020470 	.word	0x40020470
 8004238:	40020488 	.word	0x40020488
 800423c:	400204a0 	.word	0x400204a0
 8004240:	400204b8 	.word	0x400204b8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8087 	beq.w	800436c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2220      	movs	r2, #32
 8004268:	409a      	lsls	r2, r3
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b04      	cmp	r3, #4
 8004278:	d139      	bne.n	80042ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0216 	bic.w	r2, r2, #22
 8004288:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004298:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <HAL_DMA_IRQHandler+0x736>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0208 	bic.w	r2, r2, #8
 80042b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	223f      	movs	r2, #63	; 0x3f
 80042c4:	409a      	lsls	r2, r3
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 834a 	beq.w	8004978 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
          }
          return;
 80042ec:	e344      	b.n	8004978 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d018      	beq.n	800432e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d108      	bne.n	800431c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	2b00      	cmp	r3, #0
 8004310:	d02c      	beq.n	800436c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
 800431a:	e027      	b.n	800436c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d023      	beq.n	800436c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
 800432c:	e01e      	b.n	800436c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10f      	bne.n	800435c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0210 	bic.w	r2, r2, #16
 800434a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8306 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8088 	beq.w	8004494 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2204      	movs	r2, #4
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7a      	ldr	r2, [pc, #488]	; (800457c <HAL_DMA_IRQHandler+0xa08>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d04a      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a79      	ldr	r2, [pc, #484]	; (8004580 <HAL_DMA_IRQHandler+0xa0c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d045      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a77      	ldr	r2, [pc, #476]	; (8004584 <HAL_DMA_IRQHandler+0xa10>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d040      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a76      	ldr	r2, [pc, #472]	; (8004588 <HAL_DMA_IRQHandler+0xa14>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d03b      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a74      	ldr	r2, [pc, #464]	; (800458c <HAL_DMA_IRQHandler+0xa18>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d036      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a73      	ldr	r2, [pc, #460]	; (8004590 <HAL_DMA_IRQHandler+0xa1c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d031      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a71      	ldr	r2, [pc, #452]	; (8004594 <HAL_DMA_IRQHandler+0xa20>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d02c      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a70      	ldr	r2, [pc, #448]	; (8004598 <HAL_DMA_IRQHandler+0xa24>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d027      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6e      	ldr	r2, [pc, #440]	; (800459c <HAL_DMA_IRQHandler+0xa28>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6d      	ldr	r2, [pc, #436]	; (80045a0 <HAL_DMA_IRQHandler+0xa2c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01d      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6b      	ldr	r2, [pc, #428]	; (80045a4 <HAL_DMA_IRQHandler+0xa30>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d018      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6a      	ldr	r2, [pc, #424]	; (80045a8 <HAL_DMA_IRQHandler+0xa34>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a68      	ldr	r2, [pc, #416]	; (80045ac <HAL_DMA_IRQHandler+0xa38>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a67      	ldr	r2, [pc, #412]	; (80045b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a65      	ldr	r2, [pc, #404]	; (80045b4 <HAL_DMA_IRQHandler+0xa40>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a64      	ldr	r2, [pc, #400]	; (80045b8 <HAL_DMA_IRQHandler+0xa44>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <HAL_DMA_IRQHandler+0x8ca>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e007      	b.n	800444e <HAL_DMA_IRQHandler+0x8da>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	429a      	cmp	r2, r3
 8004458:	d307      	bcc.n	800446a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f2      	bne.n	800444e <HAL_DMA_IRQHandler+0x8da>
 8004468:	e000      	b.n	800446c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800446a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2203      	movs	r2, #3
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800448a:	e003      	b.n	8004494 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8272 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
 80044a6:	e26c      	b.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a43      	ldr	r2, [pc, #268]	; (80045bc <HAL_DMA_IRQHandler+0xa48>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d022      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a42      	ldr	r2, [pc, #264]	; (80045c0 <HAL_DMA_IRQHandler+0xa4c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d01d      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <HAL_DMA_IRQHandler+0xa50>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d018      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a3f      	ldr	r2, [pc, #252]	; (80045c8 <HAL_DMA_IRQHandler+0xa54>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3d      	ldr	r2, [pc, #244]	; (80045cc <HAL_DMA_IRQHandler+0xa58>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00e      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3c      	ldr	r2, [pc, #240]	; (80045d0 <HAL_DMA_IRQHandler+0xa5c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <HAL_DMA_IRQHandler+0xa60>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a39      	ldr	r2, [pc, #228]	; (80045d8 <HAL_DMA_IRQHandler+0xa64>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_DMA_IRQHandler+0x988>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_DMA_IRQHandler+0x98a>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 823f 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2204      	movs	r2, #4
 8004516:	409a      	lsls	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80cd 	beq.w	80046bc <HAL_DMA_IRQHandler+0xb48>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80c7 	beq.w	80046bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2204      	movs	r2, #4
 8004538:	409a      	lsls	r2, r3
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d049      	beq.n	80045dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8210 	beq.w	800497c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004564:	e20a      	b.n	800497c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8206 	beq.w	800497c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004578:	e200      	b.n	800497c <HAL_DMA_IRQHandler+0xe08>
 800457a:	bf00      	nop
 800457c:	40020010 	.word	0x40020010
 8004580:	40020028 	.word	0x40020028
 8004584:	40020040 	.word	0x40020040
 8004588:	40020058 	.word	0x40020058
 800458c:	40020070 	.word	0x40020070
 8004590:	40020088 	.word	0x40020088
 8004594:	400200a0 	.word	0x400200a0
 8004598:	400200b8 	.word	0x400200b8
 800459c:	40020410 	.word	0x40020410
 80045a0:	40020428 	.word	0x40020428
 80045a4:	40020440 	.word	0x40020440
 80045a8:	40020458 	.word	0x40020458
 80045ac:	40020470 	.word	0x40020470
 80045b0:	40020488 	.word	0x40020488
 80045b4:	400204a0 	.word	0x400204a0
 80045b8:	400204b8 	.word	0x400204b8
 80045bc:	58025408 	.word	0x58025408
 80045c0:	5802541c 	.word	0x5802541c
 80045c4:	58025430 	.word	0x58025430
 80045c8:	58025444 	.word	0x58025444
 80045cc:	58025458 	.word	0x58025458
 80045d0:	5802546c 	.word	0x5802546c
 80045d4:	58025480 	.word	0x58025480
 80045d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d160      	bne.n	80046a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a8c      	ldr	r2, [pc, #560]	; (800481c <HAL_DMA_IRQHandler+0xca8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d04a      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a8a      	ldr	r2, [pc, #552]	; (8004820 <HAL_DMA_IRQHandler+0xcac>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d045      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a89      	ldr	r2, [pc, #548]	; (8004824 <HAL_DMA_IRQHandler+0xcb0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d040      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a87      	ldr	r2, [pc, #540]	; (8004828 <HAL_DMA_IRQHandler+0xcb4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d03b      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a86      	ldr	r2, [pc, #536]	; (800482c <HAL_DMA_IRQHandler+0xcb8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d036      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a84      	ldr	r2, [pc, #528]	; (8004830 <HAL_DMA_IRQHandler+0xcbc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d031      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a83      	ldr	r2, [pc, #524]	; (8004834 <HAL_DMA_IRQHandler+0xcc0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d02c      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a81      	ldr	r2, [pc, #516]	; (8004838 <HAL_DMA_IRQHandler+0xcc4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d027      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a80      	ldr	r2, [pc, #512]	; (800483c <HAL_DMA_IRQHandler+0xcc8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a7e      	ldr	r2, [pc, #504]	; (8004840 <HAL_DMA_IRQHandler+0xccc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01d      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7d      	ldr	r2, [pc, #500]	; (8004844 <HAL_DMA_IRQHandler+0xcd0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d018      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7b      	ldr	r2, [pc, #492]	; (8004848 <HAL_DMA_IRQHandler+0xcd4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a7a      	ldr	r2, [pc, #488]	; (800484c <HAL_DMA_IRQHandler+0xcd8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a78      	ldr	r2, [pc, #480]	; (8004850 <HAL_DMA_IRQHandler+0xcdc>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a77      	ldr	r2, [pc, #476]	; (8004854 <HAL_DMA_IRQHandler+0xce0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a75      	ldr	r2, [pc, #468]	; (8004858 <HAL_DMA_IRQHandler+0xce4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <HAL_DMA_IRQHandler+0xb24>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0208 	bic.w	r2, r2, #8
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e007      	b.n	80046a8 <HAL_DMA_IRQHandler+0xb34>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0204 	bic.w	r2, r2, #4
 80046a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8165 	beq.w	800497c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ba:	e15f      	b.n	800497c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2202      	movs	r2, #2
 80046c6:	409a      	lsls	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80c5 	beq.w	800485c <HAL_DMA_IRQHandler+0xce8>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80bf 	beq.w	800485c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	2202      	movs	r2, #2
 80046e8:	409a      	lsls	r2, r3
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d018      	beq.n	800472a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 813a 	beq.w	8004980 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004714:	e134      	b.n	8004980 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8130 	beq.w	8004980 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004728:	e12a      	b.n	8004980 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d168      	bne.n	8004806 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a38      	ldr	r2, [pc, #224]	; (800481c <HAL_DMA_IRQHandler+0xca8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d04a      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a37      	ldr	r2, [pc, #220]	; (8004820 <HAL_DMA_IRQHandler+0xcac>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d045      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a35      	ldr	r2, [pc, #212]	; (8004824 <HAL_DMA_IRQHandler+0xcb0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d040      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a34      	ldr	r2, [pc, #208]	; (8004828 <HAL_DMA_IRQHandler+0xcb4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d03b      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a32      	ldr	r2, [pc, #200]	; (800482c <HAL_DMA_IRQHandler+0xcb8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d036      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a31      	ldr	r2, [pc, #196]	; (8004830 <HAL_DMA_IRQHandler+0xcbc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d031      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2f      	ldr	r2, [pc, #188]	; (8004834 <HAL_DMA_IRQHandler+0xcc0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d02c      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2e      	ldr	r2, [pc, #184]	; (8004838 <HAL_DMA_IRQHandler+0xcc4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d027      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2c      	ldr	r2, [pc, #176]	; (800483c <HAL_DMA_IRQHandler+0xcc8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d022      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2b      	ldr	r2, [pc, #172]	; (8004840 <HAL_DMA_IRQHandler+0xccc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d01d      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a29      	ldr	r2, [pc, #164]	; (8004844 <HAL_DMA_IRQHandler+0xcd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d018      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a28      	ldr	r2, [pc, #160]	; (8004848 <HAL_DMA_IRQHandler+0xcd4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a26      	ldr	r2, [pc, #152]	; (800484c <HAL_DMA_IRQHandler+0xcd8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a25      	ldr	r2, [pc, #148]	; (8004850 <HAL_DMA_IRQHandler+0xcdc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a23      	ldr	r2, [pc, #140]	; (8004854 <HAL_DMA_IRQHandler+0xce0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xc60>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a22      	ldr	r2, [pc, #136]	; (8004858 <HAL_DMA_IRQHandler+0xce4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d108      	bne.n	80047e6 <HAL_DMA_IRQHandler+0xc72>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0214 	bic.w	r2, r2, #20
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e007      	b.n	80047f6 <HAL_DMA_IRQHandler+0xc82>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 020a 	bic.w	r2, r2, #10
 80047f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80b8 	beq.w	8004980 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004818:	e0b2      	b.n	8004980 <HAL_DMA_IRQHandler+0xe0c>
 800481a:	bf00      	nop
 800481c:	40020010 	.word	0x40020010
 8004820:	40020028 	.word	0x40020028
 8004824:	40020040 	.word	0x40020040
 8004828:	40020058 	.word	0x40020058
 800482c:	40020070 	.word	0x40020070
 8004830:	40020088 	.word	0x40020088
 8004834:	400200a0 	.word	0x400200a0
 8004838:	400200b8 	.word	0x400200b8
 800483c:	40020410 	.word	0x40020410
 8004840:	40020428 	.word	0x40020428
 8004844:	40020440 	.word	0x40020440
 8004848:	40020458 	.word	0x40020458
 800484c:	40020470 	.word	0x40020470
 8004850:	40020488 	.word	0x40020488
 8004854:	400204a0 	.word	0x400204a0
 8004858:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2208      	movs	r2, #8
 8004866:	409a      	lsls	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8088 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8082 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a41      	ldr	r2, [pc, #260]	; (8004988 <HAL_DMA_IRQHandler+0xe14>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d04a      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3f      	ldr	r2, [pc, #252]	; (800498c <HAL_DMA_IRQHandler+0xe18>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d045      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3e      	ldr	r2, [pc, #248]	; (8004990 <HAL_DMA_IRQHandler+0xe1c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d040      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a3c      	ldr	r2, [pc, #240]	; (8004994 <HAL_DMA_IRQHandler+0xe20>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d03b      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <HAL_DMA_IRQHandler+0xe24>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d036      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a39      	ldr	r2, [pc, #228]	; (800499c <HAL_DMA_IRQHandler+0xe28>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d031      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <HAL_DMA_IRQHandler+0xe2c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d02c      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a36      	ldr	r2, [pc, #216]	; (80049a4 <HAL_DMA_IRQHandler+0xe30>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d027      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a35      	ldr	r2, [pc, #212]	; (80049a8 <HAL_DMA_IRQHandler+0xe34>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d022      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a33      	ldr	r2, [pc, #204]	; (80049ac <HAL_DMA_IRQHandler+0xe38>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01d      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <HAL_DMA_IRQHandler+0xe3c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d018      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a30      	ldr	r2, [pc, #192]	; (80049b4 <HAL_DMA_IRQHandler+0xe40>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2f      	ldr	r2, [pc, #188]	; (80049b8 <HAL_DMA_IRQHandler+0xe44>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <HAL_DMA_IRQHandler+0xe48>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <HAL_DMA_IRQHandler+0xe4c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <HAL_DMA_IRQHandler+0xe50>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d108      	bne.n	8004930 <HAL_DMA_IRQHandler+0xdbc>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 021c 	bic.w	r2, r2, #28
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e007      	b.n	8004940 <HAL_DMA_IRQHandler+0xdcc>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 020e 	bic.w	r2, r2, #14
 800493e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	2201      	movs	r2, #1
 800494a:	409a      	lsls	r2, r3
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
 8004976:	e004      	b.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004978:	bf00      	nop
 800497a:	e002      	b.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800497c:	bf00      	nop
 800497e:	e000      	b.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004980:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004982:	3728      	adds	r7, #40	; 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40020010 	.word	0x40020010
 800498c:	40020028 	.word	0x40020028
 8004990:	40020040 	.word	0x40020040
 8004994:	40020058 	.word	0x40020058
 8004998:	40020070 	.word	0x40020070
 800499c:	40020088 	.word	0x40020088
 80049a0:	400200a0 	.word	0x400200a0
 80049a4:	400200b8 	.word	0x400200b8
 80049a8:	40020410 	.word	0x40020410
 80049ac:	40020428 	.word	0x40020428
 80049b0:	40020440 	.word	0x40020440
 80049b4:	40020458 	.word	0x40020458
 80049b8:	40020470 	.word	0x40020470
 80049bc:	40020488 	.word	0x40020488
 80049c0:	400204a0 	.word	0x400204a0
 80049c4:	400204b8 	.word	0x400204b8

080049c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a84      	ldr	r2, [pc, #528]	; (8004bf8 <DMA_SetConfig+0x230>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d072      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a82      	ldr	r2, [pc, #520]	; (8004bfc <DMA_SetConfig+0x234>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d06d      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a81      	ldr	r2, [pc, #516]	; (8004c00 <DMA_SetConfig+0x238>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d068      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a7f      	ldr	r2, [pc, #508]	; (8004c04 <DMA_SetConfig+0x23c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d063      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a7e      	ldr	r2, [pc, #504]	; (8004c08 <DMA_SetConfig+0x240>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d05e      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a7c      	ldr	r2, [pc, #496]	; (8004c0c <DMA_SetConfig+0x244>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d059      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a7b      	ldr	r2, [pc, #492]	; (8004c10 <DMA_SetConfig+0x248>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d054      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a79      	ldr	r2, [pc, #484]	; (8004c14 <DMA_SetConfig+0x24c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d04f      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a78      	ldr	r2, [pc, #480]	; (8004c18 <DMA_SetConfig+0x250>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d04a      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a76      	ldr	r2, [pc, #472]	; (8004c1c <DMA_SetConfig+0x254>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d045      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a75      	ldr	r2, [pc, #468]	; (8004c20 <DMA_SetConfig+0x258>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d040      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a73      	ldr	r2, [pc, #460]	; (8004c24 <DMA_SetConfig+0x25c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d03b      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a72      	ldr	r2, [pc, #456]	; (8004c28 <DMA_SetConfig+0x260>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d036      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a70      	ldr	r2, [pc, #448]	; (8004c2c <DMA_SetConfig+0x264>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d031      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a6f      	ldr	r2, [pc, #444]	; (8004c30 <DMA_SetConfig+0x268>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d02c      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a6d      	ldr	r2, [pc, #436]	; (8004c34 <DMA_SetConfig+0x26c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d027      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6c      	ldr	r2, [pc, #432]	; (8004c38 <DMA_SetConfig+0x270>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d022      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6a      	ldr	r2, [pc, #424]	; (8004c3c <DMA_SetConfig+0x274>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01d      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a69      	ldr	r2, [pc, #420]	; (8004c40 <DMA_SetConfig+0x278>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d018      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a67      	ldr	r2, [pc, #412]	; (8004c44 <DMA_SetConfig+0x27c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a66      	ldr	r2, [pc, #408]	; (8004c48 <DMA_SetConfig+0x280>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00e      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a64      	ldr	r2, [pc, #400]	; (8004c4c <DMA_SetConfig+0x284>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a63      	ldr	r2, [pc, #396]	; (8004c50 <DMA_SetConfig+0x288>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a61      	ldr	r2, [pc, #388]	; (8004c54 <DMA_SetConfig+0x28c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d101      	bne.n	8004ad6 <DMA_SetConfig+0x10e>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <DMA_SetConfig+0x110>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ae4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004af6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3e      	ldr	r2, [pc, #248]	; (8004bf8 <DMA_SetConfig+0x230>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d04a      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a3d      	ldr	r2, [pc, #244]	; (8004bfc <DMA_SetConfig+0x234>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d045      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3b      	ldr	r2, [pc, #236]	; (8004c00 <DMA_SetConfig+0x238>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d040      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a3a      	ldr	r2, [pc, #232]	; (8004c04 <DMA_SetConfig+0x23c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d03b      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <DMA_SetConfig+0x240>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d036      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a37      	ldr	r2, [pc, #220]	; (8004c0c <DMA_SetConfig+0x244>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d031      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a35      	ldr	r2, [pc, #212]	; (8004c10 <DMA_SetConfig+0x248>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02c      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <DMA_SetConfig+0x24c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d027      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <DMA_SetConfig+0x250>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a31      	ldr	r2, [pc, #196]	; (8004c1c <DMA_SetConfig+0x254>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d01d      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <DMA_SetConfig+0x258>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <DMA_SetConfig+0x25c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a2c      	ldr	r2, [pc, #176]	; (8004c28 <DMA_SetConfig+0x260>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <DMA_SetConfig+0x264>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <DMA_SetConfig+0x268>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <DMA_SetConfig+0x26c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <DMA_SetConfig+0x1d4>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <DMA_SetConfig+0x1d6>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d05a      	beq.n	8004c58 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	223f      	movs	r2, #63	; 0x3f
 8004bac:	409a      	lsls	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d108      	bne.n	8004be4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004be2:	e087      	b.n	8004cf4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
}
 8004bf4:	e07e      	b.n	8004cf4 <DMA_SetConfig+0x32c>
 8004bf6:	bf00      	nop
 8004bf8:	40020010 	.word	0x40020010
 8004bfc:	40020028 	.word	0x40020028
 8004c00:	40020040 	.word	0x40020040
 8004c04:	40020058 	.word	0x40020058
 8004c08:	40020070 	.word	0x40020070
 8004c0c:	40020088 	.word	0x40020088
 8004c10:	400200a0 	.word	0x400200a0
 8004c14:	400200b8 	.word	0x400200b8
 8004c18:	40020410 	.word	0x40020410
 8004c1c:	40020428 	.word	0x40020428
 8004c20:	40020440 	.word	0x40020440
 8004c24:	40020458 	.word	0x40020458
 8004c28:	40020470 	.word	0x40020470
 8004c2c:	40020488 	.word	0x40020488
 8004c30:	400204a0 	.word	0x400204a0
 8004c34:	400204b8 	.word	0x400204b8
 8004c38:	58025408 	.word	0x58025408
 8004c3c:	5802541c 	.word	0x5802541c
 8004c40:	58025430 	.word	0x58025430
 8004c44:	58025444 	.word	0x58025444
 8004c48:	58025458 	.word	0x58025458
 8004c4c:	5802546c 	.word	0x5802546c
 8004c50:	58025480 	.word	0x58025480
 8004c54:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <DMA_SetConfig+0x338>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <DMA_SetConfig+0x33c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d01d      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <DMA_SetConfig+0x340>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <DMA_SetConfig+0x344>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <DMA_SetConfig+0x348>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <DMA_SetConfig+0x34c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <DMA_SetConfig+0x350>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <DMA_SetConfig+0x354>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <DMA_SetConfig+0x2e4>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <DMA_SetConfig+0x2e6>
 8004cac:	2300      	movs	r3, #0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	2201      	movs	r2, #1
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d108      	bne.n	8004ce4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	60da      	str	r2, [r3, #12]
}
 8004ce2:	e007      	b.n	8004cf4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	58025408 	.word	0x58025408
 8004d04:	5802541c 	.word	0x5802541c
 8004d08:	58025430 	.word	0x58025430
 8004d0c:	58025444 	.word	0x58025444
 8004d10:	58025458 	.word	0x58025458
 8004d14:	5802546c 	.word	0x5802546c
 8004d18:	58025480 	.word	0x58025480
 8004d1c:	58025494 	.word	0x58025494

08004d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a42      	ldr	r2, [pc, #264]	; (8004e38 <DMA_CalcBaseAndBitshift+0x118>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d04a      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a41      	ldr	r2, [pc, #260]	; (8004e3c <DMA_CalcBaseAndBitshift+0x11c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d045      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3f      	ldr	r2, [pc, #252]	; (8004e40 <DMA_CalcBaseAndBitshift+0x120>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d040      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3e      	ldr	r2, [pc, #248]	; (8004e44 <DMA_CalcBaseAndBitshift+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d03b      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3c      	ldr	r2, [pc, #240]	; (8004e48 <DMA_CalcBaseAndBitshift+0x128>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d036      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <DMA_CalcBaseAndBitshift+0x12c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d031      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a39      	ldr	r2, [pc, #228]	; (8004e50 <DMA_CalcBaseAndBitshift+0x130>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02c      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a38      	ldr	r2, [pc, #224]	; (8004e54 <DMA_CalcBaseAndBitshift+0x134>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d027      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a36      	ldr	r2, [pc, #216]	; (8004e58 <DMA_CalcBaseAndBitshift+0x138>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d022      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a35      	ldr	r2, [pc, #212]	; (8004e5c <DMA_CalcBaseAndBitshift+0x13c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d01d      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a33      	ldr	r2, [pc, #204]	; (8004e60 <DMA_CalcBaseAndBitshift+0x140>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d018      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <DMA_CalcBaseAndBitshift+0x144>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a30      	ldr	r2, [pc, #192]	; (8004e68 <DMA_CalcBaseAndBitshift+0x148>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00e      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2f      	ldr	r2, [pc, #188]	; (8004e6c <DMA_CalcBaseAndBitshift+0x14c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2d      	ldr	r2, [pc, #180]	; (8004e70 <DMA_CalcBaseAndBitshift+0x150>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2c      	ldr	r2, [pc, #176]	; (8004e74 <DMA_CalcBaseAndBitshift+0x154>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <DMA_CalcBaseAndBitshift+0xac>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <DMA_CalcBaseAndBitshift+0xae>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d024      	beq.n	8004e1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3b10      	subs	r3, #16
 8004dda:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <DMA_CalcBaseAndBitshift+0x158>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	4a24      	ldr	r2, [pc, #144]	; (8004e7c <DMA_CalcBaseAndBitshift+0x15c>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d908      	bls.n	8004e0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <DMA_CalcBaseAndBitshift+0x160>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	1d1a      	adds	r2, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	659a      	str	r2, [r3, #88]	; 0x58
 8004e0a:	e00d      	b.n	8004e28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <DMA_CalcBaseAndBitshift+0x160>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6593      	str	r3, [r2, #88]	; 0x58
 8004e1a:	e005      	b.n	8004e28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40020010 	.word	0x40020010
 8004e3c:	40020028 	.word	0x40020028
 8004e40:	40020040 	.word	0x40020040
 8004e44:	40020058 	.word	0x40020058
 8004e48:	40020070 	.word	0x40020070
 8004e4c:	40020088 	.word	0x40020088
 8004e50:	400200a0 	.word	0x400200a0
 8004e54:	400200b8 	.word	0x400200b8
 8004e58:	40020410 	.word	0x40020410
 8004e5c:	40020428 	.word	0x40020428
 8004e60:	40020440 	.word	0x40020440
 8004e64:	40020458 	.word	0x40020458
 8004e68:	40020470 	.word	0x40020470
 8004e6c:	40020488 	.word	0x40020488
 8004e70:	400204a0 	.word	0x400204a0
 8004e74:	400204b8 	.word	0x400204b8
 8004e78:	aaaaaaab 	.word	0xaaaaaaab
 8004e7c:	0800aca4 	.word	0x0800aca4
 8004e80:	fffffc00 	.word	0xfffffc00

08004e84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d120      	bne.n	8004eda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d858      	bhi.n	8004f52 <DMA_CheckFifoParam+0xce>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <DMA_CheckFifoParam+0x24>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004ecb 	.word	0x08004ecb
 8004eb0:	08004eb9 	.word	0x08004eb9
 8004eb4:	08004f53 	.word	0x08004f53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d048      	beq.n	8004f56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec8:	e045      	b.n	8004f56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ed2:	d142      	bne.n	8004f5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ed8:	e03f      	b.n	8004f5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee2:	d123      	bne.n	8004f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d838      	bhi.n	8004f5e <DMA_CheckFifoParam+0xda>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <DMA_CheckFifoParam+0x70>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f0b 	.word	0x08004f0b
 8004efc:	08004f05 	.word	0x08004f05
 8004f00:	08004f1d 	.word	0x08004f1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
        break;
 8004f08:	e030      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d025      	beq.n	8004f62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f1a:	e022      	b.n	8004f62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f24:	d11f      	bne.n	8004f66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f2a:	e01c      	b.n	8004f66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d902      	bls.n	8004f3a <DMA_CheckFifoParam+0xb6>
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d003      	beq.n	8004f40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f38:	e018      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f3e:	e015      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8004f50:	e00b      	b.n	8004f6a <DMA_CheckFifoParam+0xe6>
        break;
 8004f52:	bf00      	nop
 8004f54:	e00a      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f56:	bf00      	nop
 8004f58:	e008      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f5a:	bf00      	nop
 8004f5c:	e006      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f5e:	bf00      	nop
 8004f60:	e004      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
    break;
 8004f6a:	bf00      	nop
    }
  }

  return status;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a38      	ldr	r2, [pc, #224]	; (8005070 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d022      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a36      	ldr	r2, [pc, #216]	; (8005074 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a35      	ldr	r2, [pc, #212]	; (8005078 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a33      	ldr	r2, [pc, #204]	; (800507c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a32      	ldr	r2, [pc, #200]	; (8005080 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01a      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	3b08      	subs	r3, #8
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4b26      	ldr	r3, [pc, #152]	; (8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a24      	ldr	r2, [pc, #144]	; (8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005008:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005018:	e024      	b.n	8005064 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3b10      	subs	r3, #16
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d806      	bhi.n	8005042 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d902      	bls.n	8005042 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3308      	adds	r3, #8
 8005040:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a16      	ldr	r2, [pc, #88]	; (80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005054:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	2201      	movs	r2, #1
 800505e:	409a      	lsls	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	58025408 	.word	0x58025408
 8005074:	5802541c 	.word	0x5802541c
 8005078:	58025430 	.word	0x58025430
 800507c:	58025444 	.word	0x58025444
 8005080:	58025458 	.word	0x58025458
 8005084:	5802546c 	.word	0x5802546c
 8005088:	58025480 	.word	0x58025480
 800508c:	58025494 	.word	0x58025494
 8005090:	cccccccd 	.word	0xcccccccd
 8005094:	16009600 	.word	0x16009600
 8005098:	58025880 	.word	0x58025880
 800509c:	aaaaaaab 	.word	0xaaaaaaab
 80050a0:	400204b8 	.word	0x400204b8
 80050a4:	4002040f 	.word	0x4002040f
 80050a8:	10008200 	.word	0x10008200
 80050ac:	40020880 	.word	0x40020880

080050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04a      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d847      	bhi.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a25      	ldr	r2, [pc, #148]	; (8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d022      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a24      	ldr	r2, [pc, #144]	; (800516c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d01d      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d018      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00e      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1e      	ldr	r2, [pc, #120]	; (800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d009      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d101      	bne.n	8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005120:	2300      	movs	r3, #0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005138:	671a      	str	r2, [r3, #112]	; 0x70
 800513a:	e009      	b.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4b14      	ldr	r3, [pc, #80]	; (8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	461a      	mov	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a11      	ldr	r2, [pc, #68]	; (8005194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800514e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3b01      	subs	r3, #1
 8005154:	2201      	movs	r2, #1
 8005156:	409a      	lsls	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	58025408 	.word	0x58025408
 800516c:	5802541c 	.word	0x5802541c
 8005170:	58025430 	.word	0x58025430
 8005174:	58025444 	.word	0x58025444
 8005178:	58025458 	.word	0x58025458
 800517c:	5802546c 	.word	0x5802546c
 8005180:	58025480 	.word	0x58025480
 8005184:	58025494 	.word	0x58025494
 8005188:	1600963f 	.word	0x1600963f
 800518c:	58025940 	.word	0x58025940
 8005190:	1000823f 	.word	0x1000823f
 8005194:	40020940 	.word	0x40020940

08005198 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b80      	cmp	r3, #128	; 0x80
 80051b0:	d105      	bne.n	80051be <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e325      	b.n	800580a <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e31e      	b.n	800580a <HAL_DMAEx_MultiBufferStart_IT+0x672>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 830d 	bne.w	80057fc <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a82      	ldr	r2, [pc, #520]	; (8005400 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d04a      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a81      	ldr	r2, [pc, #516]	; (8005404 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d045      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a7f      	ldr	r2, [pc, #508]	; (8005408 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d040      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7e      	ldr	r2, [pc, #504]	; (800540c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d03b      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a7c      	ldr	r2, [pc, #496]	; (8005410 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d036      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a7b      	ldr	r2, [pc, #492]	; (8005414 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d031      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a79      	ldr	r2, [pc, #484]	; (8005418 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d02c      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a78      	ldr	r2, [pc, #480]	; (800541c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d027      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a76      	ldr	r2, [pc, #472]	; (8005420 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d022      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a75      	ldr	r2, [pc, #468]	; (8005424 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d01d      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a73      	ldr	r2, [pc, #460]	; (8005428 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d018      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a72      	ldr	r2, [pc, #456]	; (800542c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a70      	ldr	r2, [pc, #448]	; (8005430 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00e      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a6f      	ldr	r2, [pc, #444]	; (8005434 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a6d      	ldr	r2, [pc, #436]	; (8005438 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a6c      	ldr	r2, [pc, #432]	; (800543c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d101      	bne.n	8005294 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005294:	2300      	movs	r3, #0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d018      	beq.n	80052cc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80052a8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	3308      	adds	r3, #8
 80052b8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	223f      	movs	r2, #63	; 0x3f
 80052c4:	409a      	lsls	r2, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e018      	b.n	80052fe <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6819      	ldr	r1, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f248 0320 	movw	r3, #32800	; 0x8020
 80052da:	430b      	orrs	r3, r1
 80052dc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ea:	3304      	adds	r3, #4
 80052ec:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	2201      	movs	r2, #1
 80052f8:	409a      	lsls	r2, r3
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fb41 	bl	800598c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d072      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a3a      	ldr	r2, [pc, #232]	; (8005404 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d06d      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a39      	ldr	r2, [pc, #228]	; (8005408 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d068      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a37      	ldr	r2, [pc, #220]	; (800540c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d063      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a36      	ldr	r2, [pc, #216]	; (8005410 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d05e      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a34      	ldr	r2, [pc, #208]	; (8005414 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d059      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a33      	ldr	r2, [pc, #204]	; (8005418 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d054      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a31      	ldr	r2, [pc, #196]	; (800541c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d04f      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a30      	ldr	r2, [pc, #192]	; (8005420 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d04a      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2e      	ldr	r2, [pc, #184]	; (8005424 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d045      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d040      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2b      	ldr	r2, [pc, #172]	; (800542c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d03b      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2a      	ldr	r2, [pc, #168]	; (8005430 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d036      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a28      	ldr	r2, [pc, #160]	; (8005434 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d031      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a27      	ldr	r2, [pc, #156]	; (8005438 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d02c      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a25      	ldr	r2, [pc, #148]	; (800543c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d027      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a24      	ldr	r2, [pc, #144]	; (8005440 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d022      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a22      	ldr	r2, [pc, #136]	; (8005444 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a21      	ldr	r2, [pc, #132]	; (8005448 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1f      	ldr	r2, [pc, #124]	; (800544c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a19      	ldr	r2, [pc, #100]	; (800545c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d132      	bne.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e031      	b.n	8005462 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80053fe:	bf00      	nop
 8005400:	40020010 	.word	0x40020010
 8005404:	40020028 	.word	0x40020028
 8005408:	40020040 	.word	0x40020040
 800540c:	40020058 	.word	0x40020058
 8005410:	40020070 	.word	0x40020070
 8005414:	40020088 	.word	0x40020088
 8005418:	400200a0 	.word	0x400200a0
 800541c:	400200b8 	.word	0x400200b8
 8005420:	40020410 	.word	0x40020410
 8005424:	40020428 	.word	0x40020428
 8005428:	40020440 	.word	0x40020440
 800542c:	40020458 	.word	0x40020458
 8005430:	40020470 	.word	0x40020470
 8005434:	40020488 	.word	0x40020488
 8005438:	400204a0 	.word	0x400204a0
 800543c:	400204b8 	.word	0x400204b8
 8005440:	58025408 	.word	0x58025408
 8005444:	5802541c 	.word	0x5802541c
 8005448:	58025430 	.word	0x58025430
 800544c:	58025444 	.word	0x58025444
 8005450:	58025458 	.word	0x58025458
 8005454:	5802546c 	.word	0x5802546c
 8005458:	58025480 	.word	0x58025480
 800545c:	58025494 	.word	0x58025494
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00d      	beq.n	8005482 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800546e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005480:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a85      	ldr	r2, [pc, #532]	; (800569c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d04a      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a83      	ldr	r2, [pc, #524]	; (80056a0 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d045      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a82      	ldr	r2, [pc, #520]	; (80056a4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d040      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a80      	ldr	r2, [pc, #512]	; (80056a8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d03b      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a7f      	ldr	r2, [pc, #508]	; (80056ac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d036      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a7d      	ldr	r2, [pc, #500]	; (80056b0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d031      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a7c      	ldr	r2, [pc, #496]	; (80056b4 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d02c      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a7a      	ldr	r2, [pc, #488]	; (80056b8 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d027      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a79      	ldr	r2, [pc, #484]	; (80056bc <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a77      	ldr	r2, [pc, #476]	; (80056c0 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01d      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a76      	ldr	r2, [pc, #472]	; (80056c4 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a74      	ldr	r2, [pc, #464]	; (80056c8 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a73      	ldr	r2, [pc, #460]	; (80056cc <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a71      	ldr	r2, [pc, #452]	; (80056d0 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a70      	ldr	r2, [pc, #448]	; (80056d4 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a6e      	ldr	r2, [pc, #440]	; (80056d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d101      	bne.n	8005526 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d022      	beq.n	8005572 <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 021e 	bic.w	r2, r3, #30
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0216 	orr.w	r2, r2, #22
 800553e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800554e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555c:	2b00      	cmp	r3, #0
 800555e:	d022      	beq.n	80055a6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0208 	orr.w	r2, r2, #8
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e019      	b.n	80055a6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 020e 	bic.w	r2, r3, #14
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 020a 	orr.w	r2, r2, #10
 8005584:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0204 	orr.w	r2, r2, #4
 80055a4:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a3c      	ldr	r2, [pc, #240]	; (800569c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d072      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a3a      	ldr	r2, [pc, #232]	; (80056a0 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d06d      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a39      	ldr	r2, [pc, #228]	; (80056a4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d068      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a37      	ldr	r2, [pc, #220]	; (80056a8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d063      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a36      	ldr	r2, [pc, #216]	; (80056ac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d05e      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a34      	ldr	r2, [pc, #208]	; (80056b0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d059      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a33      	ldr	r2, [pc, #204]	; (80056b4 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d054      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a31      	ldr	r2, [pc, #196]	; (80056b8 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d04f      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a30      	ldr	r2, [pc, #192]	; (80056bc <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d04a      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2e      	ldr	r2, [pc, #184]	; (80056c0 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d045      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2d      	ldr	r2, [pc, #180]	; (80056c4 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d040      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d03b      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d036      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a28      	ldr	r2, [pc, #160]	; (80056d0 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d031      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d02c      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a25      	ldr	r2, [pc, #148]	; (80056d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d027      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a24      	ldr	r2, [pc, #144]	; (80056dc <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d022      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a22      	ldr	r2, [pc, #136]	; (80056e0 <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01d      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a21      	ldr	r2, [pc, #132]	; (80056e4 <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d018      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1c      	ldr	r2, [pc, #112]	; (80056f0 <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d132      	bne.n	80056fc <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8005696:	2301      	movs	r3, #1
 8005698:	e031      	b.n	80056fe <HAL_DMAEx_MultiBufferStart_IT+0x566>
 800569a:	bf00      	nop
 800569c:	40020010 	.word	0x40020010
 80056a0:	40020028 	.word	0x40020028
 80056a4:	40020040 	.word	0x40020040
 80056a8:	40020058 	.word	0x40020058
 80056ac:	40020070 	.word	0x40020070
 80056b0:	40020088 	.word	0x40020088
 80056b4:	400200a0 	.word	0x400200a0
 80056b8:	400200b8 	.word	0x400200b8
 80056bc:	40020410 	.word	0x40020410
 80056c0:	40020428 	.word	0x40020428
 80056c4:	40020440 	.word	0x40020440
 80056c8:	40020458 	.word	0x40020458
 80056cc:	40020470 	.word	0x40020470
 80056d0:	40020488 	.word	0x40020488
 80056d4:	400204a0 	.word	0x400204a0
 80056d8:	400204b8 	.word	0x400204b8
 80056dc:	58025408 	.word	0x58025408
 80056e0:	5802541c 	.word	0x5802541c
 80056e4:	58025430 	.word	0x58025430
 80056e8:	58025444 	.word	0x58025444
 80056ec:	58025458 	.word	0x58025458
 80056f0:	5802546c 	.word	0x5802546c
 80056f4:	58025480 	.word	0x58025480
 80056f8:	58025494 	.word	0x58025494
 80056fc:	2300      	movs	r3, #0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01a      	beq.n	8005738 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800571e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005736:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a35      	ldr	r2, [pc, #212]	; (8005814 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d04a      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a34      	ldr	r2, [pc, #208]	; (8005818 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d045      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a32      	ldr	r2, [pc, #200]	; (800581c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d040      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a31      	ldr	r2, [pc, #196]	; (8005820 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d03b      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2f      	ldr	r2, [pc, #188]	; (8005824 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d036      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2e      	ldr	r2, [pc, #184]	; (8005828 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d031      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2c      	ldr	r2, [pc, #176]	; (800582c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d02c      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2b      	ldr	r2, [pc, #172]	; (8005830 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d027      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a29      	ldr	r2, [pc, #164]	; (8005834 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d022      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a28      	ldr	r2, [pc, #160]	; (8005838 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d01d      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a26      	ldr	r2, [pc, #152]	; (800583c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a25      	ldr	r2, [pc, #148]	; (8005840 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a23      	ldr	r2, [pc, #140]	; (8005844 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a22      	ldr	r2, [pc, #136]	; (8005848 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a20      	ldr	r2, [pc, #128]	; (800584c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	e00e      	b.n	8005808 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e005      	b.n	8005808 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005802:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40020010 	.word	0x40020010
 8005818:	40020028 	.word	0x40020028
 800581c:	40020040 	.word	0x40020040
 8005820:	40020058 	.word	0x40020058
 8005824:	40020070 	.word	0x40020070
 8005828:	40020088 	.word	0x40020088
 800582c:	400200a0 	.word	0x400200a0
 8005830:	400200b8 	.word	0x400200b8
 8005834:	40020410 	.word	0x40020410
 8005838:	40020428 	.word	0x40020428
 800583c:	40020440 	.word	0x40020440
 8005840:	40020458 	.word	0x40020458
 8005844:	40020470 	.word	0x40020470
 8005848:	40020488 	.word	0x40020488
 800584c:	400204a0 	.word	0x400204a0
 8005850:	400204b8 	.word	0x400204b8

08005854 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a39      	ldr	r2, [pc, #228]	; (800594c <HAL_DMAEx_ChangeMemory+0xf8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d04a      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a37      	ldr	r2, [pc, #220]	; (8005950 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d045      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a36      	ldr	r2, [pc, #216]	; (8005954 <HAL_DMAEx_ChangeMemory+0x100>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d040      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a34      	ldr	r2, [pc, #208]	; (8005958 <HAL_DMAEx_ChangeMemory+0x104>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d03b      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a33      	ldr	r2, [pc, #204]	; (800595c <HAL_DMAEx_ChangeMemory+0x108>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d036      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a31      	ldr	r2, [pc, #196]	; (8005960 <HAL_DMAEx_ChangeMemory+0x10c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d031      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a30      	ldr	r2, [pc, #192]	; (8005964 <HAL_DMAEx_ChangeMemory+0x110>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d02c      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	; (8005968 <HAL_DMAEx_ChangeMemory+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d027      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2d      	ldr	r2, [pc, #180]	; (800596c <HAL_DMAEx_ChangeMemory+0x118>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d022      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <HAL_DMAEx_ChangeMemory+0x11c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01d      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <HAL_DMAEx_ChangeMemory+0x120>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d018      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a28      	ldr	r2, [pc, #160]	; (8005978 <HAL_DMAEx_ChangeMemory+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a27      	ldr	r2, [pc, #156]	; (800597c <HAL_DMAEx_ChangeMemory+0x128>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00e      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a25      	ldr	r2, [pc, #148]	; (8005980 <HAL_DMAEx_ChangeMemory+0x12c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d009      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a24      	ldr	r2, [pc, #144]	; (8005984 <HAL_DMAEx_ChangeMemory+0x130>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d004      	beq.n	8005902 <HAL_DMAEx_ChangeMemory+0xae>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a22      	ldr	r2, [pc, #136]	; (8005988 <HAL_DMAEx_ChangeMemory+0x134>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d101      	bne.n	8005906 <HAL_DMAEx_ChangeMemory+0xb2>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_DMAEx_ChangeMemory+0xb4>
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	e010      	b.n	800593e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	611a      	str	r2, [r3, #16]
 8005924:	e00b      	b.n	800593e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	e003      	b.n	800593e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40020010 	.word	0x40020010
 8005950:	40020028 	.word	0x40020028
 8005954:	40020040 	.word	0x40020040
 8005958:	40020058 	.word	0x40020058
 800595c:	40020070 	.word	0x40020070
 8005960:	40020088 	.word	0x40020088
 8005964:	400200a0 	.word	0x400200a0
 8005968:	400200b8 	.word	0x400200b8
 800596c:	40020410 	.word	0x40020410
 8005970:	40020428 	.word	0x40020428
 8005974:	40020440 	.word	0x40020440
 8005978:	40020458 	.word	0x40020458
 800597c:	40020470 	.word	0x40020470
 8005980:	40020488 	.word	0x40020488
 8005984:	400204a0 	.word	0x400204a0
 8005988:	400204b8 	.word	0x400204b8

0800598c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a46      	ldr	r2, [pc, #280]	; (8005ab8 <DMA_MultiBufferSetConfig+0x12c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d04a      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a44      	ldr	r2, [pc, #272]	; (8005abc <DMA_MultiBufferSetConfig+0x130>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d045      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a43      	ldr	r2, [pc, #268]	; (8005ac0 <DMA_MultiBufferSetConfig+0x134>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d040      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a41      	ldr	r2, [pc, #260]	; (8005ac4 <DMA_MultiBufferSetConfig+0x138>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d03b      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <DMA_MultiBufferSetConfig+0x13c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d036      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a3e      	ldr	r2, [pc, #248]	; (8005acc <DMA_MultiBufferSetConfig+0x140>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d031      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3d      	ldr	r2, [pc, #244]	; (8005ad0 <DMA_MultiBufferSetConfig+0x144>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d02c      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3b      	ldr	r2, [pc, #236]	; (8005ad4 <DMA_MultiBufferSetConfig+0x148>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d027      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a3a      	ldr	r2, [pc, #232]	; (8005ad8 <DMA_MultiBufferSetConfig+0x14c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a38      	ldr	r2, [pc, #224]	; (8005adc <DMA_MultiBufferSetConfig+0x150>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01d      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a37      	ldr	r2, [pc, #220]	; (8005ae0 <DMA_MultiBufferSetConfig+0x154>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a35      	ldr	r2, [pc, #212]	; (8005ae4 <DMA_MultiBufferSetConfig+0x158>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a34      	ldr	r2, [pc, #208]	; (8005ae8 <DMA_MultiBufferSetConfig+0x15c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a32      	ldr	r2, [pc, #200]	; (8005aec <DMA_MultiBufferSetConfig+0x160>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a31      	ldr	r2, [pc, #196]	; (8005af0 <DMA_MultiBufferSetConfig+0x164>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <DMA_MultiBufferSetConfig+0xae>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2f      	ldr	r2, [pc, #188]	; (8005af4 <DMA_MultiBufferSetConfig+0x168>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <DMA_MultiBufferSetConfig+0xb2>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <DMA_MultiBufferSetConfig+0xb4>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d019      	beq.n	8005a78 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	d108      	bne.n	8005a66 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005a64:	e021      	b.n	8005aaa <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	60da      	str	r2, [r3, #12]
}
 8005a76:	e018      	b.n	8005aaa <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d108      	bne.n	8005a9a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	60da      	str	r2, [r3, #12]
}
 8005a98:	e007      	b.n	8005aaa <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	60da      	str	r2, [r3, #12]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40020010 	.word	0x40020010
 8005abc:	40020028 	.word	0x40020028
 8005ac0:	40020040 	.word	0x40020040
 8005ac4:	40020058 	.word	0x40020058
 8005ac8:	40020070 	.word	0x40020070
 8005acc:	40020088 	.word	0x40020088
 8005ad0:	400200a0 	.word	0x400200a0
 8005ad4:	400200b8 	.word	0x400200b8
 8005ad8:	40020410 	.word	0x40020410
 8005adc:	40020428 	.word	0x40020428
 8005ae0:	40020440 	.word	0x40020440
 8005ae4:	40020458 	.word	0x40020458
 8005ae8:	40020470 	.word	0x40020470
 8005aec:	40020488 	.word	0x40020488
 8005af0:	400204a0 	.word	0x400204a0
 8005af4:	400204b8 	.word	0x400204b8

08005af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b089      	sub	sp, #36	; 0x24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b06:	4b89      	ldr	r3, [pc, #548]	; (8005d2c <HAL_GPIO_Init+0x234>)
 8005b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b0a:	e194      	b.n	8005e36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	2101      	movs	r1, #1
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	4013      	ands	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8186 	beq.w	8005e30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d00b      	beq.n	8005b44 <HAL_GPIO_Init+0x4c>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d007      	beq.n	8005b44 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b38:	2b11      	cmp	r3, #17
 8005b3a:	d003      	beq.n	8005b44 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b12      	cmp	r3, #18
 8005b42:	d130      	bne.n	8005ba6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	2203      	movs	r2, #3
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	4013      	ands	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 0201 	and.w	r2, r3, #1
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d003      	beq.n	8005be6 <HAL_GPIO_Init+0xee>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b12      	cmp	r3, #18
 8005be4:	d123      	bne.n	8005c2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	08da      	lsrs	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3208      	adds	r2, #8
 8005bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	220f      	movs	r2, #15
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	08da      	lsrs	r2, r3, #3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3208      	adds	r2, #8
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	2203      	movs	r2, #3
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 0203 	and.w	r2, r3, #3
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80e0 	beq.w	8005e30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c70:	4b2f      	ldr	r3, [pc, #188]	; (8005d30 <HAL_GPIO_Init+0x238>)
 8005c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c76:	4a2e      	ldr	r2, [pc, #184]	; (8005d30 <HAL_GPIO_Init+0x238>)
 8005c78:	f043 0302 	orr.w	r3, r3, #2
 8005c7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c80:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <HAL_GPIO_Init+0x238>)
 8005c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c8e:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <HAL_GPIO_Init+0x23c>)
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	089b      	lsrs	r3, r3, #2
 8005c94:	3302      	adds	r3, #2
 8005c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	220f      	movs	r2, #15
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <HAL_GPIO_Init+0x240>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d052      	beq.n	8005d60 <HAL_GPIO_Init+0x268>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <HAL_GPIO_Init+0x244>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d031      	beq.n	8005d26 <HAL_GPIO_Init+0x22e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <HAL_GPIO_Init+0x248>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d02b      	beq.n	8005d22 <HAL_GPIO_Init+0x22a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <HAL_GPIO_Init+0x24c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d025      	beq.n	8005d1e <HAL_GPIO_Init+0x226>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <HAL_GPIO_Init+0x250>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01f      	beq.n	8005d1a <HAL_GPIO_Init+0x222>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_GPIO_Init+0x254>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d019      	beq.n	8005d16 <HAL_GPIO_Init+0x21e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a1a      	ldr	r2, [pc, #104]	; (8005d50 <HAL_GPIO_Init+0x258>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <HAL_GPIO_Init+0x21a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <HAL_GPIO_Init+0x25c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00d      	beq.n	8005d0e <HAL_GPIO_Init+0x216>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a18      	ldr	r2, [pc, #96]	; (8005d58 <HAL_GPIO_Init+0x260>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d007      	beq.n	8005d0a <HAL_GPIO_Init+0x212>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a17      	ldr	r2, [pc, #92]	; (8005d5c <HAL_GPIO_Init+0x264>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d101      	bne.n	8005d06 <HAL_GPIO_Init+0x20e>
 8005d02:	2309      	movs	r3, #9
 8005d04:	e02d      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d06:	230a      	movs	r3, #10
 8005d08:	e02b      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	e029      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d0e:	2307      	movs	r3, #7
 8005d10:	e027      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d12:	2306      	movs	r3, #6
 8005d14:	e025      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d16:	2305      	movs	r3, #5
 8005d18:	e023      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d1a:	2304      	movs	r3, #4
 8005d1c:	e021      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e01f      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e01d      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e01b      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d2a:	bf00      	nop
 8005d2c:	58000080 	.word	0x58000080
 8005d30:	58024400 	.word	0x58024400
 8005d34:	58000400 	.word	0x58000400
 8005d38:	58020000 	.word	0x58020000
 8005d3c:	58020400 	.word	0x58020400
 8005d40:	58020800 	.word	0x58020800
 8005d44:	58020c00 	.word	0x58020c00
 8005d48:	58021000 	.word	0x58021000
 8005d4c:	58021400 	.word	0x58021400
 8005d50:	58021800 	.word	0x58021800
 8005d54:	58021c00 	.word	0x58021c00
 8005d58:	58022000 	.word	0x58022000
 8005d5c:	58022400 	.word	0x58022400
 8005d60:	2300      	movs	r3, #0
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	f002 0203 	and.w	r2, r2, #3
 8005d68:	0092      	lsls	r2, r2, #2
 8005d6a:	4093      	lsls	r3, r2
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d72:	4938      	ldr	r1, [pc, #224]	; (8005e54 <HAL_GPIO_Init+0x35c>)
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	3302      	adds	r3, #2
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	43db      	mvns	r3, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	4013      	ands	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f47f ae63 	bne.w	8005b0c <HAL_GPIO_Init+0x14>
  }
}
 8005e46:	bf00      	nop
 8005e48:	3724      	adds	r7, #36	; 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	58000400 	.word	0x58000400

08005e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	887b      	ldrh	r3, [r7, #2]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
 8005e74:	e001      	b.n	8005e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e76:	2300      	movs	r3, #0
 8005e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	807b      	strh	r3, [r7, #2]
 8005e94:	4613      	mov	r3, r2
 8005e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e98:	787b      	ldrb	r3, [r7, #1]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e9e:	887a      	ldrh	r2, [r7, #2]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ea4:	e003      	b.n	8005eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ea6:	887b      	ldrh	r3, [r7, #2]
 8005ea8:	041a      	lsls	r2, r3, #16
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	619a      	str	r2, [r3, #24]
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e07f      	b.n	8005fce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fb f834 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	; 0x24
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d107      	bne.n	8005f36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	e006      	b.n	8005f44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d104      	bne.n	8005f56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <HAL_I2C_Init+0x11c>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	ea42 0103 	orr.w	r1, r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	021a      	lsls	r2, r3, #8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	02008000 	.word	0x02008000

08005fdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	817b      	strh	r3, [r7, #10]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	813b      	strh	r3, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	f040 80f9 	bne.w	80061f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_I2C_Mem_Write+0x34>
 800600a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d105      	bne.n	800601c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006016:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0ed      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_I2C_Mem_Write+0x4e>
 8006026:	2302      	movs	r3, #2
 8006028:	e0e6      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006032:	f7fb fe4b 	bl	8001ccc <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2319      	movs	r3, #25
 800603e:	2201      	movs	r2, #1
 8006040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f955 	bl	80062f4 <I2C_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0d1      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2221      	movs	r2, #33	; 0x21
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2240      	movs	r2, #64	; 0x40
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a3a      	ldr	r2, [r7, #32]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006074:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800607c:	88f8      	ldrh	r0, [r7, #6]
 800607e:	893a      	ldrh	r2, [r7, #8]
 8006080:	8979      	ldrh	r1, [r7, #10]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4603      	mov	r3, r0
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f8b9 	bl	8006204 <I2C_RequestMemoryWrite>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0a9      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2bff      	cmp	r3, #255	; 0xff
 80060ac:	d90e      	bls.n	80060cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	22ff      	movs	r2, #255	; 0xff
 80060b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	8979      	ldrh	r1, [r7, #10]
 80060bc:	2300      	movs	r3, #0
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fa37 	bl	8006538 <I2C_TransferConfig>
 80060ca:	e00f      	b.n	80060ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	8979      	ldrh	r1, [r7, #10]
 80060de:	2300      	movs	r3, #0
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fa26 	bl	8006538 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f93f 	bl	8006374 <I2C_WaitOnTXISFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e07b      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	781a      	ldrb	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d034      	beq.n	80061a4 <HAL_I2C_Mem_Write+0x1c8>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613e:	2b00      	cmp	r3, #0
 8006140:	d130      	bne.n	80061a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	2200      	movs	r2, #0
 800614a:	2180      	movs	r1, #128	; 0x80
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f8d1 	bl	80062f4 <I2C_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e04d      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	2bff      	cmp	r3, #255	; 0xff
 8006164:	d90e      	bls.n	8006184 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006170:	b2da      	uxtb	r2, r3
 8006172:	8979      	ldrh	r1, [r7, #10]
 8006174:	2300      	movs	r3, #0
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f9db 	bl	8006538 <I2C_TransferConfig>
 8006182:	e00f      	b.n	80061a4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006192:	b2da      	uxtb	r2, r3
 8006194:	8979      	ldrh	r1, [r7, #10]
 8006196:	2300      	movs	r3, #0
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f9ca 	bl	8006538 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d19e      	bne.n	80060ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 f91e 	bl	80063f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e01a      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2220      	movs	r2, #32
 80061c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <HAL_I2C_Mem_Write+0x224>)
 80061d6:	400b      	ands	r3, r1
 80061d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e000      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
  }
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	fe00e800 	.word	0xfe00e800

08006204 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	8979      	ldrh	r1, [r7, #10]
 8006224:	4b20      	ldr	r3, [pc, #128]	; (80062a8 <I2C_RequestMemoryWrite+0xa4>)
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f983 	bl	8006538 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	69b9      	ldr	r1, [r7, #24]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f89c 	bl	8006374 <I2C_WaitOnTXISFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e02c      	b.n	80062a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d105      	bne.n	8006258 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800624c:	893b      	ldrh	r3, [r7, #8]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	629a      	str	r2, [r3, #40]	; 0x28
 8006256:	e015      	b.n	8006284 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006258:	893b      	ldrh	r3, [r7, #8]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	b29b      	uxth	r3, r3
 800625e:	b2da      	uxtb	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f882 	bl	8006374 <I2C_WaitOnTXISFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e012      	b.n	80062a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800627a:	893b      	ldrh	r3, [r7, #8]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2200      	movs	r2, #0
 800628c:	2180      	movs	r1, #128	; 0x80
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f830 	bl	80062f4 <I2C_WaitOnFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	80002000 	.word	0x80002000

080062ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d103      	bne.n	80062ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d007      	beq.n	80062e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	619a      	str	r2, [r3, #24]
  }
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	4613      	mov	r3, r2
 8006302:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006304:	e022      	b.n	800634c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d01e      	beq.n	800634c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630e:	f7fb fcdd 	bl	8001ccc <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d113      	bne.n	800634c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e00f      	b.n	800636c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4013      	ands	r3, r2
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	429a      	cmp	r2, r3
 800635a:	bf0c      	ite	eq
 800635c:	2301      	moveq	r3, #1
 800635e:	2300      	movne	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	429a      	cmp	r2, r3
 8006368:	d0cd      	beq.n	8006306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006380:	e02c      	b.n	80063dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f870 	bl	800646c <I2C_IsAcknowledgeFailed>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e02a      	b.n	80063ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d01e      	beq.n	80063dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639e:	f7fb fc95 	bl	8001ccc <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d302      	bcc.n	80063b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d113      	bne.n	80063dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b8:	f043 0220 	orr.w	r2, r3, #32
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e007      	b.n	80063ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d1cb      	bne.n	8006382 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006400:	e028      	b.n	8006454 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f830 	bl	800646c <I2C_IsAcknowledgeFailed>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e026      	b.n	8006464 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006416:	f7fb fc59 	bl	8001ccc <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	429a      	cmp	r2, r3
 8006424:	d302      	bcc.n	800642c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d113      	bne.n	8006454 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006430:	f043 0220 	orr.w	r2, r3, #32
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e007      	b.n	8006464 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b20      	cmp	r3, #32
 8006460:	d1cf      	bne.n	8006402 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f003 0310 	and.w	r3, r3, #16
 8006482:	2b10      	cmp	r3, #16
 8006484:	d151      	bne.n	800652a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006486:	e022      	b.n	80064ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d01e      	beq.n	80064ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006490:	f7fb fc1c 	bl	8001ccc <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	d302      	bcc.n	80064a6 <I2C_IsAcknowledgeFailed+0x3a>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d113      	bne.n	80064ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064aa:	f043 0220 	orr.w	r2, r3, #32
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e02e      	b.n	800652c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d1d5      	bne.n	8006488 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2210      	movs	r2, #16
 80064e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2220      	movs	r2, #32
 80064ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f7ff fedd 	bl	80062ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6859      	ldr	r1, [r3, #4]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <I2C_IsAcknowledgeFailed+0xc8>)
 80064fe:	400b      	ands	r3, r1
 8006500:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	f043 0204 	orr.w	r2, r3, #4
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	fe00e800 	.word	0xfe00e800

08006538 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	460b      	mov	r3, r1
 8006544:	817b      	strh	r3, [r7, #10]
 8006546:	4613      	mov	r3, r2
 8006548:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	0d5b      	lsrs	r3, r3, #21
 8006554:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006558:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <I2C_TransferConfig+0x58>)
 800655a:	430b      	orrs	r3, r1
 800655c:	43db      	mvns	r3, r3
 800655e:	ea02 0103 	and.w	r1, r2, r3
 8006562:	897b      	ldrh	r3, [r7, #10]
 8006564:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006568:	7a7b      	ldrb	r3, [r7, #9]
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	431a      	orrs	r2, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	431a      	orrs	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	03ff63ff 	.word	0x03ff63ff

08006594 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d138      	bne.n	800661c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e032      	b.n	800661e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2224      	movs	r2, #36	; 0x24
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6819      	ldr	r1, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e000      	b.n	800661e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b20      	cmp	r3, #32
 800663e:	d139      	bne.n	80066b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800664a:	2302      	movs	r3, #2
 800664c:	e033      	b.n	80066b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2224      	movs	r2, #36	; 0x24
 800665a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0201 	bic.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800667c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80066cc:	4b19      	ldr	r3, [pc, #100]	; (8006734 <HAL_PWREx_ConfigSupply+0x70>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d00a      	beq.n	80066ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066d8:	4b16      	ldr	r3, [pc, #88]	; (8006734 <HAL_PWREx_ConfigSupply+0x70>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d001      	beq.n	80066ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e01f      	b.n	800672a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e01d      	b.n	800672a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066ee:	4b11      	ldr	r3, [pc, #68]	; (8006734 <HAL_PWREx_ConfigSupply+0x70>)
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f023 0207 	bic.w	r2, r3, #7
 80066f6:	490f      	ldr	r1, [pc, #60]	; (8006734 <HAL_PWREx_ConfigSupply+0x70>)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066fe:	f7fb fae5 	bl	8001ccc <HAL_GetTick>
 8006702:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006704:	e009      	b.n	800671a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006706:	f7fb fae1 	bl	8001ccc <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006714:	d901      	bls.n	800671a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e007      	b.n	800672a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_PWREx_ConfigSupply+0x70>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006726:	d1ee      	bne.n	8006706 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	58024800 	.word	0x58024800

08006738 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08c      	sub	sp, #48	; 0x30
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e3ff      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8087 	beq.w	8006866 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006758:	4b99      	ldr	r3, [pc, #612]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006762:	4b97      	ldr	r3, [pc, #604]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	2b10      	cmp	r3, #16
 800676c:	d007      	beq.n	800677e <HAL_RCC_OscConfig+0x46>
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	2b18      	cmp	r3, #24
 8006772:	d110      	bne.n	8006796 <HAL_RCC_OscConfig+0x5e>
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d10b      	bne.n	8006796 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800677e:	4b90      	ldr	r3, [pc, #576]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d06c      	beq.n	8006864 <HAL_RCC_OscConfig+0x12c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d168      	bne.n	8006864 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e3d9      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679e:	d106      	bne.n	80067ae <HAL_RCC_OscConfig+0x76>
 80067a0:	4b87      	ldr	r3, [pc, #540]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a86      	ldr	r2, [pc, #536]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	e02e      	b.n	800680c <HAL_RCC_OscConfig+0xd4>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x98>
 80067b6:	4b82      	ldr	r3, [pc, #520]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a81      	ldr	r2, [pc, #516]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	4b7f      	ldr	r3, [pc, #508]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a7e      	ldr	r2, [pc, #504]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e01d      	b.n	800680c <HAL_RCC_OscConfig+0xd4>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d8:	d10c      	bne.n	80067f4 <HAL_RCC_OscConfig+0xbc>
 80067da:	4b79      	ldr	r3, [pc, #484]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a78      	ldr	r2, [pc, #480]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4b76      	ldr	r3, [pc, #472]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a75      	ldr	r2, [pc, #468]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	e00b      	b.n	800680c <HAL_RCC_OscConfig+0xd4>
 80067f4:	4b72      	ldr	r3, [pc, #456]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a71      	ldr	r2, [pc, #452]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80067fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	4b6f      	ldr	r3, [pc, #444]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a6e      	ldr	r2, [pc, #440]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800680a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d013      	beq.n	800683c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7fb fa5a 	bl	8001ccc <HAL_GetTick>
 8006818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800681c:	f7fb fa56 	bl	8001ccc <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b64      	cmp	r3, #100	; 0x64
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e38d      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800682e:	4b64      	ldr	r3, [pc, #400]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0xe4>
 800683a:	e014      	b.n	8006866 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fb fa46 	bl	8001ccc <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006844:	f7fb fa42 	bl	8001ccc <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b64      	cmp	r3, #100	; 0x64
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e379      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006856:	4b5a      	ldr	r3, [pc, #360]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x10c>
 8006862:	e000      	b.n	8006866 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 80ae 	beq.w	80069d0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006874:	4b52      	ldr	r3, [pc, #328]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800687c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800687e:	4b50      	ldr	r3, [pc, #320]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d007      	beq.n	800689a <HAL_RCC_OscConfig+0x162>
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	2b18      	cmp	r3, #24
 800688e:	d13a      	bne.n	8006906 <HAL_RCC_OscConfig+0x1ce>
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d135      	bne.n	8006906 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800689a:	4b49      	ldr	r3, [pc, #292]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_RCC_OscConfig+0x17a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e34b      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b2:	f7fb fa39 	bl	8001d28 <HAL_GetREVID>
 80068b6:	4602      	mov	r2, r0
 80068b8:	f241 0303 	movw	r3, #4099	; 0x1003
 80068bc:	429a      	cmp	r2, r3
 80068be:	d817      	bhi.n	80068f0 <HAL_RCC_OscConfig+0x1b8>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d108      	bne.n	80068da <HAL_RCC_OscConfig+0x1a2>
 80068c8:	4b3d      	ldr	r3, [pc, #244]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80068d0:	4a3b      	ldr	r2, [pc, #236]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80068d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068d8:	e07a      	b.n	80069d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068da:	4b39      	ldr	r3, [pc, #228]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	031b      	lsls	r3, r3, #12
 80068e8:	4935      	ldr	r1, [pc, #212]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068ee:	e06f      	b.n	80069d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f0:	4b33      	ldr	r3, [pc, #204]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	061b      	lsls	r3, r3, #24
 80068fe:	4930      	ldr	r1, [pc, #192]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006900:	4313      	orrs	r3, r2
 8006902:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006904:	e064      	b.n	80069d0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d045      	beq.n	800699a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800690e:	4b2c      	ldr	r3, [pc, #176]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f023 0219 	bic.w	r2, r3, #25
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	4929      	ldr	r1, [pc, #164]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 800691c:	4313      	orrs	r3, r2
 800691e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006920:	f7fb f9d4 	bl	8001ccc <HAL_GetTick>
 8006924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006928:	f7fb f9d0 	bl	8001ccc <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e307      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800693a:	4b21      	ldr	r3, [pc, #132]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006946:	f7fb f9ef 	bl	8001d28 <HAL_GetREVID>
 800694a:	4602      	mov	r2, r0
 800694c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006950:	429a      	cmp	r2, r3
 8006952:	d817      	bhi.n	8006984 <HAL_RCC_OscConfig+0x24c>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d108      	bne.n	800696e <HAL_RCC_OscConfig+0x236>
 800695c:	4b18      	ldr	r3, [pc, #96]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006964:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800696a:	6053      	str	r3, [r2, #4]
 800696c:	e030      	b.n	80069d0 <HAL_RCC_OscConfig+0x298>
 800696e:	4b14      	ldr	r3, [pc, #80]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	031b      	lsls	r3, r3, #12
 800697c:	4910      	ldr	r1, [pc, #64]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 800697e:	4313      	orrs	r3, r2
 8006980:	604b      	str	r3, [r1, #4]
 8006982:	e025      	b.n	80069d0 <HAL_RCC_OscConfig+0x298>
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	061b      	lsls	r3, r3, #24
 8006992:	490b      	ldr	r1, [pc, #44]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 8006994:	4313      	orrs	r3, r2
 8006996:	604b      	str	r3, [r1, #4]
 8006998:	e01a      	b.n	80069d0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699a:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a08      	ldr	r2, [pc, #32]	; (80069c0 <HAL_RCC_OscConfig+0x288>)
 80069a0:	f023 0301 	bic.w	r3, r3, #1
 80069a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a6:	f7fb f991 	bl	8001ccc <HAL_GetTick>
 80069aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069ac:	e00a      	b.n	80069c4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ae:	f7fb f98d 	bl	8001ccc <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d903      	bls.n	80069c4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e2c4      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
 80069c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069c4:	4ba4      	ldr	r3, [pc, #656]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1ee      	bne.n	80069ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80a9 	beq.w	8006b30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069de:	4b9e      	ldr	r3, [pc, #632]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069e8:	4b9b      	ldr	r3, [pc, #620]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d007      	beq.n	8006a04 <HAL_RCC_OscConfig+0x2cc>
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b18      	cmp	r3, #24
 80069f8:	d13a      	bne.n	8006a70 <HAL_RCC_OscConfig+0x338>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d135      	bne.n	8006a70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a04:	4b94      	ldr	r3, [pc, #592]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_RCC_OscConfig+0x2e4>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	d001      	beq.n	8006a1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e296      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a1c:	f7fb f984 	bl	8001d28 <HAL_GetREVID>
 8006a20:	4602      	mov	r2, r0
 8006a22:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d817      	bhi.n	8006a5a <HAL_RCC_OscConfig+0x322>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d108      	bne.n	8006a44 <HAL_RCC_OscConfig+0x30c>
 8006a32:	4b89      	ldr	r3, [pc, #548]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a3a:	4a87      	ldr	r2, [pc, #540]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a42:	e075      	b.n	8006b30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a44:	4b84      	ldr	r3, [pc, #528]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	069b      	lsls	r3, r3, #26
 8006a52:	4981      	ldr	r1, [pc, #516]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a58:	e06a      	b.n	8006b30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a5a:	4b7f      	ldr	r3, [pc, #508]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	061b      	lsls	r3, r3, #24
 8006a68:	497b      	ldr	r1, [pc, #492]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a6e:	e05f      	b.n	8006b30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d042      	beq.n	8006afe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a78:	4b77      	ldr	r3, [pc, #476]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a76      	ldr	r2, [pc, #472]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fb f922 	bl	8001ccc <HAL_GetTick>
 8006a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006a8c:	f7fb f91e 	bl	8001ccc <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e255      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a9e:	4b6e      	ldr	r3, [pc, #440]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006aaa:	f7fb f93d 	bl	8001d28 <HAL_GetREVID>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d817      	bhi.n	8006ae8 <HAL_RCC_OscConfig+0x3b0>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d108      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x39a>
 8006ac0:	4b65      	ldr	r3, [pc, #404]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ac8:	4a63      	ldr	r2, [pc, #396]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ace:	6053      	str	r3, [r2, #4]
 8006ad0:	e02e      	b.n	8006b30 <HAL_RCC_OscConfig+0x3f8>
 8006ad2:	4b61      	ldr	r3, [pc, #388]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	069b      	lsls	r3, r3, #26
 8006ae0:	495d      	ldr	r1, [pc, #372]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	604b      	str	r3, [r1, #4]
 8006ae6:	e023      	b.n	8006b30 <HAL_RCC_OscConfig+0x3f8>
 8006ae8:	4b5b      	ldr	r3, [pc, #364]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	061b      	lsls	r3, r3, #24
 8006af6:	4958      	ldr	r1, [pc, #352]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60cb      	str	r3, [r1, #12]
 8006afc:	e018      	b.n	8006b30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006afe:	4b56      	ldr	r3, [pc, #344]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a55      	ldr	r2, [pc, #340]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0a:	f7fb f8df 	bl	8001ccc <HAL_GetTick>
 8006b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b12:	f7fb f8db 	bl	8001ccc <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e212      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b24:	4b4c      	ldr	r3, [pc, #304]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f0      	bne.n	8006b12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d036      	beq.n	8006baa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d019      	beq.n	8006b78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b44:	4b44      	ldr	r3, [pc, #272]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b48:	4a43      	ldr	r2, [pc, #268]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b50:	f7fb f8bc 	bl	8001ccc <HAL_GetTick>
 8006b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b58:	f7fb f8b8 	bl	8001ccc <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e1ef      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b6a:	4b3b      	ldr	r3, [pc, #236]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0x420>
 8006b76:	e018      	b.n	8006baa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b78:	4b37      	ldr	r3, [pc, #220]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b7c:	4a36      	ldr	r2, [pc, #216]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b84:	f7fb f8a2 	bl	8001ccc <HAL_GetTick>
 8006b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b8c:	f7fb f89e 	bl	8001ccc <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e1d5      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b9e:	4b2e      	ldr	r3, [pc, #184]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d036      	beq.n	8006c24 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d019      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bbe:	4b26      	ldr	r3, [pc, #152]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a25      	ldr	r2, [pc, #148]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bca:	f7fb f87f 	bl	8001ccc <HAL_GetTick>
 8006bce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006bd2:	f7fb f87b 	bl	8001ccc <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e1b2      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006be4:	4b1c      	ldr	r3, [pc, #112]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x49a>
 8006bf0:	e018      	b.n	8006c24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bfe:	f7fb f865 	bl	8001ccc <HAL_GetTick>
 8006c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c06:	f7fb f861 	bl	8001ccc <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e198      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c18:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <HAL_RCC_OscConfig+0x520>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1f0      	bne.n	8006c06 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8085 	beq.w	8006d3c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c32:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <HAL_RCC_OscConfig+0x524>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a09      	ldr	r2, [pc, #36]	; (8006c5c <HAL_RCC_OscConfig+0x524>)
 8006c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c3e:	f7fb f845 	bl	8001ccc <HAL_GetTick>
 8006c42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c44:	e00c      	b.n	8006c60 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c46:	f7fb f841 	bl	8001ccc <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b64      	cmp	r3, #100	; 0x64
 8006c52:	d905      	bls.n	8006c60 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e178      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
 8006c58:	58024400 	.word	0x58024400
 8006c5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c60:	4b96      	ldr	r3, [pc, #600]	; (8006ebc <HAL_RCC_OscConfig+0x784>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0ec      	beq.n	8006c46 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d106      	bne.n	8006c82 <HAL_RCC_OscConfig+0x54a>
 8006c74:	4b92      	ldr	r3, [pc, #584]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c78:	4a91      	ldr	r2, [pc, #580]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c80:	e02d      	b.n	8006cde <HAL_RCC_OscConfig+0x5a6>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x56c>
 8006c8a:	4b8d      	ldr	r3, [pc, #564]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	4a8c      	ldr	r2, [pc, #560]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	6713      	str	r3, [r2, #112]	; 0x70
 8006c96:	4b8a      	ldr	r3, [pc, #552]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4a89      	ldr	r2, [pc, #548]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006c9c:	f023 0304 	bic.w	r3, r3, #4
 8006ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca2:	e01c      	b.n	8006cde <HAL_RCC_OscConfig+0x5a6>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	d10c      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x58e>
 8006cac:	4b84      	ldr	r3, [pc, #528]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb0:	4a83      	ldr	r2, [pc, #524]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006cb2:	f043 0304 	orr.w	r3, r3, #4
 8006cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb8:	4b81      	ldr	r3, [pc, #516]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbc:	4a80      	ldr	r2, [pc, #512]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc4:	e00b      	b.n	8006cde <HAL_RCC_OscConfig+0x5a6>
 8006cc6:	4b7e      	ldr	r3, [pc, #504]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cca:	4a7d      	ldr	r2, [pc, #500]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd2:	4b7b      	ldr	r3, [pc, #492]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	4a7a      	ldr	r2, [pc, #488]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006cd8:	f023 0304 	bic.w	r3, r3, #4
 8006cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d015      	beq.n	8006d12 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce6:	f7fa fff1 	bl	8001ccc <HAL_GetTick>
 8006cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cec:	e00a      	b.n	8006d04 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fa ffed 	bl	8001ccc <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e122      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d04:	4b6e      	ldr	r3, [pc, #440]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0ee      	beq.n	8006cee <HAL_RCC_OscConfig+0x5b6>
 8006d10:	e014      	b.n	8006d3c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d12:	f7fa ffdb 	bl	8001ccc <HAL_GetTick>
 8006d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d18:	e00a      	b.n	8006d30 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d1a:	f7fa ffd7 	bl	8001ccc <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e10c      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d30:	4b63      	ldr	r3, [pc, #396]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1ee      	bne.n	8006d1a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8101 	beq.w	8006f48 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d46:	4b5e      	ldr	r3, [pc, #376]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d4e:	2b18      	cmp	r3, #24
 8006d50:	f000 80bc 	beq.w	8006ecc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	f040 8095 	bne.w	8006e88 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d5e:	4b58      	ldr	r3, [pc, #352]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a57      	ldr	r2, [pc, #348]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6a:	f7fa ffaf 	bl	8001ccc <HAL_GetTick>
 8006d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d72:	f7fa ffab 	bl	8001ccc <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e0e2      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d84:	4b4e      	ldr	r3, [pc, #312]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f0      	bne.n	8006d72 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d90:	4b4b      	ldr	r3, [pc, #300]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d94:	4b4b      	ldr	r3, [pc, #300]	; (8006ec4 <HAL_RCC_OscConfig+0x78c>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006da0:	0112      	lsls	r2, r2, #4
 8006da2:	430a      	orrs	r2, r1
 8006da4:	4946      	ldr	r1, [pc, #280]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	628b      	str	r3, [r1, #40]	; 0x28
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	3b01      	subs	r3, #1
 8006db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db8:	3b01      	subs	r3, #1
 8006dba:	025b      	lsls	r3, r3, #9
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	041b      	lsls	r3, r3, #16
 8006dc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	061b      	lsls	r3, r3, #24
 8006dd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006dda:	4939      	ldr	r1, [pc, #228]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006de0:	4b37      	ldr	r3, [pc, #220]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	4a36      	ldr	r2, [pc, #216]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006de6:	f023 0301 	bic.w	r3, r3, #1
 8006dea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006dec:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df0:	4b35      	ldr	r3, [pc, #212]	; (8006ec8 <HAL_RCC_OscConfig+0x790>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006df8:	00d2      	lsls	r2, r2, #3
 8006dfa:	4931      	ldr	r1, [pc, #196]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e00:	4b2f      	ldr	r3, [pc, #188]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	f023 020c 	bic.w	r2, r3, #12
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	492c      	ldr	r1, [pc, #176]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e12:	4b2b      	ldr	r3, [pc, #172]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	f023 0202 	bic.w	r2, r3, #2
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	4928      	ldr	r1, [pc, #160]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e24:	4b26      	ldr	r3, [pc, #152]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	4a25      	ldr	r2, [pc, #148]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e30:	4b23      	ldr	r3, [pc, #140]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a22      	ldr	r2, [pc, #136]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e3c:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006e48:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e54:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a19      	ldr	r2, [pc, #100]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e60:	f7fa ff34 	bl	8001ccc <HAL_GetTick>
 8006e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e68:	f7fa ff30 	bl	8001ccc <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e067      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e7a:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0f0      	beq.n	8006e68 <HAL_RCC_OscConfig+0x730>
 8006e86:	e05f      	b.n	8006f48 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a0c      	ldr	r2, [pc, #48]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fa ff1a 	bl	8001ccc <HAL_GetTick>
 8006e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e9c:	f7fa ff16 	bl	8001ccc <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e04d      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eae:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <HAL_RCC_OscConfig+0x788>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x764>
 8006eba:	e045      	b.n	8006f48 <HAL_RCC_OscConfig+0x810>
 8006ebc:	58024800 	.word	0x58024800
 8006ec0:	58024400 	.word	0x58024400
 8006ec4:	fffffc0c 	.word	0xfffffc0c
 8006ec8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ecc:	4b21      	ldr	r3, [pc, #132]	; (8006f54 <HAL_RCC_OscConfig+0x81c>)
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ed2:	4b20      	ldr	r3, [pc, #128]	; (8006f54 <HAL_RCC_OscConfig+0x81c>)
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d031      	beq.n	8006f44 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f003 0203 	and.w	r2, r3, #3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d12a      	bne.n	8006f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	091b      	lsrs	r3, r3, #4
 8006ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d122      	bne.n	8006f44 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d11a      	bne.n	8006f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	0a5b      	lsrs	r3, r3, #9
 8006f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d111      	bne.n	8006f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d108      	bne.n	8006f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	0e1b      	lsrs	r3, r3, #24
 8006f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d001      	beq.n	8006f48 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3730      	adds	r7, #48	; 0x30
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	58024400 	.word	0x58024400

08006f58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e19c      	b.n	80072a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f6c:	4b8a      	ldr	r3, [pc, #552]	; (8007198 <HAL_RCC_ClockConfig+0x240>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d910      	bls.n	8006f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7a:	4b87      	ldr	r3, [pc, #540]	; (8007198 <HAL_RCC_ClockConfig+0x240>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f023 020f 	bic.w	r2, r3, #15
 8006f82:	4985      	ldr	r1, [pc, #532]	; (8007198 <HAL_RCC_ClockConfig+0x240>)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8a:	4b83      	ldr	r3, [pc, #524]	; (8007198 <HAL_RCC_ClockConfig+0x240>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e184      	b.n	80072a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d010      	beq.n	8006fca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691a      	ldr	r2, [r3, #16]
 8006fac:	4b7b      	ldr	r3, [pc, #492]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d908      	bls.n	8006fca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fb8:	4b78      	ldr	r3, [pc, #480]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	4975      	ldr	r1, [pc, #468]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d010      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695a      	ldr	r2, [r3, #20]
 8006fda:	4b70      	ldr	r3, [pc, #448]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d908      	bls.n	8006ff8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fe6:	4b6d      	ldr	r3, [pc, #436]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	496a      	ldr	r1, [pc, #424]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b00      	cmp	r3, #0
 8007002:	d010      	beq.n	8007026 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	4b64      	ldr	r3, [pc, #400]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007010:	429a      	cmp	r2, r3
 8007012:	d908      	bls.n	8007026 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007014:	4b61      	ldr	r3, [pc, #388]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	495e      	ldr	r1, [pc, #376]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007022:	4313      	orrs	r3, r2
 8007024:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d010      	beq.n	8007054 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69da      	ldr	r2, [r3, #28]
 8007036:	4b59      	ldr	r3, [pc, #356]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800703e:	429a      	cmp	r2, r3
 8007040:	d908      	bls.n	8007054 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007042:	4b56      	ldr	r3, [pc, #344]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	4953      	ldr	r1, [pc, #332]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007050:	4313      	orrs	r3, r2
 8007052:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d010      	beq.n	8007082 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	4b4d      	ldr	r3, [pc, #308]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	429a      	cmp	r2, r3
 800706e:	d908      	bls.n	8007082 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007070:	4b4a      	ldr	r3, [pc, #296]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	f023 020f 	bic.w	r2, r3, #15
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4947      	ldr	r1, [pc, #284]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 800707e:	4313      	orrs	r3, r2
 8007080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d055      	beq.n	800713a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800708e:	4b43      	ldr	r3, [pc, #268]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	4940      	ldr	r1, [pc, #256]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 800709c:	4313      	orrs	r3, r2
 800709e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d107      	bne.n	80070b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070a8:	4b3c      	ldr	r3, [pc, #240]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d121      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e0f6      	b.n	80072a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d107      	bne.n	80070d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070c0:	4b36      	ldr	r3, [pc, #216]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d115      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0ea      	b.n	80072a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d107      	bne.n	80070e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070d8:	4b30      	ldr	r3, [pc, #192]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d109      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0de      	b.n	80072a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070e8:	4b2c      	ldr	r3, [pc, #176]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e0d6      	b.n	80072a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070f8:	4b28      	ldr	r3, [pc, #160]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f023 0207 	bic.w	r2, r3, #7
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	4925      	ldr	r1, [pc, #148]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007106:	4313      	orrs	r3, r2
 8007108:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710a:	f7fa fddf 	bl	8001ccc <HAL_GetTick>
 800710e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007110:	e00a      	b.n	8007128 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007112:	f7fa fddb 	bl	8001ccc <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007120:	4293      	cmp	r3, r2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e0be      	b.n	80072a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007128:	4b1c      	ldr	r3, [pc, #112]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	429a      	cmp	r2, r3
 8007138:	d1eb      	bne.n	8007112 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d010      	beq.n	8007168 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	4b14      	ldr	r3, [pc, #80]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	429a      	cmp	r2, r3
 8007154:	d208      	bcs.n	8007168 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007156:	4b11      	ldr	r3, [pc, #68]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f023 020f 	bic.w	r2, r3, #15
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	490e      	ldr	r1, [pc, #56]	; (800719c <HAL_RCC_ClockConfig+0x244>)
 8007164:	4313      	orrs	r3, r2
 8007166:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007168:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_RCC_ClockConfig+0x240>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d214      	bcs.n	80071a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007176:	4b08      	ldr	r3, [pc, #32]	; (8007198 <HAL_RCC_ClockConfig+0x240>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f023 020f 	bic.w	r2, r3, #15
 800717e:	4906      	ldr	r1, [pc, #24]	; (8007198 <HAL_RCC_ClockConfig+0x240>)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	4313      	orrs	r3, r2
 8007184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007186:	4b04      	ldr	r3, [pc, #16]	; (8007198 <HAL_RCC_ClockConfig+0x240>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d005      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e086      	b.n	80072a6 <HAL_RCC_ClockConfig+0x34e>
 8007198:	52002000 	.word	0x52002000
 800719c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d010      	beq.n	80071ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	4b3f      	ldr	r3, [pc, #252]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d208      	bcs.n	80071ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071bc:	4b3c      	ldr	r3, [pc, #240]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	4939      	ldr	r1, [pc, #228]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d010      	beq.n	80071fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695a      	ldr	r2, [r3, #20]
 80071de:	4b34      	ldr	r3, [pc, #208]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d208      	bcs.n	80071fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071ea:	4b31      	ldr	r3, [pc, #196]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	492e      	ldr	r1, [pc, #184]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	d010      	beq.n	800722a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	4b28      	ldr	r3, [pc, #160]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007214:	429a      	cmp	r2, r3
 8007216:	d208      	bcs.n	800722a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	4922      	ldr	r1, [pc, #136]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 8007226:	4313      	orrs	r3, r2
 8007228:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d010      	beq.n	8007258 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	4b1d      	ldr	r3, [pc, #116]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007242:	429a      	cmp	r2, r3
 8007244:	d208      	bcs.n	8007258 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007246:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	4917      	ldr	r1, [pc, #92]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 8007254:	4313      	orrs	r3, r2
 8007256:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007258:	f000 f89e 	bl	8007398 <HAL_RCC_GetSysClockFreq>
 800725c:	4601      	mov	r1, r0
 800725e:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	f003 030f 	and.w	r3, r3, #15
 8007268:	4a12      	ldr	r2, [pc, #72]	; (80072b4 <HAL_RCC_ClockConfig+0x35c>)
 800726a:	5cd3      	ldrb	r3, [r2, r3]
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	fa21 f303 	lsr.w	r3, r1, r3
 8007274:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007276:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <HAL_RCC_ClockConfig+0x358>)
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	4a0d      	ldr	r2, [pc, #52]	; (80072b4 <HAL_RCC_ClockConfig+0x35c>)
 8007280:	5cd3      	ldrb	r3, [r2, r3]
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	fa22 f303 	lsr.w	r3, r2, r3
 800728c:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <HAL_RCC_ClockConfig+0x360>)
 800728e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007290:	4a0a      	ldr	r2, [pc, #40]	; (80072bc <HAL_RCC_ClockConfig+0x364>)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007296:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <HAL_RCC_ClockConfig+0x368>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4618      	mov	r0, r3
 800729c:	f7fa fccc 	bl	8001c38 <HAL_InitTick>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	58024400 	.word	0x58024400
 80072b4:	0800ac38 	.word	0x0800ac38
 80072b8:	24000004 	.word	0x24000004
 80072bc:	24000000 	.word	0x24000000
 80072c0:	24000010 	.word	0x24000010

080072c4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08c      	sub	sp, #48	; 0x30
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d12a      	bne.n	800732c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80072d6:	4b2d      	ldr	r3, [pc, #180]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 80072d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072dc:	4a2b      	ldr	r2, [pc, #172]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 80072de:	f043 0301 	orr.w	r3, r3, #1
 80072e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80072e6:	4b29      	ldr	r3, [pc, #164]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 80072e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	61bb      	str	r3, [r7, #24]
 80072f2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fa:	2302      	movs	r3, #2
 80072fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072fe:	2303      	movs	r3, #3
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007302:	2300      	movs	r3, #0
 8007304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007306:	2300      	movs	r3, #0
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800730a:	f107 031c 	add.w	r3, r7, #28
 800730e:	4619      	mov	r1, r3
 8007310:	481f      	ldr	r0, [pc, #124]	; (8007390 <HAL_RCC_MCOConfig+0xcc>)
 8007312:	f7fe fbf1 	bl	8005af8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007316:	4b1d      	ldr	r3, [pc, #116]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	430b      	orrs	r3, r1
 8007324:	4919      	ldr	r1, [pc, #100]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 8007326:	4313      	orrs	r3, r2
 8007328:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800732a:	e02a      	b.n	8007382 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800732c:	4b17      	ldr	r3, [pc, #92]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 800732e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007332:	4a16      	ldr	r2, [pc, #88]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 8007334:	f043 0304 	orr.w	r3, r3, #4
 8007338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800733c:	4b13      	ldr	r3, [pc, #76]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 800733e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800734a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800734e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007350:	2302      	movs	r3, #2
 8007352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007354:	2303      	movs	r3, #3
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007358:	2300      	movs	r3, #0
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800735c:	2300      	movs	r3, #0
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007360:	f107 031c 	add.w	r3, r7, #28
 8007364:	4619      	mov	r1, r3
 8007366:	480b      	ldr	r0, [pc, #44]	; (8007394 <HAL_RCC_MCOConfig+0xd0>)
 8007368:	f7fe fbc6 	bl	8005af8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800736c:	4b07      	ldr	r3, [pc, #28]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	01d9      	lsls	r1, r3, #7
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	430b      	orrs	r3, r1
 800737c:	4903      	ldr	r1, [pc, #12]	; (800738c <HAL_RCC_MCOConfig+0xc8>)
 800737e:	4313      	orrs	r3, r2
 8007380:	610b      	str	r3, [r1, #16]
}
 8007382:	bf00      	nop
 8007384:	3730      	adds	r7, #48	; 0x30
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	58024400 	.word	0x58024400
 8007390:	58020000 	.word	0x58020000
 8007394:	58020800 	.word	0x58020800

08007398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007398:	b480      	push	{r7}
 800739a:	b089      	sub	sp, #36	; 0x24
 800739c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800739e:	4baf      	ldr	r3, [pc, #700]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073a6:	2b18      	cmp	r3, #24
 80073a8:	f200 814e 	bhi.w	8007648 <HAL_RCC_GetSysClockFreq+0x2b0>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	08007419 	.word	0x08007419
 80073b8:	08007649 	.word	0x08007649
 80073bc:	08007649 	.word	0x08007649
 80073c0:	08007649 	.word	0x08007649
 80073c4:	08007649 	.word	0x08007649
 80073c8:	08007649 	.word	0x08007649
 80073cc:	08007649 	.word	0x08007649
 80073d0:	08007649 	.word	0x08007649
 80073d4:	0800743f 	.word	0x0800743f
 80073d8:	08007649 	.word	0x08007649
 80073dc:	08007649 	.word	0x08007649
 80073e0:	08007649 	.word	0x08007649
 80073e4:	08007649 	.word	0x08007649
 80073e8:	08007649 	.word	0x08007649
 80073ec:	08007649 	.word	0x08007649
 80073f0:	08007649 	.word	0x08007649
 80073f4:	08007445 	.word	0x08007445
 80073f8:	08007649 	.word	0x08007649
 80073fc:	08007649 	.word	0x08007649
 8007400:	08007649 	.word	0x08007649
 8007404:	08007649 	.word	0x08007649
 8007408:	08007649 	.word	0x08007649
 800740c:	08007649 	.word	0x08007649
 8007410:	08007649 	.word	0x08007649
 8007414:	0800744b 	.word	0x0800744b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007418:	4b90      	ldr	r3, [pc, #576]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d009      	beq.n	8007438 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007424:	4b8d      	ldr	r3, [pc, #564]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	08db      	lsrs	r3, r3, #3
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	4a8c      	ldr	r2, [pc, #560]	; (8007660 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
 8007434:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007436:	e10a      	b.n	800764e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007438:	4b89      	ldr	r3, [pc, #548]	; (8007660 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800743a:	61bb      	str	r3, [r7, #24]
    break;
 800743c:	e107      	b.n	800764e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800743e:	4b89      	ldr	r3, [pc, #548]	; (8007664 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007440:	61bb      	str	r3, [r7, #24]
    break;
 8007442:	e104      	b.n	800764e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007444:	4b88      	ldr	r3, [pc, #544]	; (8007668 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007446:	61bb      	str	r3, [r7, #24]
    break;
 8007448:	e101      	b.n	800764e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800744a:	4b84      	ldr	r3, [pc, #528]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007454:	4b81      	ldr	r3, [pc, #516]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	091b      	lsrs	r3, r3, #4
 800745a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800745e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007460:	4b7e      	ldr	r3, [pc, #504]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800746a:	4b7c      	ldr	r3, [pc, #496]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800746c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746e:	08db      	lsrs	r3, r3, #3
 8007470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	fb02 f303 	mul.w	r3, r2, r3
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 80da 	beq.w	8007642 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d05a      	beq.n	800754a <HAL_RCC_GetSysClockFreq+0x1b2>
 8007494:	2b01      	cmp	r3, #1
 8007496:	d302      	bcc.n	800749e <HAL_RCC_GetSysClockFreq+0x106>
 8007498:	2b02      	cmp	r3, #2
 800749a:	d078      	beq.n	800758e <HAL_RCC_GetSysClockFreq+0x1f6>
 800749c:	e099      	b.n	80075d2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800749e:	4b6f      	ldr	r3, [pc, #444]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d02d      	beq.n	8007506 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074aa:	4b6c      	ldr	r3, [pc, #432]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	08db      	lsrs	r3, r3, #3
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	4a6a      	ldr	r2, [pc, #424]	; (8007660 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80074b6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	ee07 3a90 	vmov	s15, r3
 80074cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d4:	4b61      	ldr	r3, [pc, #388]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800766c <HAL_RCC_GetSysClockFreq+0x2d4>
 80074ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007500:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007504:	e087      	b.n	8007616 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	ee07 3a90 	vmov	s15, r3
 800750c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007510:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007670 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007518:	4b50      	ldr	r3, [pc, #320]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007528:	ed97 6a02 	vldr	s12, [r7, #8]
 800752c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800766c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007544:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007548:	e065      	b.n	8007616 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	ee07 3a90 	vmov	s15, r3
 8007550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007554:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007674 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755c:	4b3f      	ldr	r3, [pc, #252]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007570:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800766c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758c:	e043      	b.n	8007616 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007598:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007678 <HAL_RCC_GetSysClockFreq+0x2e0>
 800759c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a0:	4b2e      	ldr	r3, [pc, #184]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a8:	ee07 3a90 	vmov	s15, r3
 80075ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80075b4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800766c <HAL_RCC_GetSysClockFreq+0x2d4>
 80075b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075d0:	e021      	b.n	8007616 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007674 <HAL_RCC_GetSysClockFreq+0x2dc>
 80075e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e4:	4b1d      	ldr	r3, [pc, #116]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ec:	ee07 3a90 	vmov	s15, r3
 80075f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80075f8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800766c <HAL_RCC_GetSysClockFreq+0x2d4>
 80075fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007614:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007616:	4b11      	ldr	r3, [pc, #68]	; (800765c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	0a5b      	lsrs	r3, r3, #9
 800761c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007620:	3301      	adds	r3, #1
 8007622:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800762e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800763a:	ee17 3a90 	vmov	r3, s15
 800763e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007640:	e005      	b.n	800764e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	61bb      	str	r3, [r7, #24]
    break;
 8007646:	e002      	b.n	800764e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007648:	4b06      	ldr	r3, [pc, #24]	; (8007664 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800764a:	61bb      	str	r3, [r7, #24]
    break;
 800764c:	bf00      	nop
  }

  return sysclockfreq;
 800764e:	69bb      	ldr	r3, [r7, #24]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3724      	adds	r7, #36	; 0x24
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	58024400 	.word	0x58024400
 8007660:	03d09000 	.word	0x03d09000
 8007664:	003d0900 	.word	0x003d0900
 8007668:	007a1200 	.word	0x007a1200
 800766c:	46000000 	.word	0x46000000
 8007670:	4c742400 	.word	0x4c742400
 8007674:	4a742400 	.word	0x4a742400
 8007678:	4af42400 	.word	0x4af42400

0800767c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007682:	f7ff fe89 	bl	8007398 <HAL_RCC_GetSysClockFreq>
 8007686:	4601      	mov	r1, r0
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <HAL_RCC_GetHCLKFreq+0x50>)
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	0a1b      	lsrs	r3, r3, #8
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	4a0f      	ldr	r2, [pc, #60]	; (80076d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007694:	5cd3      	ldrb	r3, [r2, r3]
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	fa21 f303 	lsr.w	r3, r1, r3
 800769e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <HAL_RCC_GetHCLKFreq+0x50>)
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80076aa:	5cd3      	ldrb	r3, [r2, r3]
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	fa22 f303 	lsr.w	r3, r2, r3
 80076b6:	4a07      	ldr	r2, [pc, #28]	; (80076d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80076b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076ba:	4a07      	ldr	r2, [pc, #28]	; (80076d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80076c0:	4b04      	ldr	r3, [pc, #16]	; (80076d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80076c2:	681b      	ldr	r3, [r3, #0]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	58024400 	.word	0x58024400
 80076d0:	0800ac38 	.word	0x0800ac38
 80076d4:	24000004 	.word	0x24000004
 80076d8:	24000000 	.word	0x24000000

080076dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80076e0:	f7ff ffcc 	bl	800767c <HAL_RCC_GetHCLKFreq>
 80076e4:	4601      	mov	r1, r0
 80076e6:	4b06      	ldr	r3, [pc, #24]	; (8007700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	091b      	lsrs	r3, r3, #4
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	4a04      	ldr	r2, [pc, #16]	; (8007704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076f2:	5cd3      	ldrb	r3, [r2, r3]
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	58024400 	.word	0x58024400
 8007704:	0800ac38 	.word	0x0800ac38

08007708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800770c:	f7ff ffb6 	bl	800767c <HAL_RCC_GetHCLKFreq>
 8007710:	4601      	mov	r1, r0
 8007712:	4b06      	ldr	r3, [pc, #24]	; (800772c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	4a04      	ldr	r2, [pc, #16]	; (8007730 <HAL_RCC_GetPCLK2Freq+0x28>)
 800771e:	5cd3      	ldrb	r3, [r2, r3]
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007728:	4618      	mov	r0, r3
 800772a:	bd80      	pop	{r7, pc}
 800772c:	58024400 	.word	0x58024400
 8007730:	0800ac38 	.word	0x0800ac38

08007734 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800773c:	2300      	movs	r3, #0
 800773e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007740:	2300      	movs	r3, #0
 8007742:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d03d      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007758:	d013      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800775a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800775e:	d802      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007764:	e01f      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800776a:	d013      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800776c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007770:	d01c      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007772:	e018      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007774:	4baf      	ldr	r3, [pc, #700]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	4aae      	ldr	r2, [pc, #696]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800777a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800777e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007780:	e015      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3304      	adds	r3, #4
 8007786:	2102      	movs	r1, #2
 8007788:	4618      	mov	r0, r3
 800778a:	f001 f96f 	bl	8008a6c <RCCEx_PLL2_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007792:	e00c      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3324      	adds	r3, #36	; 0x24
 8007798:	2102      	movs	r1, #2
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fa18 	bl	8008bd0 <RCCEx_PLL3_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077a4:	e003      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	75fb      	strb	r3, [r7, #23]
      break;
 80077aa:	e000      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80077ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d109      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80077b4:	4b9f      	ldr	r3, [pc, #636]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c0:	499c      	ldr	r1, [pc, #624]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	650b      	str	r3, [r1, #80]	; 0x50
 80077c6:	e001      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d03d      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d826      	bhi.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80077e0:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	080077fd 	.word	0x080077fd
 80077ec:	0800780b 	.word	0x0800780b
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	08007835 	.word	0x08007835
 80077f8:	08007835 	.word	0x08007835
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077fc:	4b8d      	ldr	r3, [pc, #564]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4a8c      	ldr	r2, [pc, #560]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007808:	e015      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3304      	adds	r3, #4
 800780e:	2100      	movs	r1, #0
 8007810:	4618      	mov	r0, r3
 8007812:	f001 f92b 	bl	8008a6c <RCCEx_PLL2_Config>
 8007816:	4603      	mov	r3, r0
 8007818:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800781a:	e00c      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3324      	adds	r3, #36	; 0x24
 8007820:	2100      	movs	r1, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f001 f9d4 	bl	8008bd0 <RCCEx_PLL3_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800782c:	e003      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
      break;
 8007832:	e000      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d109      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800783c:	4b7d      	ldr	r3, [pc, #500]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800783e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007840:	f023 0207 	bic.w	r2, r3, #7
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007848:	497a      	ldr	r1, [pc, #488]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800784a:	4313      	orrs	r3, r2
 800784c:	650b      	str	r3, [r1, #80]	; 0x50
 800784e:	e001      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800785c:	2b00      	cmp	r3, #0
 800785e:	d03e      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007864:	2b80      	cmp	r3, #128	; 0x80
 8007866:	d01c      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007868:	2b80      	cmp	r3, #128	; 0x80
 800786a:	d804      	bhi.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800786c:	2b00      	cmp	r3, #0
 800786e:	d008      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007870:	2b40      	cmp	r3, #64	; 0x40
 8007872:	d00d      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007874:	e01e      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007876:	2bc0      	cmp	r3, #192	; 0xc0
 8007878:	d01f      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x186>
 800787a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800787e:	d01e      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007880:	e018      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007882:	4b6c      	ldr	r3, [pc, #432]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	4a6b      	ldr	r2, [pc, #428]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800788c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800788e:	e017      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f001 f8e8 	bl	8008a6c <RCCEx_PLL2_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078a0:	e00e      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3324      	adds	r3, #36	; 0x24
 80078a6:	2100      	movs	r1, #0
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 f991 	bl	8008bd0 <RCCEx_PLL3_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078b2:	e005      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	75fb      	strb	r3, [r7, #23]
      break;
 80078b8:	e002      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80078ba:	bf00      	nop
 80078bc:	e000      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80078be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d109      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078c6:	4b5b      	ldr	r3, [pc, #364]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80078c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d2:	4958      	ldr	r1, [pc, #352]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	650b      	str	r3, [r1, #80]	; 0x50
 80078d8:	e001      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d044      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078f4:	d01f      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80078f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078fa:	d805      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007904:	d00e      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007906:	e01f      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007908:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800790c:	d01f      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800790e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007912:	d01e      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007914:	e018      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007916:	4b47      	ldr	r3, [pc, #284]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	4a46      	ldr	r2, [pc, #280]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800791c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007920:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007922:	e017      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f001 f89e 	bl	8008a6c <RCCEx_PLL2_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007934:	e00e      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3324      	adds	r3, #36	; 0x24
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f001 f947 	bl	8008bd0 <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007946:	e005      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	75fb      	strb	r3, [r7, #23]
      break;
 800794c:	e002      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800794e:	bf00      	nop
 8007950:	e000      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800795a:	4b36      	ldr	r3, [pc, #216]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800795c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007968:	4932      	ldr	r1, [pc, #200]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800796a:	4313      	orrs	r3, r2
 800796c:	658b      	str	r3, [r1, #88]	; 0x58
 800796e:	e001      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800797c:	2b00      	cmp	r3, #0
 800797e:	d044      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800798a:	d01f      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800798c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007990:	d805      	bhi.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007996:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800799a:	d00e      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x286>
 800799c:	e01f      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800799e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079a2:	d01f      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80079a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079a8:	d01e      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80079aa:	e018      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ac:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	4a20      	ldr	r2, [pc, #128]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80079b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079b8:	e017      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3304      	adds	r3, #4
 80079be:	2100      	movs	r1, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f001 f853 	bl	8008a6c <RCCEx_PLL2_Config>
 80079c6:	4603      	mov	r3, r0
 80079c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80079ca:	e00e      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3324      	adds	r3, #36	; 0x24
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 f8fc 	bl	8008bd0 <RCCEx_PLL3_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079dc:	e005      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	75fb      	strb	r3, [r7, #23]
      break;
 80079e2:	e002      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80079e4:	bf00      	nop
 80079e6:	e000      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80079e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079f0:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80079f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079fe:	490d      	ldr	r1, [pc, #52]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	658b      	str	r3, [r1, #88]	; 0x58
 8007a04:	e001      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d035      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1a:	2b10      	cmp	r3, #16
 8007a1c:	d00c      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007a1e:	2b10      	cmp	r3, #16
 8007a20:	d802      	bhi.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01b      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007a26:	e017      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d00c      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007a2c:	2b30      	cmp	r3, #48	; 0x30
 8007a2e:	d018      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007a30:	e012      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007a32:	bf00      	nop
 8007a34:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a38:	4baf      	ldr	r3, [pc, #700]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4aae      	ldr	r2, [pc, #696]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a44:	e00e      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 f80d 	bl	8008a6c <RCCEx_PLL2_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a56:	e005      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5c:	e002      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007a5e:	bf00      	nop
 8007a60:	e000      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d109      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a6a:	4ba3      	ldr	r3, [pc, #652]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a76:	49a0      	ldr	r1, [pc, #640]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a7c:	e001      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d042      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a96:	d01f      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9c:	d805      	bhi.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007aa8:	e01f      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007aaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aae:	d01f      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab4:	d01e      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007ab6:	e018      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab8:	4b8f      	ldr	r3, [pc, #572]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	4a8e      	ldr	r2, [pc, #568]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ac4:	e017      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	2100      	movs	r1, #0
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 ffcd 	bl	8008a6c <RCCEx_PLL2_Config>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ad6:	e00e      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3324      	adds	r3, #36	; 0x24
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 f876 	bl	8008bd0 <RCCEx_PLL3_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ae8:	e005      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75fb      	strb	r3, [r7, #23]
      break;
 8007aee:	e002      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007af0:	bf00      	nop
 8007af2:	e000      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d109      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007afc:	4b7e      	ldr	r3, [pc, #504]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b08:	497b      	ldr	r1, [pc, #492]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b0e:	e001      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d042      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b28:	d01b      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b2e:	d805      	bhi.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d022      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b38:	d00a      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007b3a:	e01b      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007b3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b40:	d01d      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b46:	d01c      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007b48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b4c:	d01b      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007b4e:	e011      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	2101      	movs	r1, #1
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 ff88 	bl	8008a6c <RCCEx_PLL2_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b60:	e012      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3324      	adds	r3, #36	; 0x24
 8007b66:	2101      	movs	r1, #1
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f001 f831 	bl	8008bd0 <RCCEx_PLL3_Config>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b72:	e009      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	75fb      	strb	r3, [r7, #23]
      break;
 8007b78:	e006      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007b7a:	bf00      	nop
 8007b7c:	e004      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007b7e:	bf00      	nop
 8007b80:	e002      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007b82:	bf00      	nop
 8007b84:	e000      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d109      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b8e:	4b5a      	ldr	r3, [pc, #360]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b92:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9a:	4957      	ldr	r1, [pc, #348]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	650b      	str	r3, [r1, #80]	; 0x50
 8007ba0:	e001      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d044      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bbc:	d01b      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bc2:	d805      	bhi.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d022      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bcc:	d00a      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007bce:	e01b      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd4:	d01d      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bda:	d01c      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007bdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007be0:	d01b      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007be2:	e011      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3304      	adds	r3, #4
 8007be8:	2101      	movs	r1, #1
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 ff3e 	bl	8008a6c <RCCEx_PLL2_Config>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bf4:	e012      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3324      	adds	r3, #36	; 0x24
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 ffe7 	bl	8008bd0 <RCCEx_PLL3_Config>
 8007c02:	4603      	mov	r3, r0
 8007c04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c06:	e009      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c0c:	e006      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007c0e:	bf00      	nop
 8007c10:	e004      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007c12:	bf00      	nop
 8007c14:	e002      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007c16:	bf00      	nop
 8007c18:	e000      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c22:	4b35      	ldr	r3, [pc, #212]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c30:	4931      	ldr	r1, [pc, #196]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	658b      	str	r3, [r1, #88]	; 0x58
 8007c36:	e001      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d02d      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c50:	d005      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c56:	d009      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d013      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007c5c:	e00f      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5e:	4b26      	ldr	r3, [pc, #152]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a25      	ldr	r2, [pc, #148]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c6a:	e00c      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	2101      	movs	r1, #1
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fefa 	bl	8008a6c <RCCEx_PLL2_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c7c:	e003      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	75fb      	strb	r3, [r7, #23]
      break;
 8007c82:	e000      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d109      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c98:	4917      	ldr	r1, [pc, #92]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	650b      	str	r3, [r1, #80]	; 0x50
 8007c9e:	e001      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d035      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d81b      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007cfd 	.word	0x08007cfd
 8007cc4:	08007cd1 	.word	0x08007cd1
 8007cc8:	08007cdf 	.word	0x08007cdf
 8007ccc:	08007cfd 	.word	0x08007cfd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	4a08      	ldr	r2, [pc, #32]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cdc:	e00f      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fec1 	bl	8008a6c <RCCEx_PLL2_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cee:	e006      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf4:	e003      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007cf6:	bf00      	nop
 8007cf8:	58024400 	.word	0x58024400
      break;
 8007cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d109      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007d04:	4bba      	ldr	r3, [pc, #744]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d08:	f023 0203 	bic.w	r2, r3, #3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d10:	49b7      	ldr	r1, [pc, #732]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d16:	e001      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
 8007d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 8086 	beq.w	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d2a:	4bb2      	ldr	r3, [pc, #712]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4ab1      	ldr	r2, [pc, #708]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d36:	f7f9 ffc9 	bl	8001ccc <HAL_GetTick>
 8007d3a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d3c:	e009      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d3e:	f7f9 ffc5 	bl	8001ccc <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b64      	cmp	r3, #100	; 0x64
 8007d4a:	d902      	bls.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	75fb      	strb	r3, [r7, #23]
        break;
 8007d50:	e005      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d52:	4ba8      	ldr	r3, [pc, #672]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0ef      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d166      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d64:	4ba2      	ldr	r3, [pc, #648]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d6e:	4053      	eors	r3, r2
 8007d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d78:	4b9d      	ldr	r3, [pc, #628]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d80:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d82:	4b9b      	ldr	r3, [pc, #620]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d86:	4a9a      	ldr	r2, [pc, #616]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d8e:	4b98      	ldr	r3, [pc, #608]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d92:	4a97      	ldr	r2, [pc, #604]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d9a:	4a95      	ldr	r2, [pc, #596]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007daa:	d115      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dac:	f7f9 ff8e 	bl	8001ccc <HAL_GetTick>
 8007db0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007db2:	e00b      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db4:	f7f9 ff8a 	bl	8001ccc <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d902      	bls.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	75fb      	strb	r3, [r7, #23]
            break;
 8007dca:	e005      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dcc:	4b88      	ldr	r3, [pc, #544]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0ed      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d126      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dec:	d10d      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007dee:	4b80      	ldr	r3, [pc, #512]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007dfc:	0919      	lsrs	r1, r3, #4
 8007dfe:	4b7e      	ldr	r3, [pc, #504]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007e00:	400b      	ands	r3, r1
 8007e02:	497b      	ldr	r1, [pc, #492]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	610b      	str	r3, [r1, #16]
 8007e08:	e005      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007e0a:	4b79      	ldr	r3, [pc, #484]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	4a78      	ldr	r2, [pc, #480]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e14:	6113      	str	r3, [r2, #16]
 8007e16:	4b76      	ldr	r3, [pc, #472]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e24:	4972      	ldr	r1, [pc, #456]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	670b      	str	r3, [r1, #112]	; 0x70
 8007e2a:	e004      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	75bb      	strb	r3, [r7, #22]
 8007e30:	e001      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d07d      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e46:	2b28      	cmp	r3, #40	; 0x28
 8007e48:	d866      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007e4a:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007f1f 	.word	0x08007f1f
 8007e54:	08007f19 	.word	0x08007f19
 8007e58:	08007f19 	.word	0x08007f19
 8007e5c:	08007f19 	.word	0x08007f19
 8007e60:	08007f19 	.word	0x08007f19
 8007e64:	08007f19 	.word	0x08007f19
 8007e68:	08007f19 	.word	0x08007f19
 8007e6c:	08007f19 	.word	0x08007f19
 8007e70:	08007ef5 	.word	0x08007ef5
 8007e74:	08007f19 	.word	0x08007f19
 8007e78:	08007f19 	.word	0x08007f19
 8007e7c:	08007f19 	.word	0x08007f19
 8007e80:	08007f19 	.word	0x08007f19
 8007e84:	08007f19 	.word	0x08007f19
 8007e88:	08007f19 	.word	0x08007f19
 8007e8c:	08007f19 	.word	0x08007f19
 8007e90:	08007f07 	.word	0x08007f07
 8007e94:	08007f19 	.word	0x08007f19
 8007e98:	08007f19 	.word	0x08007f19
 8007e9c:	08007f19 	.word	0x08007f19
 8007ea0:	08007f19 	.word	0x08007f19
 8007ea4:	08007f19 	.word	0x08007f19
 8007ea8:	08007f19 	.word	0x08007f19
 8007eac:	08007f19 	.word	0x08007f19
 8007eb0:	08007f1f 	.word	0x08007f1f
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007f19 	.word	0x08007f19
 8007ebc:	08007f19 	.word	0x08007f19
 8007ec0:	08007f19 	.word	0x08007f19
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007f19 	.word	0x08007f19
 8007ecc:	08007f19 	.word	0x08007f19
 8007ed0:	08007f1f 	.word	0x08007f1f
 8007ed4:	08007f19 	.word	0x08007f19
 8007ed8:	08007f19 	.word	0x08007f19
 8007edc:	08007f19 	.word	0x08007f19
 8007ee0:	08007f19 	.word	0x08007f19
 8007ee4:	08007f19 	.word	0x08007f19
 8007ee8:	08007f19 	.word	0x08007f19
 8007eec:	08007f19 	.word	0x08007f19
 8007ef0:	08007f1f 	.word	0x08007f1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	2101      	movs	r1, #1
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fdb6 	bl	8008a6c <RCCEx_PLL2_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f04:	e00c      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3324      	adds	r3, #36	; 0x24
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fe5f 	bl	8008bd0 <RCCEx_PLL3_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f16:	e003      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f1c:	e000      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f26:	4b32      	ldr	r3, [pc, #200]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f32:	492f      	ldr	r1, [pc, #188]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	654b      	str	r3, [r1, #84]	; 0x54
 8007f38:	e001      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d037      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	d820      	bhi.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007f52:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007f9b 	.word	0x08007f9b
 8007f5c:	08007f71 	.word	0x08007f71
 8007f60:	08007f83 	.word	0x08007f83
 8007f64:	08007f9b 	.word	0x08007f9b
 8007f68:	08007f9b 	.word	0x08007f9b
 8007f6c:	08007f9b 	.word	0x08007f9b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3304      	adds	r3, #4
 8007f74:	2101      	movs	r1, #1
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fd78 	bl	8008a6c <RCCEx_PLL2_Config>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f80:	e00c      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3324      	adds	r3, #36	; 0x24
 8007f86:	2101      	movs	r1, #1
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fe21 	bl	8008bd0 <RCCEx_PLL3_Config>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f92:	e003      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	75fb      	strb	r3, [r7, #23]
      break;
 8007f98:	e000      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007fa2:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa6:	f023 0207 	bic.w	r2, r3, #7
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fae:	4910      	ldr	r1, [pc, #64]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	654b      	str	r3, [r1, #84]	; 0x54
 8007fb4:	e001      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d040      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	d827      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	08008027 	.word	0x08008027
 8007fdc:	08007ffd 	.word	0x08007ffd
 8007fe0:	0800800f 	.word	0x0800800f
 8007fe4:	08008027 	.word	0x08008027
 8007fe8:	08008027 	.word	0x08008027
 8007fec:	08008027 	.word	0x08008027
 8007ff0:	58024400 	.word	0x58024400
 8007ff4:	58024800 	.word	0x58024800
 8007ff8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3304      	adds	r3, #4
 8008000:	2101      	movs	r1, #1
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fd32 	bl	8008a6c <RCCEx_PLL2_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800800c:	e00c      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3324      	adds	r3, #36	; 0x24
 8008012:	2101      	movs	r1, #1
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fddb 	bl	8008bd0 <RCCEx_PLL3_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800801e:	e003      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]
      break;
 8008024:	e000      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800802e:	4bb2      	ldr	r3, [pc, #712]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008032:	f023 0207 	bic.w	r2, r3, #7
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803c:	49ae      	ldr	r1, [pc, #696]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800803e:	4313      	orrs	r3, r2
 8008040:	658b      	str	r3, [r1, #88]	; 0x58
 8008042:	e001      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0320 	and.w	r3, r3, #32
 8008050:	2b00      	cmp	r3, #0
 8008052:	d044      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805e:	d01b      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008064:	d805      	bhi.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d022      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800806a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800806e:	d00a      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008070:	e01b      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008076:	d01d      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800807c:	d01c      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800807e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008082:	d01b      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008084:	e011      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3304      	adds	r3, #4
 800808a:	2100      	movs	r1, #0
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fced 	bl	8008a6c <RCCEx_PLL2_Config>
 8008092:	4603      	mov	r3, r0
 8008094:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008096:	e012      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3324      	adds	r3, #36	; 0x24
 800809c:	2102      	movs	r1, #2
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fd96 	bl	8008bd0 <RCCEx_PLL3_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080a8:	e009      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
      break;
 80080ae:	e006      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80080b0:	bf00      	nop
 80080b2:	e004      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80080b4:	bf00      	nop
 80080b6:	e002      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80080b8:	bf00      	nop
 80080ba:	e000      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80080bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080c4:	4b8c      	ldr	r3, [pc, #560]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80080c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d2:	4989      	ldr	r1, [pc, #548]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	654b      	str	r3, [r1, #84]	; 0x54
 80080d8:	e001      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d044      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f4:	d01b      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80080f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080fa:	d805      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d022      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008104:	d00a      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8008106:	e01b      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810c:	d01d      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800810e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008112:	d01c      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8008114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008118:	d01b      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800811a:	e011      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	2100      	movs	r1, #0
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fca2 	bl	8008a6c <RCCEx_PLL2_Config>
 8008128:	4603      	mov	r3, r0
 800812a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800812c:	e012      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	3324      	adds	r3, #36	; 0x24
 8008132:	2102      	movs	r1, #2
 8008134:	4618      	mov	r0, r3
 8008136:	f000 fd4b 	bl	8008bd0 <RCCEx_PLL3_Config>
 800813a:	4603      	mov	r3, r0
 800813c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800813e:	e009      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	75fb      	strb	r3, [r7, #23]
      break;
 8008144:	e006      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008146:	bf00      	nop
 8008148:	e004      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800814a:	bf00      	nop
 800814c:	e002      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800814e:	bf00      	nop
 8008150:	e000      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10a      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800815a:	4b67      	ldr	r3, [pc, #412]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800815c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008168:	4963      	ldr	r1, [pc, #396]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800816a:	4313      	orrs	r3, r2
 800816c:	658b      	str	r3, [r1, #88]	; 0x58
 800816e:	e001      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817c:	2b00      	cmp	r3, #0
 800817e:	d044      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800818a:	d01b      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800818c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008190:	d805      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d022      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800819a:	d00a      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800819c:	e01b      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800819e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a2:	d01d      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80081a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081a8:	d01c      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80081aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081ae:	d01b      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80081b0:	e011      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3304      	adds	r3, #4
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fc57 	bl	8008a6c <RCCEx_PLL2_Config>
 80081be:	4603      	mov	r3, r0
 80081c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081c2:	e012      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3324      	adds	r3, #36	; 0x24
 80081c8:	2102      	movs	r1, #2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fd00 	bl	8008bd0 <RCCEx_PLL3_Config>
 80081d0:	4603      	mov	r3, r0
 80081d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081d4:	e009      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	75fb      	strb	r3, [r7, #23]
      break;
 80081da:	e006      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80081dc:	bf00      	nop
 80081de:	e004      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80081e0:	bf00      	nop
 80081e2:	e002      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80081e4:	bf00      	nop
 80081e6:	e000      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80081e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80081f0:	4b41      	ldr	r3, [pc, #260]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80081f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081fe:	493e      	ldr	r1, [pc, #248]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008200:	4313      	orrs	r3, r2
 8008202:	658b      	str	r3, [r1, #88]	; 0x58
 8008204:	e001      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01a      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800821c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008220:	d10a      	bne.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3324      	adds	r3, #36	; 0x24
 8008226:	2102      	movs	r1, #2
 8008228:	4618      	mov	r0, r3
 800822a:	f000 fcd1 	bl	8008bd0 <RCCEx_PLL3_Config>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008238:	4b2f      	ldr	r3, [pc, #188]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800823a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008246:	492c      	ldr	r1, [pc, #176]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008248:	4313      	orrs	r3, r2
 800824a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0310 	and.w	r3, r3, #16
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01a      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800825e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008262:	d10a      	bne.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3324      	adds	r3, #36	; 0x24
 8008268:	2102      	movs	r1, #2
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fcb0 	bl	8008bd0 <RCCEx_PLL3_Config>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800827a:	4b1f      	ldr	r3, [pc, #124]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800827c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008288:	491b      	ldr	r1, [pc, #108]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800828a:	4313      	orrs	r3, r2
 800828c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d032      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a4:	d00d      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80082a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082aa:	d016      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d111      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3304      	adds	r3, #4
 80082b4:	2100      	movs	r1, #0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fbd8 	bl	8008a6c <RCCEx_PLL2_Config>
 80082bc:	4603      	mov	r3, r0
 80082be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082c0:	e00c      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3324      	adds	r3, #36	; 0x24
 80082c6:	2102      	movs	r1, #2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fc81 	bl	8008bd0 <RCCEx_PLL3_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082d2:	e003      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]
      break;
 80082d8:	e000      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80082da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10c      	bne.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082e2:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80082e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082f0:	4901      	ldr	r1, [pc, #4]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	658b      	str	r3, [r1, #88]	; 0x58
 80082f6:	e003      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80082f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d02f      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008316:	d00c      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800831c:	d015      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800831e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008322:	d10f      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008324:	4b79      	ldr	r3, [pc, #484]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	4a78      	ldr	r2, [pc, #480]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800832a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800832e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008330:	e00c      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3324      	adds	r3, #36	; 0x24
 8008336:	2101      	movs	r1, #1
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fc49 	bl	8008bd0 <RCCEx_PLL3_Config>
 800833e:	4603      	mov	r3, r0
 8008340:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008342:	e003      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	75fb      	strb	r3, [r7, #23]
      break;
 8008348:	e000      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800834a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008352:	4b6e      	ldr	r3, [pc, #440]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008360:	496a      	ldr	r1, [pc, #424]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008362:	4313      	orrs	r3, r2
 8008364:	654b      	str	r3, [r1, #84]	; 0x54
 8008366:	e001      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d029      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d003      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008384:	d007      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008386:	e00f      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008388:	4b60      	ldr	r3, [pc, #384]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	4a5f      	ldr	r2, [pc, #380]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800838e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008392:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008394:	e00b      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3304      	adds	r3, #4
 800839a:	2102      	movs	r1, #2
 800839c:	4618      	mov	r0, r3
 800839e:	f000 fb65 	bl	8008a6c <RCCEx_PLL2_Config>
 80083a2:	4603      	mov	r3, r0
 80083a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083a6:	e002      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	75fb      	strb	r3, [r7, #23]
      break;
 80083ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d109      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083b4:	4b55      	ldr	r3, [pc, #340]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80083b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c0:	4952      	ldr	r1, [pc, #328]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80083c6:	e001      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3324      	adds	r3, #36	; 0x24
 80083dc:	2102      	movs	r1, #2
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fbf6 	bl	8008bd0 <RCCEx_PLL3_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d02f      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008402:	d00c      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008408:	d802      	bhi.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d011      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800840e:	e00d      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008414:	d00f      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800841a:	d00e      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800841c:	e006      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800841e:	4b3b      	ldr	r3, [pc, #236]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	4a3a      	ldr	r2, [pc, #232]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800842a:	e007      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
      break;
 8008430:	e004      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008432:	bf00      	nop
 8008434:	e002      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008436:	bf00      	nop
 8008438:	e000      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800843a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008442:	4b32      	ldr	r3, [pc, #200]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844e:	492f      	ldr	r1, [pc, #188]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008450:	4313      	orrs	r3, r2
 8008452:	654b      	str	r3, [r1, #84]	; 0x54
 8008454:	e001      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d008      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008466:	4b29      	ldr	r3, [pc, #164]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008472:	4926      	ldr	r1, [pc, #152]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008474:	4313      	orrs	r3, r2
 8008476:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d009      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008484:	4b21      	ldr	r3, [pc, #132]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008492:	491e      	ldr	r1, [pc, #120]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008494:	4313      	orrs	r3, r2
 8008496:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d008      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084a4:	4b19      	ldr	r3, [pc, #100]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b0:	4916      	ldr	r1, [pc, #88]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00d      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084c2:	4b12      	ldr	r3, [pc, #72]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	4a11      	ldr	r2, [pc, #68]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084cc:	6113      	str	r3, [r2, #16]
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084d0:	691a      	ldr	r2, [r3, #16]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084d8:	490c      	ldr	r1, [pc, #48]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	da08      	bge.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f2:	4906      	ldr	r1, [pc, #24]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80084f8:	7dbb      	ldrb	r3, [r7, #22]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	e000      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	58024400 	.word	0x58024400

08008510 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008514:	f7ff f8b2 	bl	800767c <HAL_RCC_GetHCLKFreq>
 8008518:	4601      	mov	r1, r0
 800851a:	4b06      	ldr	r3, [pc, #24]	; (8008534 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	091b      	lsrs	r3, r3, #4
 8008520:	f003 0307 	and.w	r3, r3, #7
 8008524:	4a04      	ldr	r2, [pc, #16]	; (8008538 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008526:	5cd3      	ldrb	r3, [r2, r3]
 8008528:	f003 031f 	and.w	r3, r3, #31
 800852c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008530:	4618      	mov	r0, r3
 8008532:	bd80      	pop	{r7, pc}
 8008534:	58024400 	.word	0x58024400
 8008538:	0800ac38 	.word	0x0800ac38

0800853c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800853c:	b480      	push	{r7}
 800853e:	b089      	sub	sp, #36	; 0x24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008544:	4b9d      	ldr	r3, [pc, #628]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008548:	f003 0303 	and.w	r3, r3, #3
 800854c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800854e:	4b9b      	ldr	r3, [pc, #620]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	0b1b      	lsrs	r3, r3, #12
 8008554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008558:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800855a:	4b98      	ldr	r3, [pc, #608]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	091b      	lsrs	r3, r3, #4
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008566:	4b95      	ldr	r3, [pc, #596]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856a:	08db      	lsrs	r3, r3, #3
 800856c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 810a 	beq.w	800879e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d05a      	beq.n	8008646 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008590:	2b01      	cmp	r3, #1
 8008592:	d302      	bcc.n	800859a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008594:	2b02      	cmp	r3, #2
 8008596:	d078      	beq.n	800868a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008598:	e099      	b.n	80086ce <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800859a:	4b88      	ldr	r3, [pc, #544]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d02d      	beq.n	8008602 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085a6:	4b85      	ldr	r3, [pc, #532]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	08db      	lsrs	r3, r3, #3
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	4a83      	ldr	r2, [pc, #524]	; (80087c0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80085b2:	fa22 f303 	lsr.w	r3, r2, r3
 80085b6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	ee07 3a90 	vmov	s15, r3
 80085c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d0:	4b7a      	ldr	r3, [pc, #488]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008600:	e087      	b.n	8008712 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80087c8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008614:	4b69      	ldr	r3, [pc, #420]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008624:	ed97 6a03 	vldr	s12, [r7, #12]
 8008628:	eddf 5a66 	vldr	s11, [pc, #408]	; 80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800862c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008640:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008644:	e065      	b.n	8008712 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008650:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008658:	4b58      	ldr	r3, [pc, #352]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008660:	ee07 3a90 	vmov	s15, r3
 8008664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008668:	ed97 6a03 	vldr	s12, [r7, #12]
 800866c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008670:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008678:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008684:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008688:	e043      	b.n	8008712 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	ee07 3a90 	vmov	s15, r3
 8008690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008694:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80087d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869c:	4b47      	ldr	r3, [pc, #284]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a4:	ee07 3a90 	vmov	s15, r3
 80086a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086cc:	e021      	b.n	8008712 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	ee07 3a90 	vmov	s15, r3
 80086d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80086dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e0:	4b36      	ldr	r3, [pc, #216]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e8:	ee07 3a90 	vmov	s15, r3
 80086ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80086f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008710:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008712:	4b2a      	ldr	r3, [pc, #168]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	0a5b      	lsrs	r3, r3, #9
 8008718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871c:	ee07 3a90 	vmov	s15, r3
 8008720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008728:	ee37 7a87 	vadd.f32	s14, s15, s14
 800872c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008738:	ee17 2a90 	vmov	r2, s15
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008740:	4b1e      	ldr	r3, [pc, #120]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	0c1b      	lsrs	r3, r3, #16
 8008746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800875a:	edd7 6a07 	vldr	s13, [r7, #28]
 800875e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008766:	ee17 2a90 	vmov	r2, s15
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800876e:	4b13      	ldr	r3, [pc, #76]	; (80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	0e1b      	lsrs	r3, r3, #24
 8008774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008778:	ee07 3a90 	vmov	s15, r3
 800877c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008788:	edd7 6a07 	vldr	s13, [r7, #28]
 800878c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008794:	ee17 2a90 	vmov	r2, s15
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800879c:	e008      	b.n	80087b0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	609a      	str	r2, [r3, #8]
}
 80087b0:	bf00      	nop
 80087b2:	3724      	adds	r7, #36	; 0x24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	58024400 	.word	0x58024400
 80087c0:	03d09000 	.word	0x03d09000
 80087c4:	46000000 	.word	0x46000000
 80087c8:	4c742400 	.word	0x4c742400
 80087cc:	4a742400 	.word	0x4a742400
 80087d0:	4af42400 	.word	0x4af42400

080087d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b089      	sub	sp, #36	; 0x24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087dc:	4b9d      	ldr	r3, [pc, #628]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	f003 0303 	and.w	r3, r3, #3
 80087e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80087e6:	4b9b      	ldr	r3, [pc, #620]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ea:	0d1b      	lsrs	r3, r3, #20
 80087ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80087f2:	4b98      	ldr	r3, [pc, #608]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	0a1b      	lsrs	r3, r3, #8
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80087fe:	4b95      	ldr	r3, [pc, #596]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008802:	08db      	lsrs	r3, r3, #3
 8008804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 810a 	beq.w	8008a36 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d05a      	beq.n	80088de <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008828:	2b01      	cmp	r3, #1
 800882a:	d302      	bcc.n	8008832 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800882c:	2b02      	cmp	r3, #2
 800882e:	d078      	beq.n	8008922 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008830:	e099      	b.n	8008966 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008832:	4b88      	ldr	r3, [pc, #544]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d02d      	beq.n	800889a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800883e:	4b85      	ldr	r3, [pc, #532]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	08db      	lsrs	r3, r3, #3
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	4a83      	ldr	r2, [pc, #524]	; (8008a58 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800884a:	fa22 f303 	lsr.w	r3, r2, r3
 800884e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008868:	4b7a      	ldr	r3, [pc, #488]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008878:	ed97 6a03 	vldr	s12, [r7, #12]
 800887c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008894:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008898:	e087      	b.n	80089aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a60 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80088a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ac:	4b69      	ldr	r3, [pc, #420]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80088c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088dc:	e065      	b.n	80089aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	ee07 3a90 	vmov	s15, r3
 80088e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80088ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f0:	4b58      	ldr	r3, [pc, #352]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f8:	ee07 3a90 	vmov	s15, r3
 80088fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008900:	ed97 6a03 	vldr	s12, [r7, #12]
 8008904:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008920:	e043      	b.n	80089aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008934:	4b47      	ldr	r3, [pc, #284]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893c:	ee07 3a90 	vmov	s15, r3
 8008940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008944:	ed97 6a03 	vldr	s12, [r7, #12]
 8008948:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800894c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008960:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008964:	e021      	b.n	80089aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	ee07 3a90 	vmov	s15, r3
 800896c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008970:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008978:	4b36      	ldr	r3, [pc, #216]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008980:	ee07 3a90 	vmov	s15, r3
 8008984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008988:	ed97 6a03 	vldr	s12, [r7, #12]
 800898c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800899c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089a8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80089aa:	4b2a      	ldr	r3, [pc, #168]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	0a5b      	lsrs	r3, r3, #9
 80089b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d0:	ee17 2a90 	vmov	r2, s15
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80089d8:	4b1e      	ldr	r3, [pc, #120]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	0c1b      	lsrs	r3, r3, #16
 80089de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089fe:	ee17 2a90 	vmov	r2, s15
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008a06:	4b13      	ldr	r3, [pc, #76]	; (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	0e1b      	lsrs	r3, r3, #24
 8008a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a10:	ee07 3a90 	vmov	s15, r3
 8008a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a2c:	ee17 2a90 	vmov	r2, s15
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a34:	e008      	b.n	8008a48 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	609a      	str	r2, [r3, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	3724      	adds	r7, #36	; 0x24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	58024400 	.word	0x58024400
 8008a58:	03d09000 	.word	0x03d09000
 8008a5c:	46000000 	.word	0x46000000
 8008a60:	4c742400 	.word	0x4c742400
 8008a64:	4a742400 	.word	0x4a742400
 8008a68:	4af42400 	.word	0x4af42400

08008a6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a7a:	4b53      	ldr	r3, [pc, #332]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	f003 0303 	and.w	r3, r3, #3
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d101      	bne.n	8008a8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e099      	b.n	8008bbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a8a:	4b4f      	ldr	r3, [pc, #316]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a4e      	ldr	r2, [pc, #312]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008a90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a96:	f7f9 f919 	bl	8001ccc <HAL_GetTick>
 8008a9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a9c:	e008      	b.n	8008ab0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a9e:	f7f9 f915 	bl	8001ccc <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d901      	bls.n	8008ab0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e086      	b.n	8008bbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ab0:	4b45      	ldr	r3, [pc, #276]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1f0      	bne.n	8008a9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008abc:	4b42      	ldr	r3, [pc, #264]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	031b      	lsls	r3, r3, #12
 8008aca:	493f      	ldr	r1, [pc, #252]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	628b      	str	r3, [r1, #40]	; 0x28
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	025b      	lsls	r3, r3, #9
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	041b      	lsls	r3, r3, #16
 8008aee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008af2:	431a      	orrs	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	061b      	lsls	r3, r3, #24
 8008afc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b00:	4931      	ldr	r1, [pc, #196]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b06:	4b30      	ldr	r3, [pc, #192]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	492d      	ldr	r1, [pc, #180]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b18:	4b2b      	ldr	r3, [pc, #172]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	f023 0220 	bic.w	r2, r3, #32
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	4928      	ldr	r1, [pc, #160]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b2a:	4b27      	ldr	r3, [pc, #156]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	4a26      	ldr	r2, [pc, #152]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b30:	f023 0310 	bic.w	r3, r3, #16
 8008b34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b36:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b3a:	4b24      	ldr	r3, [pc, #144]	; (8008bcc <RCCEx_PLL2_Config+0x160>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	69d2      	ldr	r2, [r2, #28]
 8008b42:	00d2      	lsls	r2, r2, #3
 8008b44:	4920      	ldr	r1, [pc, #128]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b4a:	4b1f      	ldr	r3, [pc, #124]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4e:	4a1e      	ldr	r2, [pc, #120]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b50:	f043 0310 	orr.w	r3, r3, #16
 8008b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d106      	bne.n	8008b6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b5c:	4b1a      	ldr	r3, [pc, #104]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	4a19      	ldr	r2, [pc, #100]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b68:	e00f      	b.n	8008b8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d106      	bne.n	8008b7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b70:	4b15      	ldr	r3, [pc, #84]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	4a14      	ldr	r2, [pc, #80]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b7c:	e005      	b.n	8008b8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b7e:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b82:	4a11      	ldr	r2, [pc, #68]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b8a:	4b0f      	ldr	r3, [pc, #60]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a0e      	ldr	r2, [pc, #56]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008b90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b96:	f7f9 f899 	bl	8001ccc <HAL_GetTick>
 8008b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b9c:	e008      	b.n	8008bb0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b9e:	f7f9 f895 	bl	8001ccc <HAL_GetTick>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d901      	bls.n	8008bb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e006      	b.n	8008bbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <RCCEx_PLL2_Config+0x15c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0f0      	beq.n	8008b9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	58024400 	.word	0x58024400
 8008bcc:	ffff0007 	.word	0xffff0007

08008bd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bde:	4b53      	ldr	r3, [pc, #332]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d101      	bne.n	8008bee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e099      	b.n	8008d22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008bee:	4b4f      	ldr	r3, [pc, #316]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a4e      	ldr	r2, [pc, #312]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bfa:	f7f9 f867 	bl	8001ccc <HAL_GetTick>
 8008bfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c00:	e008      	b.n	8008c14 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c02:	f7f9 f863 	bl	8001ccc <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d901      	bls.n	8008c14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e086      	b.n	8008d22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c14:	4b45      	ldr	r3, [pc, #276]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1f0      	bne.n	8008c02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c20:	4b42      	ldr	r3, [pc, #264]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	051b      	lsls	r3, r3, #20
 8008c2e:	493f      	ldr	r1, [pc, #252]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	628b      	str	r3, [r1, #40]	; 0x28
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	025b      	lsls	r3, r3, #9
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	041b      	lsls	r3, r3, #16
 8008c52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c56:	431a      	orrs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	061b      	lsls	r3, r3, #24
 8008c60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c64:	4931      	ldr	r1, [pc, #196]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c6a:	4b30      	ldr	r3, [pc, #192]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	492d      	ldr	r1, [pc, #180]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c7c:	4b2b      	ldr	r3, [pc, #172]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	4928      	ldr	r1, [pc, #160]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c8e:	4b27      	ldr	r3, [pc, #156]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	4a26      	ldr	r2, [pc, #152]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c9a:	4b24      	ldr	r3, [pc, #144]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c9e:	4b24      	ldr	r3, [pc, #144]	; (8008d30 <RCCEx_PLL3_Config+0x160>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	69d2      	ldr	r2, [r2, #28]
 8008ca6:	00d2      	lsls	r2, r2, #3
 8008ca8:	4920      	ldr	r1, [pc, #128]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008cae:	4b1f      	ldr	r3, [pc, #124]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	4a1e      	ldr	r2, [pc, #120]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d106      	bne.n	8008cce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008cc0:	4b1a      	ldr	r3, [pc, #104]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	4a19      	ldr	r2, [pc, #100]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008cc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ccc:	e00f      	b.n	8008cee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d106      	bne.n	8008ce2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cd4:	4b15      	ldr	r3, [pc, #84]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	4a14      	ldr	r2, [pc, #80]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008cda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ce0:	e005      	b.n	8008cee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008ce2:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	4a11      	ldr	r2, [pc, #68]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008ce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008cee:	4b0f      	ldr	r3, [pc, #60]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a0e      	ldr	r2, [pc, #56]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cfa:	f7f8 ffe7 	bl	8001ccc <HAL_GetTick>
 8008cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d00:	e008      	b.n	8008d14 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d02:	f7f8 ffe3 	bl	8001ccc <HAL_GetTick>
 8008d06:	4602      	mov	r2, r0
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d901      	bls.n	8008d14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e006      	b.n	8008d22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d14:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <RCCEx_PLL3_Config+0x15c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0f0      	beq.n	8008d02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	58024400 	.word	0x58024400
 8008d30:	ffff0007 	.word	0xffff0007

08008d34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e0e2      	b.n	8008f10 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a70      	ldr	r2, [pc, #448]	; (8008f18 <HAL_SPI_Init+0x1e4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00f      	beq.n	8008d7a <HAL_SPI_Init+0x46>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a6f      	ldr	r2, [pc, #444]	; (8008f1c <HAL_SPI_Init+0x1e8>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00a      	beq.n	8008d7a <HAL_SPI_Init+0x46>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a6d      	ldr	r2, [pc, #436]	; (8008f20 <HAL_SPI_Init+0x1ec>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d005      	beq.n	8008d7a <HAL_SPI_Init+0x46>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	2b0f      	cmp	r3, #15
 8008d74:	d901      	bls.n	8008d7a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e0ca      	b.n	8008f10 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fb92 	bl	80094a4 <SPI_GetPacketSize>
 8008d80:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a64      	ldr	r2, [pc, #400]	; (8008f18 <HAL_SPI_Init+0x1e4>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d00c      	beq.n	8008da6 <HAL_SPI_Init+0x72>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a62      	ldr	r2, [pc, #392]	; (8008f1c <HAL_SPI_Init+0x1e8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d007      	beq.n	8008da6 <HAL_SPI_Init+0x72>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a61      	ldr	r2, [pc, #388]	; (8008f20 <HAL_SPI_Init+0x1ec>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d002      	beq.n	8008da6 <HAL_SPI_Init+0x72>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b08      	cmp	r3, #8
 8008da4:	d811      	bhi.n	8008dca <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008daa:	4a5b      	ldr	r2, [pc, #364]	; (8008f18 <HAL_SPI_Init+0x1e4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d009      	beq.n	8008dc4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a59      	ldr	r2, [pc, #356]	; (8008f1c <HAL_SPI_Init+0x1e8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d004      	beq.n	8008dc4 <HAL_SPI_Init+0x90>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a58      	ldr	r2, [pc, #352]	; (8008f20 <HAL_SPI_Init+0x1ec>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d104      	bne.n	8008dce <HAL_SPI_Init+0x9a>
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2b10      	cmp	r3, #16
 8008dc8:	d901      	bls.n	8008dce <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e0a0      	b.n	8008f10 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d106      	bne.n	8008de8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7f8 f8fe 	bl	8000fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0201 	bic.w	r2, r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e08:	d110      	bne.n	8008e2c <HAL_SPI_Init+0xf8>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e12:	d10b      	bne.n	8008e2c <HAL_SPI_Init+0xf8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d107      	bne.n	8008e2c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e2a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	69da      	ldr	r2, [r3, #28]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e34:	431a      	orrs	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3e:	ea42 0103 	orr.w	r1, r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	431a      	orrs	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e80:	431a      	orrs	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8c:	ea42 0103 	orr.w	r1, r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d113      	bne.n	8008ecc <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eb6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008eca:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0201 	bic.w	r2, r2, #1
 8008eda:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00a      	beq.n	8008efe <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40013000 	.word	0x40013000
 8008f1c:	40003800 	.word	0x40003800
 8008f20:	40003c00 	.word	0x40003c00

08008f24 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	; 0x28
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	4613      	mov	r3, r2
 8008f32:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3320      	adds	r3, #32
 8008f3a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d101      	bne.n	8008f4e <HAL_SPI_Transmit+0x2a>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e1d7      	b.n	80092fe <HAL_SPI_Transmit+0x3da>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f56:	f7f8 feb9 	bl	8001ccc <HAL_GetTick>
 8008f5a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d007      	beq.n	8008f78 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008f74:	7efb      	ldrb	r3, [r7, #27]
 8008f76:	e1c2      	b.n	80092fe <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <HAL_SPI_Transmit+0x60>
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008f90:	7efb      	ldrb	r3, [r7, #27]
 8008f92:	e1b4      	b.n	80092fe <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2203      	movs	r2, #3
 8008f98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	88fa      	ldrh	r2, [r7, #6]
 8008fae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008fe4:	d107      	bne.n	8008ff6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ff4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	4b96      	ldr	r3, [pc, #600]	; (8009258 <HAL_SPI_Transmit+0x334>)
 8008ffe:	4013      	ands	r3, r2
 8009000:	88f9      	ldrh	r1, [r7, #6]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	6812      	ldr	r2, [r2, #0]
 8009006:	430b      	orrs	r3, r1
 8009008:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0201 	orr.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009022:	d107      	bne.n	8009034 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	2b0f      	cmp	r3, #15
 800903a:	d947      	bls.n	80090cc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800903c:	e03f      	b.n	80090be <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b02      	cmp	r3, #2
 800904a:	d114      	bne.n	8009076 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6812      	ldr	r2, [r2, #0]
 8009056:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800905c:	1d1a      	adds	r2, r3, #4
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009074:	e023      	b.n	80090be <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009076:	f7f8 fe29 	bl	8001ccc <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d803      	bhi.n	800908e <HAL_SPI_Transmit+0x16a>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908c:	d102      	bne.n	8009094 <HAL_SPI_Transmit+0x170>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d114      	bne.n	80090be <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 f937 	bl	8009308 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e11f      	b.n	80092fe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1b9      	bne.n	800903e <HAL_SPI_Transmit+0x11a>
 80090ca:	e0f2      	b.n	80092b2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	2b07      	cmp	r3, #7
 80090d2:	f240 80e7 	bls.w	80092a4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80090d6:	e05d      	b.n	8009194 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d132      	bne.n	800914c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d918      	bls.n	8009124 <HAL_SPI_Transmit+0x200>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d014      	beq.n	8009124 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6812      	ldr	r2, [r2, #0]
 8009104:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910a:	1d1a      	adds	r2, r3, #4
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009116:	b29b      	uxth	r3, r3
 8009118:	3b02      	subs	r3, #2
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009122:	e037      	b.n	8009194 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009128:	881a      	ldrh	r2, [r3, #0]
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009132:	1c9a      	adds	r2, r3, #2
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800913e:	b29b      	uxth	r3, r3
 8009140:	3b01      	subs	r3, #1
 8009142:	b29a      	uxth	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800914a:	e023      	b.n	8009194 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800914c:	f7f8 fdbe 	bl	8001ccc <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d803      	bhi.n	8009164 <HAL_SPI_Transmit+0x240>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009162:	d102      	bne.n	800916a <HAL_SPI_Transmit+0x246>
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d114      	bne.n	8009194 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 f8cc 	bl	8009308 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800917e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	e0b4      	b.n	80092fe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800919a:	b29b      	uxth	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d19b      	bne.n	80090d8 <HAL_SPI_Transmit+0x1b4>
 80091a0:	e087      	b.n	80092b2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d155      	bne.n	800925c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d918      	bls.n	80091ee <HAL_SPI_Transmit+0x2ca>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c0:	2b40      	cmp	r3, #64	; 0x40
 80091c2:	d914      	bls.n	80091ee <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6812      	ldr	r2, [r2, #0]
 80091ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d4:	1d1a      	adds	r2, r3, #4
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	3b04      	subs	r3, #4
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80091ec:	e05a      	b.n	80092a4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d917      	bls.n	800922a <HAL_SPI_Transmit+0x306>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d013      	beq.n	800922a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009206:	881a      	ldrh	r2, [r3, #0]
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009210:	1c9a      	adds	r2, r3, #2
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b02      	subs	r3, #2
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009228:	e03c      	b.n	80092a4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3320      	adds	r3, #32
 8009234:	7812      	ldrb	r2, [r2, #0]
 8009236:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009254:	e026      	b.n	80092a4 <HAL_SPI_Transmit+0x380>
 8009256:	bf00      	nop
 8009258:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800925c:	f7f8 fd36 	bl	8001ccc <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	429a      	cmp	r2, r3
 800926a:	d803      	bhi.n	8009274 <HAL_SPI_Transmit+0x350>
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009272:	d102      	bne.n	800927a <HAL_SPI_Transmit+0x356>
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d114      	bne.n	80092a4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 f844 	bl	8009308 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800928e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e02c      	b.n	80092fe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f47f af78 	bne.w	80091a2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2200      	movs	r2, #0
 80092ba:	2108      	movs	r1, #8
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f8c3 	bl	8009448 <SPI_WaitOnFlagUntilTimeout>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d007      	beq.n	80092d8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ce:	f043 0220 	orr.w	r2, r3, #32
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f815 	bl	8009308 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e000      	b.n	80092fe <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80092fc:	7efb      	ldrb	r3, [r7, #27]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3720      	adds	r7, #32
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop

08009308 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699a      	ldr	r2, [r3, #24]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0208 	orr.w	r2, r2, #8
 8009326:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699a      	ldr	r2, [r3, #24]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 0210 	orr.w	r2, r2, #16
 8009336:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 0201 	bic.w	r2, r2, #1
 8009346:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6919      	ldr	r1, [r3, #16]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	4b3c      	ldr	r3, [pc, #240]	; (8009444 <SPI_CloseTransfer+0x13c>)
 8009354:	400b      	ands	r3, r1
 8009356:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009366:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b04      	cmp	r3, #4
 8009372:	d014      	beq.n	800939e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f003 0320 	and.w	r3, r3, #32
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00f      	beq.n	800939e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009384:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699a      	ldr	r2, [r3, #24]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f042 0220 	orr.w	r2, r2, #32
 800939c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d014      	beq.n	80093d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00f      	beq.n	80093d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ba:	f043 0204 	orr.w	r2, r3, #4
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699a      	ldr	r2, [r3, #24]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00f      	beq.n	80093fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e4:	f043 0201 	orr.w	r2, r3, #1
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	699a      	ldr	r2, [r3, #24]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00f      	beq.n	8009428 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800940e:	f043 0208 	orr.w	r2, r3, #8
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009426:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	fffffc90 	.word	0xfffffc90

08009448 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009458:	e010      	b.n	800947c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800945a:	f7f8 fc37 	bl	8001ccc <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	429a      	cmp	r2, r3
 8009468:	d803      	bhi.n	8009472 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009470:	d102      	bne.n	8009478 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e00f      	b.n	800949c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	4013      	ands	r3, r2
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	429a      	cmp	r2, r3
 800948a:	bf0c      	ite	eq
 800948c:	2301      	moveq	r3, #1
 800948e:	2300      	movne	r3, #0
 8009490:	b2db      	uxtb	r3, r3
 8009492:	461a      	mov	r2, r3
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	429a      	cmp	r2, r3
 8009498:	d0df      	beq.n	800945a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	3301      	adds	r3, #1
 80094b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	3301      	adds	r3, #1
 80094bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	3307      	adds	r3, #7
 80094c2:	08db      	lsrs	r3, r3, #3
 80094c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d101      	bne.n	80094ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e049      	b.n	8009580 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d106      	bne.n	8009506 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7f7 fdd9 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2202      	movs	r2, #2
 800950a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3304      	adds	r3, #4
 8009516:	4619      	mov	r1, r3
 8009518:	4610      	mov	r0, r2
 800951a:	f000 f905 	bl	8009728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_TIM_ConfigClockSource+0x18>
 800959c:	2302      	movs	r3, #2
 800959e:	e0b7      	b.n	8009710 <HAL_TIM_ConfigClockSource+0x188>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4b57      	ldr	r3, [pc, #348]	; (8009718 <HAL_TIM_ConfigClockSource+0x190>)
 80095bc:	4013      	ands	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b70      	cmp	r3, #112	; 0x70
 80095d6:	d02e      	beq.n	8009636 <HAL_TIM_ConfigClockSource+0xae>
 80095d8:	2b70      	cmp	r3, #112	; 0x70
 80095da:	d812      	bhi.n	8009602 <HAL_TIM_ConfigClockSource+0x7a>
 80095dc:	2b30      	cmp	r3, #48	; 0x30
 80095de:	f000 8084 	beq.w	80096ea <HAL_TIM_ConfigClockSource+0x162>
 80095e2:	2b30      	cmp	r3, #48	; 0x30
 80095e4:	d806      	bhi.n	80095f4 <HAL_TIM_ConfigClockSource+0x6c>
 80095e6:	2b10      	cmp	r3, #16
 80095e8:	d07f      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x162>
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d07d      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x162>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d07b      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80095f2:	e084      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80095f4:	2b50      	cmp	r3, #80	; 0x50
 80095f6:	d048      	beq.n	800968a <HAL_TIM_ConfigClockSource+0x102>
 80095f8:	2b60      	cmp	r3, #96	; 0x60
 80095fa:	d056      	beq.n	80096aa <HAL_TIM_ConfigClockSource+0x122>
 80095fc:	2b40      	cmp	r3, #64	; 0x40
 80095fe:	d064      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0x142>
      break;
 8009600:	e07d      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009602:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009606:	d070      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x162>
 8009608:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800960c:	d809      	bhi.n	8009622 <HAL_TIM_ConfigClockSource+0x9a>
 800960e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009612:	d027      	beq.n	8009664 <HAL_TIM_ConfigClockSource+0xdc>
 8009614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009618:	d067      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x162>
 800961a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961e:	d06d      	beq.n	80096fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009620:	e06d      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009622:	4a3e      	ldr	r2, [pc, #248]	; (800971c <HAL_TIM_ConfigClockSource+0x194>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d060      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x162>
 8009628:	4a3d      	ldr	r2, [pc, #244]	; (8009720 <HAL_TIM_ConfigClockSource+0x198>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d05d      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x162>
 800962e:	4a3d      	ldr	r2, [pc, #244]	; (8009724 <HAL_TIM_ConfigClockSource+0x19c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d05a      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x162>
      break;
 8009634:	e063      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	6899      	ldr	r1, [r3, #8]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	f000 f987 	bl	8009958 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009658:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	609a      	str	r2, [r3, #8]
      break;
 8009662:	e04c      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6818      	ldr	r0, [r3, #0]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	6899      	ldr	r1, [r3, #8]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f000 f970 	bl	8009958 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689a      	ldr	r2, [r3, #8]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009686:	609a      	str	r2, [r3, #8]
      break;
 8009688:	e039      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	6859      	ldr	r1, [r3, #4]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	461a      	mov	r2, r3
 8009698:	f000 f8e0 	bl	800985c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2150      	movs	r1, #80	; 0x50
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f93a 	bl	800991c <TIM_ITRx_SetConfig>
      break;
 80096a8:	e029      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	6859      	ldr	r1, [r3, #4]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	461a      	mov	r2, r3
 80096b8:	f000 f8ff 	bl	80098ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2160      	movs	r1, #96	; 0x60
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 f92a 	bl	800991c <TIM_ITRx_SetConfig>
      break;
 80096c8:	e019      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	6859      	ldr	r1, [r3, #4]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	461a      	mov	r2, r3
 80096d8:	f000 f8c0 	bl	800985c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2140      	movs	r1, #64	; 0x40
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f91a 	bl	800991c <TIM_ITRx_SetConfig>
      break;
 80096e8:	e009      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f000 f911 	bl	800991c <TIM_ITRx_SetConfig>
      break;
 80096fa:	e000      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x176>
      break;
 80096fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	ffceff88 	.word	0xffceff88
 800971c:	00100030 	.word	0x00100030
 8009720:	00100040 	.word	0x00100040
 8009724:	00100020 	.word	0x00100020

08009728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a40      	ldr	r2, [pc, #256]	; (800983c <TIM_Base_SetConfig+0x114>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d013      	beq.n	8009768 <TIM_Base_SetConfig+0x40>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009746:	d00f      	beq.n	8009768 <TIM_Base_SetConfig+0x40>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a3d      	ldr	r2, [pc, #244]	; (8009840 <TIM_Base_SetConfig+0x118>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d00b      	beq.n	8009768 <TIM_Base_SetConfig+0x40>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a3c      	ldr	r2, [pc, #240]	; (8009844 <TIM_Base_SetConfig+0x11c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d007      	beq.n	8009768 <TIM_Base_SetConfig+0x40>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a3b      	ldr	r2, [pc, #236]	; (8009848 <TIM_Base_SetConfig+0x120>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d003      	beq.n	8009768 <TIM_Base_SetConfig+0x40>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a3a      	ldr	r2, [pc, #232]	; (800984c <TIM_Base_SetConfig+0x124>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d108      	bne.n	800977a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800976e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a2f      	ldr	r2, [pc, #188]	; (800983c <TIM_Base_SetConfig+0x114>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d01f      	beq.n	80097c2 <TIM_Base_SetConfig+0x9a>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009788:	d01b      	beq.n	80097c2 <TIM_Base_SetConfig+0x9a>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a2c      	ldr	r2, [pc, #176]	; (8009840 <TIM_Base_SetConfig+0x118>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d017      	beq.n	80097c2 <TIM_Base_SetConfig+0x9a>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a2b      	ldr	r2, [pc, #172]	; (8009844 <TIM_Base_SetConfig+0x11c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d013      	beq.n	80097c2 <TIM_Base_SetConfig+0x9a>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a2a      	ldr	r2, [pc, #168]	; (8009848 <TIM_Base_SetConfig+0x120>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d00f      	beq.n	80097c2 <TIM_Base_SetConfig+0x9a>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a29      	ldr	r2, [pc, #164]	; (800984c <TIM_Base_SetConfig+0x124>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d00b      	beq.n	80097c2 <TIM_Base_SetConfig+0x9a>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a28      	ldr	r2, [pc, #160]	; (8009850 <TIM_Base_SetConfig+0x128>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d007      	beq.n	80097c2 <TIM_Base_SetConfig+0x9a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a27      	ldr	r2, [pc, #156]	; (8009854 <TIM_Base_SetConfig+0x12c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d003      	beq.n	80097c2 <TIM_Base_SetConfig+0x9a>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a26      	ldr	r2, [pc, #152]	; (8009858 <TIM_Base_SetConfig+0x130>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d108      	bne.n	80097d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	689a      	ldr	r2, [r3, #8]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a10      	ldr	r2, [pc, #64]	; (800983c <TIM_Base_SetConfig+0x114>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00f      	beq.n	8009820 <TIM_Base_SetConfig+0xf8>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a12      	ldr	r2, [pc, #72]	; (800984c <TIM_Base_SetConfig+0x124>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00b      	beq.n	8009820 <TIM_Base_SetConfig+0xf8>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a11      	ldr	r2, [pc, #68]	; (8009850 <TIM_Base_SetConfig+0x128>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d007      	beq.n	8009820 <TIM_Base_SetConfig+0xf8>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a10      	ldr	r2, [pc, #64]	; (8009854 <TIM_Base_SetConfig+0x12c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <TIM_Base_SetConfig+0xf8>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a0f      	ldr	r2, [pc, #60]	; (8009858 <TIM_Base_SetConfig+0x130>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d103      	bne.n	8009828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	691a      	ldr	r2, [r3, #16]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	615a      	str	r2, [r3, #20]
}
 800982e:	bf00      	nop
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	40010000 	.word	0x40010000
 8009840:	40000400 	.word	0x40000400
 8009844:	40000800 	.word	0x40000800
 8009848:	40000c00 	.word	0x40000c00
 800984c:	40010400 	.word	0x40010400
 8009850:	40014000 	.word	0x40014000
 8009854:	40014400 	.word	0x40014400
 8009858:	40014800 	.word	0x40014800

0800985c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	f023 0201 	bic.w	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4313      	orrs	r3, r2
 8009890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f023 030a 	bic.w	r3, r3, #10
 8009898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	4313      	orrs	r3, r2
 80098a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b087      	sub	sp, #28
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	f023 0210 	bic.w	r2, r3, #16
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	031b      	lsls	r3, r3, #12
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	621a      	str	r2, [r3, #32]
}
 800990e:	bf00      	nop
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
	...

0800991c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4b09      	ldr	r3, [pc, #36]	; (8009954 <TIM_ITRx_SetConfig+0x38>)
 8009930:	4013      	ands	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4313      	orrs	r3, r2
 800993a:	f043 0307 	orr.w	r3, r3, #7
 800993e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	609a      	str	r2, [r3, #8]
}
 8009946:	bf00      	nop
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	ffcfff8f 	.word	0xffcfff8f

08009958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	021a      	lsls	r2, r3, #8
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	431a      	orrs	r2, r3
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	4313      	orrs	r3, r2
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	4313      	orrs	r3, r2
 8009984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	609a      	str	r2, [r3, #8]
}
 800998c:	bf00      	nop
 800998e:	371c      	adds	r7, #28
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d101      	bne.n	80099b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099ac:	2302      	movs	r3, #2
 80099ae:	e068      	b.n	8009a82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2202      	movs	r2, #2
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a2e      	ldr	r2, [pc, #184]	; (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d004      	beq.n	80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a2d      	ldr	r2, [pc, #180]	; (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d108      	bne.n	80099f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a1e      	ldr	r2, [pc, #120]	; (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d01d      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a22:	d018      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d013      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a1a      	ldr	r2, [pc, #104]	; (8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d00e      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a18      	ldr	r2, [pc, #96]	; (8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d009      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a13      	ldr	r2, [pc, #76]	; (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d004      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a14      	ldr	r2, [pc, #80]	; (8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d10c      	bne.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	40010000 	.word	0x40010000
 8009a94:	40010400 	.word	0x40010400
 8009a98:	40000400 	.word	0x40000400
 8009a9c:	40000800 	.word	0x40000800
 8009aa0:	40000c00 	.word	0x40000c00
 8009aa4:	40001800 	.word	0x40001800

08009aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e042      	b.n	8009b40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7f7 fb13 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2224      	movs	r2, #36	; 0x24
 8009ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0201 	bic.w	r2, r2, #1
 8009ae8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f82c 	bl	8009b48 <UART_SetConfig>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d101      	bne.n	8009afa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e022      	b.n	8009b40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fdd0 	bl	800a6a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689a      	ldr	r2, [r3, #8]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0201 	orr.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fe57 	bl	800a7ec <UART_CheckIdleState>
 8009b3e:	4603      	mov	r3, r0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009b4c:	b08e      	sub	sp, #56	; 0x38
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689a      	ldr	r2, [r3, #8]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	431a      	orrs	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	431a      	orrs	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	69db      	ldr	r3, [r3, #28]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b76:	4313      	orrs	r3, r2
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	4bc1      	ldr	r3, [pc, #772]	; (8009e88 <UART_SetConfig+0x340>)
 8009b82:	4013      	ands	r3, r2
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b8a:	430b      	orrs	r3, r1
 8009b8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4ab7      	ldr	r2, [pc, #732]	; (8009e8c <UART_SetConfig+0x344>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d004      	beq.n	8009bbe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689a      	ldr	r2, [r3, #8]
 8009bc4:	4bb2      	ldr	r3, [pc, #712]	; (8009e90 <UART_SetConfig+0x348>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6812      	ldr	r2, [r2, #0]
 8009bcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	f023 010f 	bic.w	r1, r3, #15
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4aa9      	ldr	r2, [pc, #676]	; (8009e94 <UART_SetConfig+0x34c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d177      	bne.n	8009ce2 <UART_SetConfig+0x19a>
 8009bf2:	4ba9      	ldr	r3, [pc, #676]	; (8009e98 <UART_SetConfig+0x350>)
 8009bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bfa:	2b28      	cmp	r3, #40	; 0x28
 8009bfc:	d86c      	bhi.n	8009cd8 <UART_SetConfig+0x190>
 8009bfe:	a201      	add	r2, pc, #4	; (adr r2, 8009c04 <UART_SetConfig+0xbc>)
 8009c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c04:	08009ca9 	.word	0x08009ca9
 8009c08:	08009cd9 	.word	0x08009cd9
 8009c0c:	08009cd9 	.word	0x08009cd9
 8009c10:	08009cd9 	.word	0x08009cd9
 8009c14:	08009cd9 	.word	0x08009cd9
 8009c18:	08009cd9 	.word	0x08009cd9
 8009c1c:	08009cd9 	.word	0x08009cd9
 8009c20:	08009cd9 	.word	0x08009cd9
 8009c24:	08009cb1 	.word	0x08009cb1
 8009c28:	08009cd9 	.word	0x08009cd9
 8009c2c:	08009cd9 	.word	0x08009cd9
 8009c30:	08009cd9 	.word	0x08009cd9
 8009c34:	08009cd9 	.word	0x08009cd9
 8009c38:	08009cd9 	.word	0x08009cd9
 8009c3c:	08009cd9 	.word	0x08009cd9
 8009c40:	08009cd9 	.word	0x08009cd9
 8009c44:	08009cb9 	.word	0x08009cb9
 8009c48:	08009cd9 	.word	0x08009cd9
 8009c4c:	08009cd9 	.word	0x08009cd9
 8009c50:	08009cd9 	.word	0x08009cd9
 8009c54:	08009cd9 	.word	0x08009cd9
 8009c58:	08009cd9 	.word	0x08009cd9
 8009c5c:	08009cd9 	.word	0x08009cd9
 8009c60:	08009cd9 	.word	0x08009cd9
 8009c64:	08009cc1 	.word	0x08009cc1
 8009c68:	08009cd9 	.word	0x08009cd9
 8009c6c:	08009cd9 	.word	0x08009cd9
 8009c70:	08009cd9 	.word	0x08009cd9
 8009c74:	08009cd9 	.word	0x08009cd9
 8009c78:	08009cd9 	.word	0x08009cd9
 8009c7c:	08009cd9 	.word	0x08009cd9
 8009c80:	08009cd9 	.word	0x08009cd9
 8009c84:	08009cc9 	.word	0x08009cc9
 8009c88:	08009cd9 	.word	0x08009cd9
 8009c8c:	08009cd9 	.word	0x08009cd9
 8009c90:	08009cd9 	.word	0x08009cd9
 8009c94:	08009cd9 	.word	0x08009cd9
 8009c98:	08009cd9 	.word	0x08009cd9
 8009c9c:	08009cd9 	.word	0x08009cd9
 8009ca0:	08009cd9 	.word	0x08009cd9
 8009ca4:	08009cd1 	.word	0x08009cd1
 8009ca8:	2301      	movs	r3, #1
 8009caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cae:	e233      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009cb0:	2304      	movs	r3, #4
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e22f      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009cb8:	2308      	movs	r3, #8
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e22b      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e227      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009cc8:	2320      	movs	r3, #32
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e223      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009cd0:	2340      	movs	r3, #64	; 0x40
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e21f      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009cd8:	2380      	movs	r3, #128	; 0x80
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	bf00      	nop
 8009ce0:	e21a      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a6d      	ldr	r2, [pc, #436]	; (8009e9c <UART_SetConfig+0x354>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d132      	bne.n	8009d52 <UART_SetConfig+0x20a>
 8009cec:	4b6a      	ldr	r3, [pc, #424]	; (8009e98 <UART_SetConfig+0x350>)
 8009cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf0:	f003 0307 	and.w	r3, r3, #7
 8009cf4:	2b05      	cmp	r3, #5
 8009cf6:	d827      	bhi.n	8009d48 <UART_SetConfig+0x200>
 8009cf8:	a201      	add	r2, pc, #4	; (adr r2, 8009d00 <UART_SetConfig+0x1b8>)
 8009cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfe:	bf00      	nop
 8009d00:	08009d19 	.word	0x08009d19
 8009d04:	08009d21 	.word	0x08009d21
 8009d08:	08009d29 	.word	0x08009d29
 8009d0c:	08009d31 	.word	0x08009d31
 8009d10:	08009d39 	.word	0x08009d39
 8009d14:	08009d41 	.word	0x08009d41
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e1fb      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009d20:	2304      	movs	r3, #4
 8009d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d26:	e1f7      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009d28:	2308      	movs	r3, #8
 8009d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2e:	e1f3      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009d30:	2310      	movs	r3, #16
 8009d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d36:	e1ef      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009d38:	2320      	movs	r3, #32
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	e1eb      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009d40:	2340      	movs	r3, #64	; 0x40
 8009d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d46:	e1e7      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009d48:	2380      	movs	r3, #128	; 0x80
 8009d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4e:	bf00      	nop
 8009d50:	e1e2      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a52      	ldr	r2, [pc, #328]	; (8009ea0 <UART_SetConfig+0x358>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d132      	bne.n	8009dc2 <UART_SetConfig+0x27a>
 8009d5c:	4b4e      	ldr	r3, [pc, #312]	; (8009e98 <UART_SetConfig+0x350>)
 8009d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d60:	f003 0307 	and.w	r3, r3, #7
 8009d64:	2b05      	cmp	r3, #5
 8009d66:	d827      	bhi.n	8009db8 <UART_SetConfig+0x270>
 8009d68:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <UART_SetConfig+0x228>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009d89 	.word	0x08009d89
 8009d74:	08009d91 	.word	0x08009d91
 8009d78:	08009d99 	.word	0x08009d99
 8009d7c:	08009da1 	.word	0x08009da1
 8009d80:	08009da9 	.word	0x08009da9
 8009d84:	08009db1 	.word	0x08009db1
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8e:	e1c3      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009d90:	2304      	movs	r3, #4
 8009d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d96:	e1bf      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009d98:	2308      	movs	r3, #8
 8009d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9e:	e1bb      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009da0:	2310      	movs	r3, #16
 8009da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da6:	e1b7      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009da8:	2320      	movs	r3, #32
 8009daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dae:	e1b3      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009db0:	2340      	movs	r3, #64	; 0x40
 8009db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db6:	e1af      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009db8:	2380      	movs	r3, #128	; 0x80
 8009dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbe:	bf00      	nop
 8009dc0:	e1aa      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a37      	ldr	r2, [pc, #220]	; (8009ea4 <UART_SetConfig+0x35c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d132      	bne.n	8009e32 <UART_SetConfig+0x2ea>
 8009dcc:	4b32      	ldr	r3, [pc, #200]	; (8009e98 <UART_SetConfig+0x350>)
 8009dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd0:	f003 0307 	and.w	r3, r3, #7
 8009dd4:	2b05      	cmp	r3, #5
 8009dd6:	d827      	bhi.n	8009e28 <UART_SetConfig+0x2e0>
 8009dd8:	a201      	add	r2, pc, #4	; (adr r2, 8009de0 <UART_SetConfig+0x298>)
 8009dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dde:	bf00      	nop
 8009de0:	08009df9 	.word	0x08009df9
 8009de4:	08009e01 	.word	0x08009e01
 8009de8:	08009e09 	.word	0x08009e09
 8009dec:	08009e11 	.word	0x08009e11
 8009df0:	08009e19 	.word	0x08009e19
 8009df4:	08009e21 	.word	0x08009e21
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfe:	e18b      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e00:	2304      	movs	r3, #4
 8009e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e06:	e187      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e08:	2308      	movs	r3, #8
 8009e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0e:	e183      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e10:	2310      	movs	r3, #16
 8009e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e16:	e17f      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e18:	2320      	movs	r3, #32
 8009e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1e:	e17b      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e20:	2340      	movs	r3, #64	; 0x40
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e177      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e28:	2380      	movs	r3, #128	; 0x80
 8009e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2e:	bf00      	nop
 8009e30:	e172      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a1c      	ldr	r2, [pc, #112]	; (8009ea8 <UART_SetConfig+0x360>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d144      	bne.n	8009ec6 <UART_SetConfig+0x37e>
 8009e3c:	4b16      	ldr	r3, [pc, #88]	; (8009e98 <UART_SetConfig+0x350>)
 8009e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e40:	f003 0307 	and.w	r3, r3, #7
 8009e44:	2b05      	cmp	r3, #5
 8009e46:	d839      	bhi.n	8009ebc <UART_SetConfig+0x374>
 8009e48:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <UART_SetConfig+0x308>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009e69 	.word	0x08009e69
 8009e54:	08009e71 	.word	0x08009e71
 8009e58:	08009e79 	.word	0x08009e79
 8009e5c:	08009e81 	.word	0x08009e81
 8009e60:	08009ead 	.word	0x08009ead
 8009e64:	08009eb5 	.word	0x08009eb5
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6e:	e153      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e70:	2304      	movs	r3, #4
 8009e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e76:	e14f      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e78:	2308      	movs	r3, #8
 8009e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7e:	e14b      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e80:	2310      	movs	r3, #16
 8009e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e86:	e147      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009e88:	cfff69f3 	.word	0xcfff69f3
 8009e8c:	58000c00 	.word	0x58000c00
 8009e90:	11fff4ff 	.word	0x11fff4ff
 8009e94:	40011000 	.word	0x40011000
 8009e98:	58024400 	.word	0x58024400
 8009e9c:	40004400 	.word	0x40004400
 8009ea0:	40004800 	.word	0x40004800
 8009ea4:	40004c00 	.word	0x40004c00
 8009ea8:	40005000 	.word	0x40005000
 8009eac:	2320      	movs	r3, #32
 8009eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb2:	e131      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009eb4:	2340      	movs	r3, #64	; 0x40
 8009eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eba:	e12d      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009ebc:	2380      	movs	r3, #128	; 0x80
 8009ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec2:	bf00      	nop
 8009ec4:	e128      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4ab6      	ldr	r2, [pc, #728]	; (800a1a4 <UART_SetConfig+0x65c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d178      	bne.n	8009fc2 <UART_SetConfig+0x47a>
 8009ed0:	4bb5      	ldr	r3, [pc, #724]	; (800a1a8 <UART_SetConfig+0x660>)
 8009ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ed8:	2b28      	cmp	r3, #40	; 0x28
 8009eda:	d86d      	bhi.n	8009fb8 <UART_SetConfig+0x470>
 8009edc:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <UART_SetConfig+0x39c>)
 8009ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee2:	bf00      	nop
 8009ee4:	08009f89 	.word	0x08009f89
 8009ee8:	08009fb9 	.word	0x08009fb9
 8009eec:	08009fb9 	.word	0x08009fb9
 8009ef0:	08009fb9 	.word	0x08009fb9
 8009ef4:	08009fb9 	.word	0x08009fb9
 8009ef8:	08009fb9 	.word	0x08009fb9
 8009efc:	08009fb9 	.word	0x08009fb9
 8009f00:	08009fb9 	.word	0x08009fb9
 8009f04:	08009f91 	.word	0x08009f91
 8009f08:	08009fb9 	.word	0x08009fb9
 8009f0c:	08009fb9 	.word	0x08009fb9
 8009f10:	08009fb9 	.word	0x08009fb9
 8009f14:	08009fb9 	.word	0x08009fb9
 8009f18:	08009fb9 	.word	0x08009fb9
 8009f1c:	08009fb9 	.word	0x08009fb9
 8009f20:	08009fb9 	.word	0x08009fb9
 8009f24:	08009f99 	.word	0x08009f99
 8009f28:	08009fb9 	.word	0x08009fb9
 8009f2c:	08009fb9 	.word	0x08009fb9
 8009f30:	08009fb9 	.word	0x08009fb9
 8009f34:	08009fb9 	.word	0x08009fb9
 8009f38:	08009fb9 	.word	0x08009fb9
 8009f3c:	08009fb9 	.word	0x08009fb9
 8009f40:	08009fb9 	.word	0x08009fb9
 8009f44:	08009fa1 	.word	0x08009fa1
 8009f48:	08009fb9 	.word	0x08009fb9
 8009f4c:	08009fb9 	.word	0x08009fb9
 8009f50:	08009fb9 	.word	0x08009fb9
 8009f54:	08009fb9 	.word	0x08009fb9
 8009f58:	08009fb9 	.word	0x08009fb9
 8009f5c:	08009fb9 	.word	0x08009fb9
 8009f60:	08009fb9 	.word	0x08009fb9
 8009f64:	08009fa9 	.word	0x08009fa9
 8009f68:	08009fb9 	.word	0x08009fb9
 8009f6c:	08009fb9 	.word	0x08009fb9
 8009f70:	08009fb9 	.word	0x08009fb9
 8009f74:	08009fb9 	.word	0x08009fb9
 8009f78:	08009fb9 	.word	0x08009fb9
 8009f7c:	08009fb9 	.word	0x08009fb9
 8009f80:	08009fb9 	.word	0x08009fb9
 8009f84:	08009fb1 	.word	0x08009fb1
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8e:	e0c3      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009f90:	2304      	movs	r3, #4
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f96:	e0bf      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009f98:	2308      	movs	r3, #8
 8009f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9e:	e0bb      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009fa0:	2310      	movs	r3, #16
 8009fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa6:	e0b7      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009fa8:	2320      	movs	r3, #32
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fae:	e0b3      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009fb0:	2340      	movs	r3, #64	; 0x40
 8009fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb6:	e0af      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009fb8:	2380      	movs	r3, #128	; 0x80
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbe:	bf00      	nop
 8009fc0:	e0aa      	b.n	800a118 <UART_SetConfig+0x5d0>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a79      	ldr	r2, [pc, #484]	; (800a1ac <UART_SetConfig+0x664>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d132      	bne.n	800a032 <UART_SetConfig+0x4ea>
 8009fcc:	4b76      	ldr	r3, [pc, #472]	; (800a1a8 <UART_SetConfig+0x660>)
 8009fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd0:	f003 0307 	and.w	r3, r3, #7
 8009fd4:	2b05      	cmp	r3, #5
 8009fd6:	d827      	bhi.n	800a028 <UART_SetConfig+0x4e0>
 8009fd8:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <UART_SetConfig+0x498>)
 8009fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fde:	bf00      	nop
 8009fe0:	08009ff9 	.word	0x08009ff9
 8009fe4:	0800a001 	.word	0x0800a001
 8009fe8:	0800a009 	.word	0x0800a009
 8009fec:	0800a011 	.word	0x0800a011
 8009ff0:	0800a019 	.word	0x0800a019
 8009ff4:	0800a021 	.word	0x0800a021
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffe:	e08b      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a000:	2304      	movs	r3, #4
 800a002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a006:	e087      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a008:	2308      	movs	r3, #8
 800a00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00e:	e083      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a010:	2310      	movs	r3, #16
 800a012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a016:	e07f      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a018:	2320      	movs	r3, #32
 800a01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01e:	e07b      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a020:	2340      	movs	r3, #64	; 0x40
 800a022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a026:	e077      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a028:	2380      	movs	r3, #128	; 0x80
 800a02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02e:	bf00      	nop
 800a030:	e072      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a5e      	ldr	r2, [pc, #376]	; (800a1b0 <UART_SetConfig+0x668>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d132      	bne.n	800a0a2 <UART_SetConfig+0x55a>
 800a03c:	4b5a      	ldr	r3, [pc, #360]	; (800a1a8 <UART_SetConfig+0x660>)
 800a03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	2b05      	cmp	r3, #5
 800a046:	d827      	bhi.n	800a098 <UART_SetConfig+0x550>
 800a048:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <UART_SetConfig+0x508>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a069 	.word	0x0800a069
 800a054:	0800a071 	.word	0x0800a071
 800a058:	0800a079 	.word	0x0800a079
 800a05c:	0800a081 	.word	0x0800a081
 800a060:	0800a089 	.word	0x0800a089
 800a064:	0800a091 	.word	0x0800a091
 800a068:	2300      	movs	r3, #0
 800a06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06e:	e053      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a070:	2304      	movs	r3, #4
 800a072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a076:	e04f      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a078:	2308      	movs	r3, #8
 800a07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a07e:	e04b      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a080:	2310      	movs	r3, #16
 800a082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a086:	e047      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a088:	2320      	movs	r3, #32
 800a08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a08e:	e043      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a090:	2340      	movs	r3, #64	; 0x40
 800a092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a096:	e03f      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a098:	2380      	movs	r3, #128	; 0x80
 800a09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a09e:	bf00      	nop
 800a0a0:	e03a      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a43      	ldr	r2, [pc, #268]	; (800a1b4 <UART_SetConfig+0x66c>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d132      	bne.n	800a112 <UART_SetConfig+0x5ca>
 800a0ac:	4b3e      	ldr	r3, [pc, #248]	; (800a1a8 <UART_SetConfig+0x660>)
 800a0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	2b05      	cmp	r3, #5
 800a0b6:	d827      	bhi.n	800a108 <UART_SetConfig+0x5c0>
 800a0b8:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <UART_SetConfig+0x578>)
 800a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0be:	bf00      	nop
 800a0c0:	0800a0d9 	.word	0x0800a0d9
 800a0c4:	0800a0e1 	.word	0x0800a0e1
 800a0c8:	0800a0e9 	.word	0x0800a0e9
 800a0cc:	0800a0f1 	.word	0x0800a0f1
 800a0d0:	0800a0f9 	.word	0x0800a0f9
 800a0d4:	0800a101 	.word	0x0800a101
 800a0d8:	2302      	movs	r3, #2
 800a0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0de:	e01b      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a0e0:	2304      	movs	r3, #4
 800a0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0e6:	e017      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ee:	e013      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a0f0:	2310      	movs	r3, #16
 800a0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f6:	e00f      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a0f8:	2320      	movs	r3, #32
 800a0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0fe:	e00b      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a100:	2340      	movs	r3, #64	; 0x40
 800a102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a106:	e007      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a108:	2380      	movs	r3, #128	; 0x80
 800a10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10e:	bf00      	nop
 800a110:	e002      	b.n	800a118 <UART_SetConfig+0x5d0>
 800a112:	2380      	movs	r3, #128	; 0x80
 800a114:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a25      	ldr	r2, [pc, #148]	; (800a1b4 <UART_SetConfig+0x66c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	f040 80b8 	bne.w	800a294 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d019      	beq.n	800a160 <UART_SetConfig+0x618>
 800a12c:	2b08      	cmp	r3, #8
 800a12e:	dc04      	bgt.n	800a13a <UART_SetConfig+0x5f2>
 800a130:	2b02      	cmp	r3, #2
 800a132:	d009      	beq.n	800a148 <UART_SetConfig+0x600>
 800a134:	2b04      	cmp	r3, #4
 800a136:	d00b      	beq.n	800a150 <UART_SetConfig+0x608>
 800a138:	e042      	b.n	800a1c0 <UART_SetConfig+0x678>
 800a13a:	2b20      	cmp	r3, #32
 800a13c:	d02b      	beq.n	800a196 <UART_SetConfig+0x64e>
 800a13e:	2b40      	cmp	r3, #64	; 0x40
 800a140:	d02c      	beq.n	800a19c <UART_SetConfig+0x654>
 800a142:	2b10      	cmp	r3, #16
 800a144:	d014      	beq.n	800a170 <UART_SetConfig+0x628>
 800a146:	e03b      	b.n	800a1c0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a148:	f7fe f9e2 	bl	8008510 <HAL_RCCEx_GetD3PCLK1Freq>
 800a14c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a14e:	e03d      	b.n	800a1cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a150:	f107 0314 	add.w	r3, r7, #20
 800a154:	4618      	mov	r0, r3
 800a156:	f7fe f9f1 	bl	800853c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a15e:	e035      	b.n	800a1cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a160:	f107 0308 	add.w	r3, r7, #8
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fb35 	bl	80087d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a16e:	e02d      	b.n	800a1cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a170:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <UART_SetConfig+0x660>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0320 	and.w	r3, r3, #32
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d009      	beq.n	800a190 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <UART_SetConfig+0x660>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	08db      	lsrs	r3, r3, #3
 800a182:	f003 0303 	and.w	r3, r3, #3
 800a186:	4a0c      	ldr	r2, [pc, #48]	; (800a1b8 <UART_SetConfig+0x670>)
 800a188:	fa22 f303 	lsr.w	r3, r2, r3
 800a18c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a18e:	e01d      	b.n	800a1cc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a190:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <UART_SetConfig+0x670>)
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a194:	e01a      	b.n	800a1cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <UART_SetConfig+0x674>)
 800a198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a19a:	e017      	b.n	800a1cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a19c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1a2:	e013      	b.n	800a1cc <UART_SetConfig+0x684>
 800a1a4:	40011400 	.word	0x40011400
 800a1a8:	58024400 	.word	0x58024400
 800a1ac:	40007800 	.word	0x40007800
 800a1b0:	40007c00 	.word	0x40007c00
 800a1b4:	58000c00 	.word	0x58000c00
 800a1b8:	03d09000 	.word	0x03d09000
 800a1bc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a1ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 824d 	beq.w	800a66e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	4aad      	ldr	r2, [pc, #692]	; (800a490 <UART_SetConfig+0x948>)
 800a1da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1e6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	4413      	add	r3, r2
 800a1f2:	6a3a      	ldr	r2, [r7, #32]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d305      	bcc.n	800a204 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1fe:	6a3a      	ldr	r2, [r7, #32]
 800a200:	429a      	cmp	r2, r3
 800a202:	d903      	bls.n	800a20c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a20a:	e230      	b.n	800a66e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20e:	4618      	mov	r0, r3
 800a210:	f04f 0100 	mov.w	r1, #0
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	4a9d      	ldr	r2, [pc, #628]	; (800a490 <UART_SetConfig+0x948>)
 800a21a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	f04f 0400 	mov.w	r4, #0
 800a224:	461a      	mov	r2, r3
 800a226:	4623      	mov	r3, r4
 800a228:	f7f6 f856 	bl	80002d8 <__aeabi_uldivmod>
 800a22c:	4603      	mov	r3, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	4619      	mov	r1, r3
 800a232:	4622      	mov	r2, r4
 800a234:	f04f 0300 	mov.w	r3, #0
 800a238:	f04f 0400 	mov.w	r4, #0
 800a23c:	0214      	lsls	r4, r2, #8
 800a23e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a242:	020b      	lsls	r3, r1, #8
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	6852      	ldr	r2, [r2, #4]
 800a248:	0852      	lsrs	r2, r2, #1
 800a24a:	4611      	mov	r1, r2
 800a24c:	f04f 0200 	mov.w	r2, #0
 800a250:	eb13 0b01 	adds.w	fp, r3, r1
 800a254:	eb44 0c02 	adc.w	ip, r4, r2
 800a258:	4658      	mov	r0, fp
 800a25a:	4661      	mov	r1, ip
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f04f 0400 	mov.w	r4, #0
 800a264:	461a      	mov	r2, r3
 800a266:	4623      	mov	r3, r4
 800a268:	f7f6 f836 	bl	80002d8 <__aeabi_uldivmod>
 800a26c:	4603      	mov	r3, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a278:	d308      	bcc.n	800a28c <UART_SetConfig+0x744>
 800a27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a280:	d204      	bcs.n	800a28c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a288:	60da      	str	r2, [r3, #12]
 800a28a:	e1f0      	b.n	800a66e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a292:	e1ec      	b.n	800a66e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a29c:	f040 8100 	bne.w	800a4a0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a2a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	f200 80b7 	bhi.w	800a418 <UART_SetConfig+0x8d0>
 800a2aa:	a201      	add	r2, pc, #4	; (adr r2, 800a2b0 <UART_SetConfig+0x768>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a3b5 	.word	0x0800a3b5
 800a2b4:	0800a3bd 	.word	0x0800a3bd
 800a2b8:	0800a419 	.word	0x0800a419
 800a2bc:	0800a419 	.word	0x0800a419
 800a2c0:	0800a3c5 	.word	0x0800a3c5
 800a2c4:	0800a419 	.word	0x0800a419
 800a2c8:	0800a419 	.word	0x0800a419
 800a2cc:	0800a419 	.word	0x0800a419
 800a2d0:	0800a3d5 	.word	0x0800a3d5
 800a2d4:	0800a419 	.word	0x0800a419
 800a2d8:	0800a419 	.word	0x0800a419
 800a2dc:	0800a419 	.word	0x0800a419
 800a2e0:	0800a419 	.word	0x0800a419
 800a2e4:	0800a419 	.word	0x0800a419
 800a2e8:	0800a419 	.word	0x0800a419
 800a2ec:	0800a419 	.word	0x0800a419
 800a2f0:	0800a3e5 	.word	0x0800a3e5
 800a2f4:	0800a419 	.word	0x0800a419
 800a2f8:	0800a419 	.word	0x0800a419
 800a2fc:	0800a419 	.word	0x0800a419
 800a300:	0800a419 	.word	0x0800a419
 800a304:	0800a419 	.word	0x0800a419
 800a308:	0800a419 	.word	0x0800a419
 800a30c:	0800a419 	.word	0x0800a419
 800a310:	0800a419 	.word	0x0800a419
 800a314:	0800a419 	.word	0x0800a419
 800a318:	0800a419 	.word	0x0800a419
 800a31c:	0800a419 	.word	0x0800a419
 800a320:	0800a419 	.word	0x0800a419
 800a324:	0800a419 	.word	0x0800a419
 800a328:	0800a419 	.word	0x0800a419
 800a32c:	0800a419 	.word	0x0800a419
 800a330:	0800a40b 	.word	0x0800a40b
 800a334:	0800a419 	.word	0x0800a419
 800a338:	0800a419 	.word	0x0800a419
 800a33c:	0800a419 	.word	0x0800a419
 800a340:	0800a419 	.word	0x0800a419
 800a344:	0800a419 	.word	0x0800a419
 800a348:	0800a419 	.word	0x0800a419
 800a34c:	0800a419 	.word	0x0800a419
 800a350:	0800a419 	.word	0x0800a419
 800a354:	0800a419 	.word	0x0800a419
 800a358:	0800a419 	.word	0x0800a419
 800a35c:	0800a419 	.word	0x0800a419
 800a360:	0800a419 	.word	0x0800a419
 800a364:	0800a419 	.word	0x0800a419
 800a368:	0800a419 	.word	0x0800a419
 800a36c:	0800a419 	.word	0x0800a419
 800a370:	0800a419 	.word	0x0800a419
 800a374:	0800a419 	.word	0x0800a419
 800a378:	0800a419 	.word	0x0800a419
 800a37c:	0800a419 	.word	0x0800a419
 800a380:	0800a419 	.word	0x0800a419
 800a384:	0800a419 	.word	0x0800a419
 800a388:	0800a419 	.word	0x0800a419
 800a38c:	0800a419 	.word	0x0800a419
 800a390:	0800a419 	.word	0x0800a419
 800a394:	0800a419 	.word	0x0800a419
 800a398:	0800a419 	.word	0x0800a419
 800a39c:	0800a419 	.word	0x0800a419
 800a3a0:	0800a419 	.word	0x0800a419
 800a3a4:	0800a419 	.word	0x0800a419
 800a3a8:	0800a419 	.word	0x0800a419
 800a3ac:	0800a419 	.word	0x0800a419
 800a3b0:	0800a411 	.word	0x0800a411
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3b4:	f7fd f992 	bl	80076dc <HAL_RCC_GetPCLK1Freq>
 800a3b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3ba:	e033      	b.n	800a424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3bc:	f7fd f9a4 	bl	8007708 <HAL_RCC_GetPCLK2Freq>
 800a3c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3c2:	e02f      	b.n	800a424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3c4:	f107 0314 	add.w	r3, r7, #20
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fe f8b7 	bl	800853c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3d2:	e027      	b.n	800a424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3d4:	f107 0308 	add.w	r3, r7, #8
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe f9fb 	bl	80087d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3e2:	e01f      	b.n	800a424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3e4:	4b2b      	ldr	r3, [pc, #172]	; (800a494 <UART_SetConfig+0x94c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0320 	and.w	r3, r3, #32
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d009      	beq.n	800a404 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3f0:	4b28      	ldr	r3, [pc, #160]	; (800a494 <UART_SetConfig+0x94c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	08db      	lsrs	r3, r3, #3
 800a3f6:	f003 0303 	and.w	r3, r3, #3
 800a3fa:	4a27      	ldr	r2, [pc, #156]	; (800a498 <UART_SetConfig+0x950>)
 800a3fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a400:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a402:	e00f      	b.n	800a424 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a404:	4b24      	ldr	r3, [pc, #144]	; (800a498 <UART_SetConfig+0x950>)
 800a406:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a408:	e00c      	b.n	800a424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a40a:	4b24      	ldr	r3, [pc, #144]	; (800a49c <UART_SetConfig+0x954>)
 800a40c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a40e:	e009      	b.n	800a424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a416:	e005      	b.n	800a424 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a418:	2300      	movs	r3, #0
 800a41a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a422:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 8121 	beq.w	800a66e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a430:	4a17      	ldr	r2, [pc, #92]	; (800a490 <UART_SetConfig+0x948>)
 800a432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a436:	461a      	mov	r2, r3
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a43e:	005a      	lsls	r2, r3, #1
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	085b      	lsrs	r3, r3, #1
 800a446:	441a      	add	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a450:	b29b      	uxth	r3, r3
 800a452:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	2b0f      	cmp	r3, #15
 800a458:	d916      	bls.n	800a488 <UART_SetConfig+0x940>
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a460:	d212      	bcs.n	800a488 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a464:	b29b      	uxth	r3, r3
 800a466:	f023 030f 	bic.w	r3, r3, #15
 800a46a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	085b      	lsrs	r3, r3, #1
 800a470:	b29b      	uxth	r3, r3
 800a472:	f003 0307 	and.w	r3, r3, #7
 800a476:	b29a      	uxth	r2, r3
 800a478:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a47a:	4313      	orrs	r3, r2
 800a47c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a484:	60da      	str	r2, [r3, #12]
 800a486:	e0f2      	b.n	800a66e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a48e:	e0ee      	b.n	800a66e <UART_SetConfig+0xb26>
 800a490:	0800acac 	.word	0x0800acac
 800a494:	58024400 	.word	0x58024400
 800a498:	03d09000 	.word	0x03d09000
 800a49c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4a4:	2b40      	cmp	r3, #64	; 0x40
 800a4a6:	f200 80b7 	bhi.w	800a618 <UART_SetConfig+0xad0>
 800a4aa:	a201      	add	r2, pc, #4	; (adr r2, 800a4b0 <UART_SetConfig+0x968>)
 800a4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b0:	0800a5b5 	.word	0x0800a5b5
 800a4b4:	0800a5bd 	.word	0x0800a5bd
 800a4b8:	0800a619 	.word	0x0800a619
 800a4bc:	0800a619 	.word	0x0800a619
 800a4c0:	0800a5c5 	.word	0x0800a5c5
 800a4c4:	0800a619 	.word	0x0800a619
 800a4c8:	0800a619 	.word	0x0800a619
 800a4cc:	0800a619 	.word	0x0800a619
 800a4d0:	0800a5d5 	.word	0x0800a5d5
 800a4d4:	0800a619 	.word	0x0800a619
 800a4d8:	0800a619 	.word	0x0800a619
 800a4dc:	0800a619 	.word	0x0800a619
 800a4e0:	0800a619 	.word	0x0800a619
 800a4e4:	0800a619 	.word	0x0800a619
 800a4e8:	0800a619 	.word	0x0800a619
 800a4ec:	0800a619 	.word	0x0800a619
 800a4f0:	0800a5e5 	.word	0x0800a5e5
 800a4f4:	0800a619 	.word	0x0800a619
 800a4f8:	0800a619 	.word	0x0800a619
 800a4fc:	0800a619 	.word	0x0800a619
 800a500:	0800a619 	.word	0x0800a619
 800a504:	0800a619 	.word	0x0800a619
 800a508:	0800a619 	.word	0x0800a619
 800a50c:	0800a619 	.word	0x0800a619
 800a510:	0800a619 	.word	0x0800a619
 800a514:	0800a619 	.word	0x0800a619
 800a518:	0800a619 	.word	0x0800a619
 800a51c:	0800a619 	.word	0x0800a619
 800a520:	0800a619 	.word	0x0800a619
 800a524:	0800a619 	.word	0x0800a619
 800a528:	0800a619 	.word	0x0800a619
 800a52c:	0800a619 	.word	0x0800a619
 800a530:	0800a60b 	.word	0x0800a60b
 800a534:	0800a619 	.word	0x0800a619
 800a538:	0800a619 	.word	0x0800a619
 800a53c:	0800a619 	.word	0x0800a619
 800a540:	0800a619 	.word	0x0800a619
 800a544:	0800a619 	.word	0x0800a619
 800a548:	0800a619 	.word	0x0800a619
 800a54c:	0800a619 	.word	0x0800a619
 800a550:	0800a619 	.word	0x0800a619
 800a554:	0800a619 	.word	0x0800a619
 800a558:	0800a619 	.word	0x0800a619
 800a55c:	0800a619 	.word	0x0800a619
 800a560:	0800a619 	.word	0x0800a619
 800a564:	0800a619 	.word	0x0800a619
 800a568:	0800a619 	.word	0x0800a619
 800a56c:	0800a619 	.word	0x0800a619
 800a570:	0800a619 	.word	0x0800a619
 800a574:	0800a619 	.word	0x0800a619
 800a578:	0800a619 	.word	0x0800a619
 800a57c:	0800a619 	.word	0x0800a619
 800a580:	0800a619 	.word	0x0800a619
 800a584:	0800a619 	.word	0x0800a619
 800a588:	0800a619 	.word	0x0800a619
 800a58c:	0800a619 	.word	0x0800a619
 800a590:	0800a619 	.word	0x0800a619
 800a594:	0800a619 	.word	0x0800a619
 800a598:	0800a619 	.word	0x0800a619
 800a59c:	0800a619 	.word	0x0800a619
 800a5a0:	0800a619 	.word	0x0800a619
 800a5a4:	0800a619 	.word	0x0800a619
 800a5a8:	0800a619 	.word	0x0800a619
 800a5ac:	0800a619 	.word	0x0800a619
 800a5b0:	0800a611 	.word	0x0800a611
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b4:	f7fd f892 	bl	80076dc <HAL_RCC_GetPCLK1Freq>
 800a5b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a5ba:	e033      	b.n	800a624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5bc:	f7fd f8a4 	bl	8007708 <HAL_RCC_GetPCLK2Freq>
 800a5c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a5c2:	e02f      	b.n	800a624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5c4:	f107 0314 	add.w	r3, r7, #20
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fd ffb7 	bl	800853c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5d2:	e027      	b.n	800a624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5d4:	f107 0308 	add.w	r3, r7, #8
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fe f8fb 	bl	80087d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5e2:	e01f      	b.n	800a624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5e4:	4b2c      	ldr	r3, [pc, #176]	; (800a698 <UART_SetConfig+0xb50>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0320 	and.w	r3, r3, #32
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d009      	beq.n	800a604 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5f0:	4b29      	ldr	r3, [pc, #164]	; (800a698 <UART_SetConfig+0xb50>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	08db      	lsrs	r3, r3, #3
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	4a28      	ldr	r2, [pc, #160]	; (800a69c <UART_SetConfig+0xb54>)
 800a5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a600:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a602:	e00f      	b.n	800a624 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a604:	4b25      	ldr	r3, [pc, #148]	; (800a69c <UART_SetConfig+0xb54>)
 800a606:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a608:	e00c      	b.n	800a624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a60a:	4b25      	ldr	r3, [pc, #148]	; (800a6a0 <UART_SetConfig+0xb58>)
 800a60c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a60e:	e009      	b.n	800a624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a616:	e005      	b.n	800a624 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a618:	2300      	movs	r3, #0
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a622:	bf00      	nop
    }

    if (pclk != 0U)
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d021      	beq.n	800a66e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	4a1d      	ldr	r2, [pc, #116]	; (800a6a4 <UART_SetConfig+0xb5c>)
 800a630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a634:	461a      	mov	r2, r3
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	fbb3 f2f2 	udiv	r2, r3, r2
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	085b      	lsrs	r3, r3, #1
 800a642:	441a      	add	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	2b0f      	cmp	r3, #15
 800a654:	d908      	bls.n	800a668 <UART_SetConfig+0xb20>
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a65c:	d204      	bcs.n	800a668 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a664:	60da      	str	r2, [r3, #12]
 800a666:	e002      	b.n	800a66e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a68a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3738      	adds	r7, #56	; 0x38
 800a692:	46bd      	mov	sp, r7
 800a694:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a698:	58024400 	.word	0x58024400
 800a69c:	03d09000 	.word	0x03d09000
 800a6a0:	003d0900 	.word	0x003d0900
 800a6a4:	0800acac 	.word	0x0800acac

0800a6a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d6:	f003 0302 	and.w	r3, r3, #2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f8:	f003 0304 	and.w	r3, r3, #4
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00a      	beq.n	800a716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71a:	f003 0308 	and.w	r3, r3, #8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	f003 0310 	and.w	r3, r3, #16
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00a      	beq.n	800a75a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75e:	f003 0320 	and.w	r3, r3, #32
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01a      	beq.n	800a7be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7a6:	d10a      	bne.n	800a7be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00a      	beq.n	800a7e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	605a      	str	r2, [r3, #4]
  }
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af02      	add	r7, sp, #8
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a7fc:	f7f7 fa66 	bl	8001ccc <HAL_GetTick>
 800a800:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0308 	and.w	r3, r3, #8
 800a80c:	2b08      	cmp	r3, #8
 800a80e:	d10e      	bne.n	800a82e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f82c 	bl	800a87c <UART_WaitOnFlagUntilTimeout>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e022      	b.n	800a874 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b04      	cmp	r3, #4
 800a83a:	d10e      	bne.n	800a85a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a83c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f816 	bl	800a87c <UART_WaitOnFlagUntilTimeout>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a856:	2303      	movs	r3, #3
 800a858:	e00c      	b.n	800a874 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2220      	movs	r2, #32
 800a85e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	4613      	mov	r3, r2
 800a88a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a88c:	e062      	b.n	800a954 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a894:	d05e      	beq.n	800a954 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a896:	f7f7 fa19 	bl	8001ccc <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d302      	bcc.n	800a8ac <UART_WaitOnFlagUntilTimeout+0x30>
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d11d      	bne.n	800a8e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a8ba:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 0201 	bic.w	r2, r2, #1
 800a8ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e045      	b.n	800a974 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d02e      	beq.n	800a954 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a904:	d126      	bne.n	800a954 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a90e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a91e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0201 	bic.w	r2, r2, #1
 800a92e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2220      	movs	r2, #32
 800a934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2220      	movs	r2, #32
 800a944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e00f      	b.n	800a974 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	69da      	ldr	r2, [r3, #28]
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	4013      	ands	r3, r2
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	429a      	cmp	r2, r3
 800a962:	bf0c      	ite	eq
 800a964:	2301      	moveq	r3, #1
 800a966:	2300      	movne	r3, #0
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	461a      	mov	r2, r3
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d08d      	beq.n	800a88e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d101      	bne.n	800a992 <HAL_UARTEx_DisableFifoMode+0x16>
 800a98e:	2302      	movs	r3, #2
 800a990:	e027      	b.n	800a9e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2224      	movs	r2, #36	; 0x24
 800a99e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0201 	bic.w	r2, r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a9c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d101      	bne.n	800aa06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa02:	2302      	movs	r3, #2
 800aa04:	e02d      	b.n	800aa62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2224      	movs	r2, #36	; 0x24
 800aa12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f022 0201 	bic.w	r2, r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f850 	bl	800aae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2220      	movs	r2, #32
 800aa54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d101      	bne.n	800aa82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa7e:	2302      	movs	r3, #2
 800aa80:	e02d      	b.n	800aade <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2201      	movs	r2, #1
 800aa86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2224      	movs	r2, #36	; 0x24
 800aa8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f022 0201 	bic.w	r2, r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	430a      	orrs	r2, r1
 800aabc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 f812 	bl	800aae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2220      	movs	r2, #32
 800aad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b089      	sub	sp, #36	; 0x24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aaf0:	4a2f      	ldr	r2, [pc, #188]	; (800abb0 <UARTEx_SetNbDataToProcess+0xc8>)
 800aaf2:	f107 0314 	add.w	r3, r7, #20
 800aaf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aafa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aafe:	4a2d      	ldr	r2, [pc, #180]	; (800abb4 <UARTEx_SetNbDataToProcess+0xcc>)
 800ab00:	f107 030c 	add.w	r3, r7, #12
 800ab04:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab08:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d108      	bne.n	800ab26 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab24:	e03d      	b.n	800aba2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab26:	2310      	movs	r3, #16
 800ab28:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab2a:	2310      	movs	r3, #16
 800ab2c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	0e5b      	lsrs	r3, r3, #25
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	f003 0307 	and.w	r3, r3, #7
 800ab3c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	0f5b      	lsrs	r3, r3, #29
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f003 0307 	and.w	r3, r3, #7
 800ab4c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ab4e:	7fbb      	ldrb	r3, [r7, #30]
 800ab50:	7f3a      	ldrb	r2, [r7, #28]
 800ab52:	f107 0120 	add.w	r1, r7, #32
 800ab56:	440a      	add	r2, r1
 800ab58:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ab5c:	fb02 f303 	mul.w	r3, r2, r3
 800ab60:	7f3a      	ldrb	r2, [r7, #28]
 800ab62:	f107 0120 	add.w	r1, r7, #32
 800ab66:	440a      	add	r2, r1
 800ab68:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ab6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ab78:	7ffb      	ldrb	r3, [r7, #31]
 800ab7a:	7f7a      	ldrb	r2, [r7, #29]
 800ab7c:	f107 0120 	add.w	r1, r7, #32
 800ab80:	440a      	add	r2, r1
 800ab82:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ab86:	fb02 f303 	mul.w	r3, r2, r3
 800ab8a:	7f7a      	ldrb	r2, [r7, #29]
 800ab8c:	f107 0120 	add.w	r1, r7, #32
 800ab90:	440a      	add	r2, r1
 800ab92:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ab96:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aba2:	bf00      	nop
 800aba4:	3724      	adds	r7, #36	; 0x24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	0800ac28 	.word	0x0800ac28
 800abb4:	0800ac30 	.word	0x0800ac30

0800abb8 <__libc_init_array>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	4e0d      	ldr	r6, [pc, #52]	; (800abf0 <__libc_init_array+0x38>)
 800abbc:	4c0d      	ldr	r4, [pc, #52]	; (800abf4 <__libc_init_array+0x3c>)
 800abbe:	1ba4      	subs	r4, r4, r6
 800abc0:	10a4      	asrs	r4, r4, #2
 800abc2:	2500      	movs	r5, #0
 800abc4:	42a5      	cmp	r5, r4
 800abc6:	d109      	bne.n	800abdc <__libc_init_array+0x24>
 800abc8:	4e0b      	ldr	r6, [pc, #44]	; (800abf8 <__libc_init_array+0x40>)
 800abca:	4c0c      	ldr	r4, [pc, #48]	; (800abfc <__libc_init_array+0x44>)
 800abcc:	f000 f820 	bl	800ac10 <_init>
 800abd0:	1ba4      	subs	r4, r4, r6
 800abd2:	10a4      	asrs	r4, r4, #2
 800abd4:	2500      	movs	r5, #0
 800abd6:	42a5      	cmp	r5, r4
 800abd8:	d105      	bne.n	800abe6 <__libc_init_array+0x2e>
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abe0:	4798      	blx	r3
 800abe2:	3501      	adds	r5, #1
 800abe4:	e7ee      	b.n	800abc4 <__libc_init_array+0xc>
 800abe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abea:	4798      	blx	r3
 800abec:	3501      	adds	r5, #1
 800abee:	e7f2      	b.n	800abd6 <__libc_init_array+0x1e>
 800abf0:	0800accc 	.word	0x0800accc
 800abf4:	0800accc 	.word	0x0800accc
 800abf8:	0800accc 	.word	0x0800accc
 800abfc:	0800acd0 	.word	0x0800acd0

0800ac00 <memset>:
 800ac00:	4402      	add	r2, r0
 800ac02:	4603      	mov	r3, r0
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d100      	bne.n	800ac0a <memset+0xa>
 800ac08:	4770      	bx	lr
 800ac0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac0e:	e7f9      	b.n	800ac04 <memset+0x4>

0800ac10 <_init>:
 800ac10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac12:	bf00      	nop
 800ac14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac16:	bc08      	pop	{r3}
 800ac18:	469e      	mov	lr, r3
 800ac1a:	4770      	bx	lr

0800ac1c <_fini>:
 800ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1e:	bf00      	nop
 800ac20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac22:	bc08      	pop	{r3}
 800ac24:	469e      	mov	lr, r3
 800ac26:	4770      	bx	lr
